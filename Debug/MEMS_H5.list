
MEMS_H5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142c4  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08014518  08014518  00024518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014838  08014838  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  08014838  08014838  00024838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014840  08014840  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014840  08014840  00024840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014844  08014844  00024844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08014848  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000160  080149a8  00030160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  080149a8  000307c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d7ed  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005384  00000000  00000000  0006d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033c8  00000000  00000000  00072d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000281a  00000000  00000000  00076118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039550  00000000  00000000  00078932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034b5f  00000000  00000000  000b1e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016d056  00000000  00000000  000e69e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000f168  00000000  00000000  00253a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00262ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000160 	.word	0x20000160
 800026c:	00000000 	.word	0x00000000
 8000270:	080144fc 	.word	0x080144fc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000164 	.word	0x20000164
 800028c:	080144fc 	.word	0x080144fc

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b982 	b.w	8000f74 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d146      	bne.n	8000d26 <__udivmoddi4+0x9e>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d95e      	bls.n	8000d5c <__udivmoddi4+0xd4>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	409c      	lsls	r4, r3
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	4317      	orrs	r7, r2
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	0c22      	lsrs	r2, r4, #16
 8000cc0:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	fb01 f005 	mul.w	r0, r1, r5
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x5e>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x5c>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f200 8134 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	b2a4      	uxth	r4, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	fb00 f505 	mul.w	r5, r0, r5
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	42a5      	cmp	r5, r4
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x88>
 8000cfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000d02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x86>
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	f200 8119 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000d0e:	4610      	mov	r0, r2
 8000d10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d14:	1b64      	subs	r4, r4, r5
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11e      	cbz	r6, 8000d22 <__udivmoddi4+0x9a>
 8000d1a:	40dc      	lsrs	r4, r3
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0xb4>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	f000 80fc 	beq.w	8000f28 <__udivmoddi4+0x2a0>
 8000d30:	2100      	movs	r1, #0
 8000d32:	e9c6 0500 	strd	r0, r5, [r6]
 8000d36:	4608      	mov	r0, r1
 8000d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3c:	fab3 f183 	clz	r1, r3
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d14c      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	f0c0 80f2 	bcc.w	8000f2e <__udivmoddi4+0x2a6>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f240 80ef 	bls.w	8000f2e <__udivmoddi4+0x2a6>
 8000d50:	4608      	mov	r0, r1
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e5      	beq.n	8000d22 <__udivmoddi4+0x9a>
 8000d56:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5a:	e7e2      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xd8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 809f 	bne.w	8000ea8 <__udivmoddi4+0x220>
 8000d6a:	1a8a      	subs	r2, r1, r2
 8000d6c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d7a:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d84:	fb07 f005 	mul.w	r0, r7, r5
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d90f      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	bf2c      	ite	cs
 8000d96:	f04f 0901 	movcs.w	r9, #1
 8000d9a:	f04f 0900 	movcc.w	r9, #0
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	d903      	bls.n	8000daa <__udivmoddi4+0x122>
 8000da2:	f1b9 0f00 	cmp.w	r9, #0
 8000da6:	f000 80ce 	beq.w	8000f46 <__udivmoddi4+0x2be>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0fe 	udiv	r0, r2, lr
 8000db4:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	42a7      	cmp	r7, r4
 8000dd0:	f200 80b3 	bhi.w	8000f3a <__udivmoddi4+0x2b2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	1be4      	subs	r4, r4, r7
 8000dd8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ddc:	e79c      	b.n	8000d18 <__udivmoddi4+0x90>
 8000dde:	f1c1 0420 	rsb	r4, r1, #32
 8000de2:	408b      	lsls	r3, r1
 8000de4:	fa05 fc01 	lsl.w	ip, r5, r1
 8000de8:	fa22 f704 	lsr.w	r7, r2, r4
 8000dec:	40e5      	lsrs	r5, r4
 8000dee:	408a      	lsls	r2, r1
 8000df0:	431f      	orrs	r7, r3
 8000df2:	fa20 f304 	lsr.w	r3, r0, r4
 8000df6:	4088      	lsls	r0, r1
 8000df8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e08:	fbb5 fef8 	udiv	lr, r5, r8
 8000e0c:	fb08 551e 	mls	r5, r8, lr, r5
 8000e10:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e14:	fb0e f90c 	mul.w	r9, lr, ip
 8000e18:	45a9      	cmp	r9, r5
 8000e1a:	d90e      	bls.n	8000e3a <__udivmoddi4+0x1b2>
 8000e1c:	197d      	adds	r5, r7, r5
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	bf2c      	ite	cs
 8000e24:	f04f 0b01 	movcs.w	fp, #1
 8000e28:	f04f 0b00 	movcc.w	fp, #0
 8000e2c:	45a9      	cmp	r9, r5
 8000e2e:	d903      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e30:	f1bb 0f00 	cmp.w	fp, #0
 8000e34:	f000 808d 	beq.w	8000f52 <__udivmoddi4+0x2ca>
 8000e38:	46d6      	mov	lr, sl
 8000e3a:	eba5 0509 	sub.w	r5, r5, r9
 8000e3e:	fa1f f983 	uxth.w	r9, r3
 8000e42:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e46:	fb08 5513 	mls	r5, r8, r3, r5
 8000e4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e52:	45ac      	cmp	ip, r5
 8000e54:	d906      	bls.n	8000e64 <__udivmoddi4+0x1dc>
 8000e56:	197d      	adds	r5, r7, r5
 8000e58:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x1da>
 8000e5e:	45ac      	cmp	ip, r5
 8000e60:	d87e      	bhi.n	8000f60 <__udivmoddi4+0x2d8>
 8000e62:	4643      	mov	r3, r8
 8000e64:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e68:	eba5 050c 	sub.w	r5, r5, ip
 8000e6c:	fba3 9802 	umull	r9, r8, r3, r2
 8000e70:	4545      	cmp	r5, r8
 8000e72:	46ce      	mov	lr, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	d302      	bcc.n	8000e7e <__udivmoddi4+0x1f6>
 8000e78:	d106      	bne.n	8000e88 <__udivmoddi4+0x200>
 8000e7a:	4548      	cmp	r0, r9
 8000e7c:	d204      	bcs.n	8000e88 <__udivmoddi4+0x200>
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e84:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d06f      	beq.n	8000f6c <__udivmoddi4+0x2e4>
 8000e8c:	ebb0 020e 	subs.w	r2, r0, lr
 8000e90:	eb65 050c 	sbc.w	r5, r5, ip
 8000e94:	40ca      	lsrs	r2, r1
 8000e96:	fa05 f404 	lsl.w	r4, r5, r4
 8000e9a:	40cd      	lsrs	r5, r1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4314      	orrs	r4, r2
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	e9c6 4500 	strd	r4, r5, [r6]
 8000ea6:	e73c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000ea8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eac:	f1c3 0220 	rsb	r2, r3, #32
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	409c      	lsls	r4, r3
 8000eb4:	40d5      	lsrs	r5, r2
 8000eb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eba:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebe:	fa1f f78c 	uxth.w	r7, ip
 8000ec2:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f507 	mul.w	r5, r0, r7
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	d90e      	bls.n	8000ef8 <__udivmoddi4+0x270>
 8000eda:	eb1c 0101 	adds.w	r1, ip, r1
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0901 	movcs.w	r9, #1
 8000ee8:	f04f 0900 	movcc.w	r9, #0
 8000eec:	428d      	cmp	r5, r1
 8000eee:	d902      	bls.n	8000ef6 <__udivmoddi4+0x26e>
 8000ef0:	f1b9 0f00 	cmp.w	r9, #0
 8000ef4:	d031      	beq.n	8000f5a <__udivmoddi4+0x2d2>
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	b292      	uxth	r2, r2
 8000efc:	fbb1 f5fe 	udiv	r5, r1, lr
 8000f00:	fb0e 1115 	mls	r1, lr, r5, r1
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	fb05 f107 	mul.w	r1, r5, r7
 8000f0c:	4291      	cmp	r1, r2
 8000f0e:	d907      	bls.n	8000f20 <__udivmoddi4+0x298>
 8000f10:	eb1c 0202 	adds.w	r2, ip, r2
 8000f14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d823      	bhi.n	8000f66 <__udivmoddi4+0x2de>
 8000f1e:	4645      	mov	r5, r8
 8000f20:	1a52      	subs	r2, r2, r1
 8000f22:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f26:	e726      	b.n	8000d76 <__udivmoddi4+0xee>
 8000f28:	4631      	mov	r1, r6
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e6f9      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000f2e:	1a84      	subs	r4, r0, r2
 8000f30:	eb65 0203 	sbc.w	r2, r5, r3
 8000f34:	2001      	movs	r0, #1
 8000f36:	4617      	mov	r7, r2
 8000f38:	e70b      	b.n	8000d52 <__udivmoddi4+0xca>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14e>
 8000f40:	4464      	add	r4, ip
 8000f42:	3802      	subs	r0, #2
 8000f44:	e6e4      	b.n	8000d10 <__udivmoddi4+0x88>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	3902      	subs	r1, #2
 8000f4e:	4462      	add	r2, ip
 8000f50:	e6c9      	b.n	8000ce6 <__udivmoddi4+0x5e>
 8000f52:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	e76f      	b.n	8000e3a <__udivmoddi4+0x1b2>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	e7cb      	b.n	8000ef8 <__udivmoddi4+0x270>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	443d      	add	r5, r7
 8000f64:	e77e      	b.n	8000e64 <__udivmoddi4+0x1dc>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	e7d9      	b.n	8000f20 <__udivmoddi4+0x298>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e6d7      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f005 fc12 	bl	80067a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f814 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f9f2 	bl	800136c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f88:	f000 f934 	bl	80011f4 <MX_GPDMA1_Init>
  MX_RTC_Init();
 8000f8c:	f000 f96c 	bl	8001268 <MX_RTC_Init>
  MX_ICACHE_Init();
 8000f90:	f000 f950 	bl	8001234 <MX_ICACHE_Init>
  MX_MEMORYMAP_Init();
 8000f94:	f000 f961 	bl	800125a <MX_MEMORYMAP_Init>
  MX_CRC_Init();
 8000f98:	f000 f90a 	bl	80011b0 <MX_CRC_Init>
  MX_ADC1_Init();
 8000f9c:	f000 f874 	bl	8001088 <MX_ADC1_Init>
  MX_MEMS_Init();
 8000fa0:	f010 fdda 	bl	8011b58 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
  MX_MEMS_Process();
 8000fa4:	f010 fdde 	bl	8011b64 <MX_MEMS_Process>
 8000fa8:	e7fc      	b.n	8000fa4 <main+0x2c>
	...

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09c      	sub	sp, #112	; 0x70
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2250      	movs	r2, #80	; 0x50
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f011 fb3d 	bl	801263a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <SystemClock_Config+0xd8>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fda:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <SystemClock_Config+0xd8>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6113      	str	r3, [r2, #16]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <SystemClock_Config+0xd8>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fee:	bf00      	nop
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <SystemClock_Config+0xd8>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d1f9      	bne.n	8000ff0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
 8000ffc:	2318      	movs	r3, #24
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001000:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800100c:	2320      	movs	r3, #32
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001014:	2302      	movs	r3, #2
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800101c:	23fa      	movs	r3, #250	; 0xfa
 800101e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_0;
 800102c:	2300      	movs	r3, #0
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001030:	2300      	movs	r3, #0
 8001032:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f009 f813 	bl	800a068 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001048:	f000 f9e6 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	231f      	movs	r3, #31
 800104e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2303      	movs	r3, #3
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2104      	movs	r1, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f009 fc34 	bl	800a8d8 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001076:	f000 f9cf 	bl	8001418 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3770      	adds	r7, #112	; 0x70
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	44020800 	.word	0x44020800

08001088 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void){
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2220      	movs	r2, #32
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f011 fad0 	bl	801263a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <MX_ADC1_Init+0x110>)
 800109c:	4a3f      	ldr	r2, [pc, #252]	; (800119c <MX_ADC1_Init+0x114>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <MX_ADC1_Init+0x110>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <MX_ADC1_Init+0x110>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_ADC1_Init+0x110>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <MX_ADC1_Init+0x110>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_ADC1_Init+0x110>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <MX_ADC1_Init+0x110>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_ADC1_Init+0x110>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_ADC1_Init+0x110>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_ADC1_Init+0x110>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_ADC1_Init+0x110>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <MX_ADC1_Init+0x110>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <MX_ADC1_Init+0x110>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_ADC1_Init+0x110>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <MX_ADC1_Init+0x110>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_ADC1_Init+0x110>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <MX_ADC1_Init+0x110>)
 8001102:	f005 fdeb 	bl	8006cdc <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800110c:	f000 f984 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <MX_ADC1_Init+0x118>)
 8001112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001114:	2306      	movs	r3, #6
 8001116:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111c:	237f      	movs	r3, #127	; 0x7f
 800111e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001120:	2304      	movs	r3, #4
 8001122:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <MX_ADC1_Init+0x110>)
 800112e:	f005 ff29 	bl	8006f84 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 f96e 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC1_Init+0x11c>)
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001140:	230c      	movs	r3, #12
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_ADC1_Init+0x110>)
 800114a:	f005 ff1b 	bl	8006f84 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001154:	f000 f960 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ADC1_Init+0x120>)
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800115c:	2312      	movs	r3, #18
 800115e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_ADC1_Init+0x110>)
 8001166:	f005 ff0d 	bl	8006f84 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001170:	f000 f952 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_ADC1_Init+0x124>)
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001178:	2318      	movs	r3, #24
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC1_Init+0x110>)
 8001182:	f005 feff 	bl	8006f84 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800118c:	f000 f944 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000017c 	.word	0x2000017c
 800119c:	42028000 	.word	0x42028000
 80011a0:	04300002 	.word	0x04300002
 80011a4:	08600004 	.word	0x08600004
 80011a8:	0c900008 	.word	0x0c900008
 80011ac:	10c00010 	.word	0x10c00010

080011b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_CRC_Init+0x3c>)
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <MX_CRC_Init+0x40>)
 80011b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_CRC_Init+0x3c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_CRC_Init+0x3c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_CRC_Init+0x3c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_CRC_Init+0x3c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_CRC_Init+0x3c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_CRC_Init+0x3c>)
 80011da:	f006 fbe5 	bl	80079a8 <HAL_CRC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80011e4:	f000 f918 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001e4 	.word	0x200001e4
 80011f0:	40023000 	.word	0x40023000

080011f4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_GPDMA1_Init+0x3c>)
 80011fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <MX_GPDMA1_Init+0x3c>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_GPDMA1_Init+0x3c>)
 800120c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	201b      	movs	r0, #27
 800121e:	f006 fb8e 	bl	800793e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001222:	201b      	movs	r0, #27
 8001224:	f006 fba5 	bl	8007972 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	44020c00 	.word	0x44020c00

08001234 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f008 fee5 	bl	800a008 <HAL_ICACHE_ConfigAssociativityMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001244:	f000 f8e8 	bl	8001418 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001248:	f008 fefe 	bl	800a048 <HAL_ICACHE_Enable>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001252:	f000 f8e1 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <MX_RTC_Init+0xfc>)
 8001298:	4a33      	ldr	r2, [pc, #204]	; (8001368 <MX_RTC_Init+0x100>)
 800129a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <MX_RTC_Init+0xfc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_RTC_Init+0xfc>)
 80012a4:	227f      	movs	r2, #127	; 0x7f
 80012a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <MX_RTC_Init+0xfc>)
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_RTC_Init+0xfc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_RTC_Init+0xfc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_RTC_Init+0xfc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_RTC_Init+0xfc>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_RTC_Init+0xfc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_RTC_Init+0xfc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <MX_RTC_Init+0xfc>)
 80012d6:	f00e fe93 	bl	8010000 <HAL_RTC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80012e0:	f000 f89a 	bl	8001418 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <MX_RTC_Init+0xfc>)
 80012fc:	f00f f8e6 	bl	80104cc <HAL_RTCEx_PrivilegeModeSet>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001306:	f000 f887 	bl	8001418 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800130a:	2300      	movs	r3, #0
 800130c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800130e:	2300      	movs	r3, #0
 8001310:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001312:	2300      	movs	r3, #0
 8001314:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_RTC_Init+0xfc>)
 8001328:	f00e feec 	bl	8010104 <HAL_RTC_SetTime>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001332:	f000 f871 	bl	8001418 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001336:	2301      	movs	r3, #1
 8001338:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800133a:	2301      	movs	r3, #1
 800133c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800133e:	2301      	movs	r3, #1
 8001340:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2201      	movs	r2, #1
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_RTC_Init+0xfc>)
 800134e:	f00e ff6b 	bl	8010228 <HAL_RTC_SetDate>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001358:	f000 f85e 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	; 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000208 	.word	0x20000208
 8001368:	44007800 	.word	0x44007800

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_GPIO_Init+0xa8>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <MX_GPIO_Init+0xa8>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_GPIO_Init+0xa8>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_GPIO_Init+0xa8>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_GPIO_Init+0xa8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013b6:	f043 0320 	orr.w	r3, r3, #32
 80013ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_GPIO_Init+0xa8>)
 80013fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	44020c00 	.word	0x44020c00

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>

08001422 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0ce      	sub	sp, #312	; 0x138
 8001434:	af00      	add	r7, sp, #0
 8001436:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800143a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800143e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001454:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001458:	4618      	mov	r0, r3
 800145a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800145e:	461a      	mov	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	f011 f8ea 	bl	801263a <memset>
  if(hadc->Instance==ADC1)
 8001466:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800146a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a57      	ldr	r2, [pc, #348]	; (80015d0 <HAL_ADC_MspInit+0x1a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	f040 80a5 	bne.w	80015c4 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800147a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800147e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800148e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001492:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001496:	2200      	movs	r2, #0
 8001498:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 fd5b 	bl	800af5c <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80014ac:	f7ff ffb4 	bl	8001418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b6:	4a47      	ldr	r2, [pc, #284]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80014ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014dc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e4:	4a3b      	ldr	r2, [pc, #236]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 80014f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800150a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 800150e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001512:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 800151e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001522:	f003 0204 	and.w	r2, r3, #4
 8001526:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800152a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001538:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_ADC_MspInit+0x1a4>)
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001550:	f003 0220 	and.w	r2, r3, #32
 8001554:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001566:	681b      	ldr	r3, [r3, #0]
    PA1     ------> ADC1_INP1
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001568:	2342      	movs	r3, #66	; 0x42
 800156a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800157e:	4619      	mov	r1, r3
 8001580:	4815      	ldr	r0, [pc, #84]	; (80015d8 <HAL_ADC_MspInit+0x1a8>)
 8001582:	f007 fc8d 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001586:	2310      	movs	r3, #16
 8001588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800159c:	4619      	mov	r1, r3
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <HAL_ADC_MspInit+0x1ac>)
 80015a0:	f007 fc7e 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80015bc:	4619      	mov	r1, r3
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <HAL_ADC_MspInit+0x1b0>)
 80015c0:	f007 fc6e 	bl	8008ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	42028000 	.word	0x42028000
 80015d4:	44020c00 	.word	0x44020c00
 80015d8:	42020000 	.word	0x42020000
 80015dc:	42020800 	.word	0x42020800
 80015e0:	42021400 	.word	0x42021400

080015e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_CRC_MspInit+0x3c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10e      	bne.n	8001614 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_CRC_MspInit+0x40>)
 80015f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_CRC_MspInit+0x40>)
 80015fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_CRC_MspInit+0x40>)
 8001608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023000 	.word	0x40023000
 8001624:	44020c00 	.word	0x44020c00

08001628 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0c6      	sub	sp, #280	; 0x118
 800162c:	af00      	add	r7, sp, #0
 800162e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001636:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800163c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001640:	4618      	mov	r0, r3
 8001642:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001646:	461a      	mov	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	f010 fff6 	bl	801263a <memset>
  if(hrtc->Instance==RTC)
 800164e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001652:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_RTC_MspInit+0xb8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d13a      	bne.n	80016d6 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001660:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001664:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8001668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001674:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4618      	mov	r0, r3
 800168a:	f009 fc67 	bl	800af5c <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001694:	f7ff fec0 	bl	8001418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RTC_MspInit+0xbc>)
 800169a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_RTC_MspInit+0xbc>)
 80016a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_RTC_MspInit+0xbc>)
 80016aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016ae:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_RTC_MspInit+0xbc>)
 80016b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RTC_MspInit+0xbc>)
 80016ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016be:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	44007800 	.word	0x44007800
 80016e4:	44020c00 	.word	0x44020c00

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f005 f892 	bl	800685c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001742:	f006 fac8 	bl	8007cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200004a4 	.word	0x200004a4

08001750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM3_IRQHandler+0x10>)
 8001756:	f00e fee7 	bl	8010528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000238 	.word	0x20000238

08001764 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART3_IRQHandler+0x10>)
 800176a:	f00f f997 	bl	8010a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003d0 	.word	0x200003d0

08001778 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <BSP_I2C1_Init+0x70>)
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <BSP_I2C1_Init+0x74>)
 8001786:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <BSP_I2C1_Init+0x78>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4918      	ldr	r1, [pc, #96]	; (80017f0 <BSP_I2C1_Init+0x78>)
 8001790:	600a      	str	r2, [r1, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d122      	bne.n	80017dc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <BSP_I2C1_Init+0x70>)
 8001798:	f008 f8cc 	bl	8009934 <HAL_I2C_GetState>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11c      	bne.n	80017dc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <BSP_I2C1_Init+0x70>)
 80017a4:	f000 f8fe 	bl	80019a4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <BSP_I2C1_Init+0x70>)
 80017b0:	f000 f8b4 	bl	800191c <MX_I2C1_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017ba:	f06f 0307 	mvn.w	r3, #7
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	e00c      	b.n	80017dc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <BSP_I2C1_Init+0x70>)
 80017c6:	f008 fb87 	bl	8009ed8 <HAL_I2CEx_ConfigAnalogFilter>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017d0:	f06f 0307 	mvn.w	r3, #7
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	e001      	b.n	80017dc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000284 	.word	0x20000284
 80017ec:	40005400 	.word	0x40005400
 80017f0:	200002d8 	.word	0x200002d8

080017f4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <BSP_I2C1_DeInit+0x48>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d014      	beq.n	8001830 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <BSP_I2C1_DeInit+0x48>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3b01      	subs	r3, #1
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <BSP_I2C1_DeInit+0x48>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <BSP_I2C1_DeInit+0x48>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <BSP_I2C1_DeInit+0x4c>)
 800181a:	f000 f94f 	bl	8001abc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <BSP_I2C1_DeInit+0x4c>)
 8001820:	f007 fe17 	bl	8009452 <HAL_I2C_DeInit>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800182a:	f06f 0307 	mvn.w	r3, #7
 800182e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200002d8 	.word	0x200002d8
 8001840:	20000284 	.word	0x20000284

08001844 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af04      	add	r7, sp, #16
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	81fb      	strh	r3, [r7, #14]
 8001852:	460b      	mov	r3, r1
 8001854:	81bb      	strh	r3, [r7, #12]
 8001856:	4613      	mov	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800185e:	89ba      	ldrh	r2, [r7, #12]
 8001860:	89f9      	ldrh	r1, [r7, #14]
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <BSP_I2C1_WriteReg+0x60>)
 8001874:	f007 fe30 	bl	80094d8 <HAL_I2C_Mem_Write>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00c      	beq.n	8001898 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800187e:	4809      	ldr	r0, [pc, #36]	; (80018a4 <BSP_I2C1_WriteReg+0x60>)
 8001880:	f008 f866 	bl	8009950 <HAL_I2C_GetError>
 8001884:	4603      	mov	r3, r0
 8001886:	2b04      	cmp	r3, #4
 8001888:	d103      	bne.n	8001892 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800188a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e002      	b.n	8001898 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001892:	f06f 0303 	mvn.w	r3, #3
 8001896:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001898:	697b      	ldr	r3, [r7, #20]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000284 	.word	0x20000284

080018a8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	460b      	mov	r3, r1
 80018b8:	81bb      	strh	r3, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80018c2:	89ba      	ldrh	r2, [r7, #12]
 80018c4:	89f9      	ldrh	r1, [r7, #14]
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2301      	movs	r3, #1
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <BSP_I2C1_ReadReg+0x60>)
 80018d8:	f007 ff12 	bl	8009700 <HAL_I2C_Mem_Read>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80018e2:	4809      	ldr	r0, [pc, #36]	; (8001908 <BSP_I2C1_ReadReg+0x60>)
 80018e4:	f008 f834 	bl	8009950 <HAL_I2C_GetError>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d103      	bne.n	80018f6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80018ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e002      	b.n	80018fc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018f6:	f06f 0303 	mvn.w	r3, #3
 80018fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80018fc:	697b      	ldr	r3, [r7, #20]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000284 	.word	0x20000284

0800190c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001910:	f004 ffb8 	bl	8006884 <HAL_GetTick>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_I2C1_Init+0x80>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00C042E4;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <MX_I2C1_Init+0x84>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f007 fcdc 	bl	800931c <HAL_I2C_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f008 fab1 	bl	8009ed8 <HAL_I2CEx_ConfigAnalogFilter>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f008 faf3 	bl	8009f6e <HAL_I2CEx_ConfigDigitalFilter>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40005400 	.word	0x40005400
 80019a0:	00c042e4 	.word	0x00c042e4

080019a4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0cc      	sub	sp, #304	; 0x130
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019b2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019bc:	4618      	mov	r0, r3
 80019be:	f44f 7384 	mov.w	r3, #264	; 0x108
 80019c2:	461a      	mov	r2, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	f010 fe38 	bl	801263a <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019ce:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f009 fab3 	bl	800af5c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <I2C1_MspInit+0x110>)
 80019f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019fc:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <I2C1_MspInit+0x110>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <I2C1_MspInit+0x110>)
 8001a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a0c:	f003 0202 	and.w	r2, r3, #2
 8001a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a1e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a22:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a44:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <I2C1_MspInit+0x114>)
 8001a4c:	f007 fa28 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001a74:	4619      	mov	r1, r3
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <I2C1_MspInit+0x114>)
 8001a78:	f007 fa12 	bl	8008ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <I2C1_MspInit+0x110>)
 8001a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <I2C1_MspInit+0x110>)
 8001a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <I2C1_MspInit+0x110>)
 8001a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a92:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001aa4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001aa8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	44020c00 	.word	0x44020c00
 8001ab8:	42020400 	.word	0x42020400

08001abc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <I2C1_MspDeInit+0x34>)
 8001ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <I2C1_MspDeInit+0x34>)
 8001acc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ad0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <I2C1_MspDeInit+0x38>)
 8001ada:	f007 fb33 	bl	8009144 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <I2C1_MspDeInit+0x38>)
 8001ae4:	f007 fb2e 	bl	8009144 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	44020c00 	.word	0x44020c00
 8001af4:	42020400 	.word	0x42020400

08001af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
  }

  return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fcd7 	bl	8006500 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
  }
  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
  return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f010 fd68 	bl	80126d8 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200a0000 	.word	0x200a0000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200002dc 	.word	0x200002dc
 8001c3c:	200007c8 	.word	0x200007c8

08001c40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <SystemInit+0xdc>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <SystemInit+0xdc>)
 8001c4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <SystemInit+0xe0>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <SystemInit+0xe0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <SystemInit+0xe0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <SystemInit+0xe0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	492c      	ldr	r1, [pc, #176]	; (8001d20 <SystemInit+0xe0>)
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <SystemInit+0xe4>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <SystemInit+0xe0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <SystemInit+0xe0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <SystemInit+0xe0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <SystemInit+0xe0>)
 8001c88:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <SystemInit+0xe8>)
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <SystemInit+0xe0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <SystemInit+0xe0>)
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <SystemInit+0xe8>)
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <SystemInit+0xe0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <SystemInit+0xe0>)
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <SystemInit+0xe8>)
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <SystemInit+0xe0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <SystemInit+0xe0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <SystemInit+0xe0>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <SystemInit+0xe0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <SystemInit+0xdc>)
 8001cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <SystemInit+0xec>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001ccc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001cd4:	d003      	beq.n	8001cde <SystemInit+0x9e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001cdc:	d117      	bne.n	8001d0e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <SystemInit+0xec>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <SystemInit+0xec>)
 8001cec:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <SystemInit+0xf0>)
 8001cee:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <SystemInit+0xec>)
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <SystemInit+0xf4>)
 8001cf4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <SystemInit+0xec>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <SystemInit+0xec>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <SystemInit+0xec>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <SystemInit+0xec>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	61d3      	str	r3, [r2, #28]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	44020c00 	.word	0x44020c00
 8001d24:	eae2eae3 	.word	0xeae2eae3
 8001d28:	01010280 	.word	0x01010280
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	08192a3b 	.word	0x08192a3b
 8001d34:	4c5d6e7f 	.word	0x4c5d6e7f

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d3c:	f7ff ff80 	bl	8001c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	; (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d66:	f010 fcbd 	bl	80126e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7ff f905 	bl	8000f78 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   r0, =_estack
 8001d70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001d7c:	08014848 	.word	0x08014848
  ldr r2, =_sbss
 8001d80:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001d84:	200007c8 	.word	0x200007c8

08001d88 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_IRQHandler>
	...

08001d8c <IIS2DLPC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e051      	b.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	7b1a      	ldrb	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <IIS2DLPC_RegisterBusIO+0xcc>)
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <IIS2DLPC_RegisterBusIO+0xd0>)
 8001dea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <IIS2DLPC_RegisterBusIO+0x7e>
    {
      ret = IIS2DLPC_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e020      	b.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4798      	blx	r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <IIS2DLPC_RegisterBusIO+0x92>
    {
      ret = IIS2DLPC_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e016      	b.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d112      	bne.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001e30:	2305      	movs	r3, #5
 8001e32:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	461a      	mov	r2, r3
 8001e38:	2121      	movs	r1, #33	; 0x21
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fca1 	bl	8002782 <IIS2DLPC_Write_Reg>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <IIS2DLPC_RegisterBusIO+0xc0>
          {
            ret = IIS2DLPC_ERROR;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08002b15 	.word	0x08002b15
 8001e5c:	08002b4b 	.word	0x08002b4b

08001e60 <IIS2DLPC_Init>:
  * @brief  Initialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 f98c 	bl	800318c <iis2dlpc_auto_increment_set>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e04b      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3320      	adds	r3, #32
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 f8a0 	bl	8002fcc <iis2dlpc_block_data_update_set>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e03f      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3320      	adds	r3, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 f99a 	bl	80031d8 <iis2dlpc_fifo_mode_set>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e033      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fe92 	bl	8002be0 <iis2dlpc_power_mode_set>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e027      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <IIS2DLPC_Init+0xc0>)
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 ff83 	bl	8002df0 <iis2dlpc_data_rate_set>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	e010      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3320      	adds	r3, #32
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 f88b 	bl	8003018 <iis2dlpc_full_scale_set>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	e004      	b.n	8001f18 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2DLPC_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	42c80000 	.word	0x42c80000

08001f24 <IIS2DLPC_DeInit>:
  * @brief  Deinitialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f888 	bl	8002042 <IIS2DLPC_ACC_Disable>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e010      	b.n	8001f60 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2DLPC_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <IIS2DLPC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3320      	adds	r3, #32
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 f8f6 	bl	800316a <iis2dlpc_device_id_get>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e000      	b.n	8001f8c <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <IIS2DLPC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2DLPC sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4a06      	ldr	r2, [pc, #24]	; (8001fec <IIS2DLPC_GetCapabilities+0x58>)
 8001fd4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	44c80000 	.word	0x44c80000

08001ff0 <IIS2DLPC_ACC_Enable>:
  * @brief  Enable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e019      	b.n	800203a <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002018:	461a      	mov	r2, r3
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fbca 	bl	80027b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <IIS2DLPC_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != IIS2DLPC_OK)
  {
    return IIS2DLPC_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e004      	b.n	800203a <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <IIS2DLPC_ACC_Disable>:
  * @brief  Disable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e010      	b.n	800207a <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3320      	adds	r3, #32
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fec6 	bl	8002df0 <iis2dlpc_data_rate_set>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e004      	b.n	800207a <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <IIS2DLPC_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3320      	adds	r3, #32
 8002096:	f107 020b 	add.w	r2, r7, #11
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f000 ffe1 	bl	8003064 <iis2dlpc_full_scale_get>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ac:	e080      	b.n	80021b0 <IIS2DLPC_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3320      	adds	r3, #32
 80020b2:	f107 020a 	add.w	r2, r7, #10
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fddf 	bl	8002c7c <iis2dlpc_power_mode_get>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e072      	b.n	80021b0 <IIS2DLPC_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 80020ca:	7abb      	ldrb	r3, [r7, #10]
 80020cc:	2b1b      	cmp	r3, #27
 80020ce:	bf8c      	ite	hi
 80020d0:	2201      	movhi	r2, #1
 80020d2:	2200      	movls	r2, #0
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d162      	bne.n	80021a0 <IIS2DLPC_ACC_GetSensitivity+0x11c>
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 80020e2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d12f      	bne.n	8002154 <IIS2DLPC_ACC_GetSensitivity+0xd0>
 80020f4:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04c      	beq.n	80021a0 <IIS2DLPC_ACC_GetSensitivity+0x11c>
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d81b      	bhi.n	8002144 <IIS2DLPC_ACC_GetSensitivity+0xc0>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <IIS2DLPC_ACC_GetSensitivity+0x90>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212d 	.word	0x0800212d
 800211c:	08002135 	.word	0x08002135
 8002120:	0800213d 	.word	0x0800213d
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <IIS2DLPC_ACC_GetSensitivity+0x134>)
 8002128:	601a      	str	r2, [r3, #0]
          break;
 800212a:	e012      	b.n	8002152 <IIS2DLPC_ACC_GetSensitivity+0xce>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <IIS2DLPC_ACC_GetSensitivity+0x138>)
 8002130:	601a      	str	r2, [r3, #0]
          break;
 8002132:	e00e      	b.n	8002152 <IIS2DLPC_ACC_GetSensitivity+0xce>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <IIS2DLPC_ACC_GetSensitivity+0x13c>)
 8002138:	601a      	str	r2, [r3, #0]
          break;
 800213a:	e00a      	b.n	8002152 <IIS2DLPC_ACC_GetSensitivity+0xce>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <IIS2DLPC_ACC_GetSensitivity+0x140>)
 8002140:	601a      	str	r2, [r3, #0]
          break;
 8002142:	e006      	b.n	8002152 <IIS2DLPC_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <IIS2DLPC_ACC_GetSensitivity+0x144>)
 8002148:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	60fb      	str	r3, [r7, #12]
          break;
 8002150:	bf00      	nop
      }
      break;
 8002152:	e02c      	b.n	80021ae <IIS2DLPC_ACC_GetSensitivity+0x12a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d81a      	bhi.n	8002190 <IIS2DLPC_ACC_GetSensitivity+0x10c>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <IIS2DLPC_ACC_GetSensitivity+0xdc>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002179 	.word	0x08002179
 8002168:	08002181 	.word	0x08002181
 800216c:	08002189 	.word	0x08002189
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <IIS2DLPC_ACC_GetSensitivity+0x148>)
 8002174:	601a      	str	r2, [r3, #0]
          break;
 8002176:	e012      	b.n	800219e <IIS2DLPC_ACC_GetSensitivity+0x11a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <IIS2DLPC_ACC_GetSensitivity+0x14c>)
 800217c:	601a      	str	r2, [r3, #0]
          break;
 800217e:	e00e      	b.n	800219e <IIS2DLPC_ACC_GetSensitivity+0x11a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <IIS2DLPC_ACC_GetSensitivity+0x134>)
 8002184:	601a      	str	r2, [r3, #0]
          break;
 8002186:	e00a      	b.n	800219e <IIS2DLPC_ACC_GetSensitivity+0x11a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <IIS2DLPC_ACC_GetSensitivity+0x138>)
 800218c:	601a      	str	r2, [r3, #0]
          break;
 800218e:	e006      	b.n	800219e <IIS2DLPC_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <IIS2DLPC_ACC_GetSensitivity+0x144>)
 8002194:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	60fb      	str	r3, [r7, #12]
          break;
 800219c:	bf00      	nop
      }
      break;
 800219e:	e006      	b.n	80021ae <IIS2DLPC_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <IIS2DLPC_ACC_GetSensitivity+0x144>)
 80021a4:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	60fb      	str	r3, [r7, #12]
      break;
 80021ac:	bf00      	nop
  }

  return ret;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	3f79db23 	.word	0x3f79db23
 80021bc:	3ff9db23 	.word	0x3ff9db23
 80021c0:	4079db23 	.word	0x4079db23
 80021c4:	40f9db23 	.word	0x40f9db23
 80021c8:	bf800000 	.word	0xbf800000
 80021cc:	3e79db23 	.word	0x3e79db23
 80021d0:	3ef9db23 	.word	0x3ef9db23

080021d4 <IIS2DLPC_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3320      	adds	r3, #32
 80021e6:	f107 020b 	add.w	r2, r7, #11
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fe45 	bl	8002e7c <iis2dlpc_data_rate_get>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	e12f      	b.n	800245e <IIS2DLPC_ACC_GetOutputDataRate+0x28a>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3320      	adds	r3, #32
 8002202:	f107 020a 	add.w	r2, r7, #10
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fd37 	bl	8002c7c <iis2dlpc_power_mode_get>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	e121      	b.n	800245e <IIS2DLPC_ACC_GetOutputDataRate+0x28a>
  }

  switch (odr_low_level)
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	2b22      	cmp	r3, #34	; 0x22
 800221e:	f200 8116 	bhi.w	800244e <IIS2DLPC_ACC_GetOutputDataRate+0x27a>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	080022b5 	.word	0x080022b5
 800222c:	080022bf 	.word	0x080022bf
 8002230:	08002319 	.word	0x08002319
 8002234:	08002321 	.word	0x08002321
 8002238:	08002329 	.word	0x08002329
 800223c:	08002331 	.word	0x08002331
 8002240:	08002339 	.word	0x08002339
 8002244:	08002341 	.word	0x08002341
 8002248:	0800239b 	.word	0x0800239b
 800224c:	080023f5 	.word	0x080023f5
 8002250:	0800244f 	.word	0x0800244f
 8002254:	0800244f 	.word	0x0800244f
 8002258:	0800244f 	.word	0x0800244f
 800225c:	0800244f 	.word	0x0800244f
 8002260:	0800244f 	.word	0x0800244f
 8002264:	0800244f 	.word	0x0800244f
 8002268:	0800244f 	.word	0x0800244f
 800226c:	0800244f 	.word	0x0800244f
 8002270:	080022b5 	.word	0x080022b5
 8002274:	0800244f 	.word	0x0800244f
 8002278:	0800244f 	.word	0x0800244f
 800227c:	0800244f 	.word	0x0800244f
 8002280:	0800244f 	.word	0x0800244f
 8002284:	0800244f 	.word	0x0800244f
 8002288:	0800244f 	.word	0x0800244f
 800228c:	0800244f 	.word	0x0800244f
 8002290:	0800244f 	.word	0x0800244f
 8002294:	0800244f 	.word	0x0800244f
 8002298:	0800244f 	.word	0x0800244f
 800229c:	0800244f 	.word	0x0800244f
 80022a0:	0800244f 	.word	0x0800244f
 80022a4:	0800244f 	.word	0x0800244f
 80022a8:	0800244f 	.word	0x0800244f
 80022ac:	0800244f 	.word	0x0800244f
 80022b0:	080022b5 	.word	0x080022b5
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
      break;
 80022bc:	e0ce      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80022be:	7abb      	ldrb	r3, [r7, #10]
 80022c0:	2b1b      	cmp	r3, #27
 80022c2:	bf8c      	ite	hi
 80022c4:	2201      	movhi	r2, #1
 80022c6:	2200      	movls	r2, #0
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	d11c      	bne.n	8002308 <IIS2DLPC_ACC_GetOutputDataRate+0x134>
 80022ce:	2201      	movs	r2, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80022d8:	2a00      	cmp	r2, #0
 80022da:	bf14      	ite	ne
 80022dc:	2201      	movne	r2, #1
 80022de:	2200      	moveq	r2, #0
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d10c      	bne.n	8002300 <IIS2DLPC_ACC_GetOutputDataRate+0x12c>
 80022e6:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <IIS2DLPC_ACC_GetOutputDataRate+0x134>
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4a5b      	ldr	r2, [pc, #364]	; (8002468 <IIS2DLPC_ACC_GetOutputDataRate+0x294>)
 80022fc:	601a      	str	r2, [r3, #0]
          break;
 80022fe:	e00a      	b.n	8002316 <IIS2DLPC_ACC_GetOutputDataRate+0x142>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4a5a      	ldr	r2, [pc, #360]	; (800246c <IIS2DLPC_ACC_GetOutputDataRate+0x298>)
 8002304:	601a      	str	r2, [r3, #0]
          break;
 8002306:	e006      	b.n	8002316 <IIS2DLPC_ACC_GetOutputDataRate+0x142>

        default:
          *Odr = -1.0f;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4a59      	ldr	r2, [pc, #356]	; (8002470 <IIS2DLPC_ACC_GetOutputDataRate+0x29c>)
 800230c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	60fb      	str	r3, [r7, #12]
          break;
 8002314:	bf00      	nop
      }
      break;
 8002316:	e0a1      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4a53      	ldr	r2, [pc, #332]	; (8002468 <IIS2DLPC_ACC_GetOutputDataRate+0x294>)
 800231c:	601a      	str	r2, [r3, #0]
      break;
 800231e:	e09d      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4a54      	ldr	r2, [pc, #336]	; (8002474 <IIS2DLPC_ACC_GetOutputDataRate+0x2a0>)
 8002324:	601a      	str	r2, [r3, #0]
      break;
 8002326:	e099      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4a53      	ldr	r2, [pc, #332]	; (8002478 <IIS2DLPC_ACC_GetOutputDataRate+0x2a4>)
 800232c:	601a      	str	r2, [r3, #0]
      break;
 800232e:	e095      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <IIS2DLPC_ACC_GetOutputDataRate+0x2a8>)
 8002334:	601a      	str	r2, [r3, #0]
      break;
 8002336:	e091      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4a51      	ldr	r2, [pc, #324]	; (8002480 <IIS2DLPC_ACC_GetOutputDataRate+0x2ac>)
 800233c:	601a      	str	r2, [r3, #0]
      break;
 800233e:	e08d      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 8002340:	7abb      	ldrb	r3, [r7, #10]
 8002342:	2b1b      	cmp	r3, #27
 8002344:	bf8c      	ite	hi
 8002346:	2201      	movhi	r2, #1
 8002348:	2200      	movls	r2, #0
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	2a00      	cmp	r2, #0
 800234e:	d11c      	bne.n	800238a <IIS2DLPC_ACC_GetOutputDataRate+0x1b6>
 8002350:	2201      	movs	r2, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800235a:	2a00      	cmp	r2, #0
 800235c:	bf14      	ite	ne
 800235e:	2201      	movne	r2, #1
 8002360:	2200      	moveq	r2, #0
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	2a00      	cmp	r2, #0
 8002366:	d10c      	bne.n	8002382 <IIS2DLPC_ACC_GetOutputDataRate+0x1ae>
 8002368:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <IIS2DLPC_ACC_GetOutputDataRate+0x1b6>
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <IIS2DLPC_ACC_GetOutputDataRate+0x2b0>)
 800237e:	601a      	str	r2, [r3, #0]
          break;
 8002380:	e00a      	b.n	8002398 <IIS2DLPC_ACC_GetOutputDataRate+0x1c4>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4a3e      	ldr	r2, [pc, #248]	; (8002480 <IIS2DLPC_ACC_GetOutputDataRate+0x2ac>)
 8002386:	601a      	str	r2, [r3, #0]
          break;
 8002388:	e006      	b.n	8002398 <IIS2DLPC_ACC_GetOutputDataRate+0x1c4>

        default:
          *Odr = -1.0f;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <IIS2DLPC_ACC_GetOutputDataRate+0x29c>)
 800238e:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	60fb      	str	r3, [r7, #12]
          break;
 8002396:	bf00      	nop
      }
      break;
 8002398:	e060      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 800239a:	7abb      	ldrb	r3, [r7, #10]
 800239c:	2b1b      	cmp	r3, #27
 800239e:	bf8c      	ite	hi
 80023a0:	2201      	movhi	r2, #1
 80023a2:	2200      	movls	r2, #0
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d11c      	bne.n	80023e4 <IIS2DLPC_ACC_GetOutputDataRate+0x210>
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2201      	movne	r2, #1
 80023ba:	2200      	moveq	r2, #0
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d10c      	bne.n	80023dc <IIS2DLPC_ACC_GetOutputDataRate+0x208>
 80023c2:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <IIS2DLPC_ACC_GetOutputDataRate+0x210>
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <IIS2DLPC_ACC_GetOutputDataRate+0x2b4>)
 80023d8:	601a      	str	r2, [r3, #0]
          break;
 80023da:	e00a      	b.n	80023f2 <IIS2DLPC_ACC_GetOutputDataRate+0x21e>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4a28      	ldr	r2, [pc, #160]	; (8002480 <IIS2DLPC_ACC_GetOutputDataRate+0x2ac>)
 80023e0:	601a      	str	r2, [r3, #0]
          break;
 80023e2:	e006      	b.n	80023f2 <IIS2DLPC_ACC_GetOutputDataRate+0x21e>

        default:
          *Odr = -1.0f;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4a22      	ldr	r2, [pc, #136]	; (8002470 <IIS2DLPC_ACC_GetOutputDataRate+0x29c>)
 80023e8:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	60fb      	str	r3, [r7, #12]
          break;
 80023f0:	bf00      	nop
      }
      break;
 80023f2:	e033      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 80023f4:	7abb      	ldrb	r3, [r7, #10]
 80023f6:	2b1b      	cmp	r3, #27
 80023f8:	bf8c      	ite	hi
 80023fa:	2201      	movhi	r2, #1
 80023fc:	2200      	movls	r2, #0
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	2a00      	cmp	r2, #0
 8002402:	d11c      	bne.n	800243e <IIS2DLPC_ACC_GetOutputDataRate+0x26a>
 8002404:	2201      	movs	r2, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800240e:	2a00      	cmp	r2, #0
 8002410:	bf14      	ite	ne
 8002412:	2201      	movne	r2, #1
 8002414:	2200      	moveq	r2, #0
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	2a00      	cmp	r2, #0
 800241a:	d10c      	bne.n	8002436 <IIS2DLPC_ACC_GetOutputDataRate+0x262>
 800241c:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <IIS2DLPC_ACC_GetOutputDataRate+0x26a>
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <IIS2DLPC_ACC_GetOutputDataRate+0x2b8>)
 8002432:	601a      	str	r2, [r3, #0]
          break;
 8002434:	e00a      	b.n	800244c <IIS2DLPC_ACC_GetOutputDataRate+0x278>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	4a11      	ldr	r2, [pc, #68]	; (8002480 <IIS2DLPC_ACC_GetOutputDataRate+0x2ac>)
 800243a:	601a      	str	r2, [r3, #0]
          break;
 800243c:	e006      	b.n	800244c <IIS2DLPC_ACC_GetOutputDataRate+0x278>

        default:
          *Odr = -1.0f;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <IIS2DLPC_ACC_GetOutputDataRate+0x29c>)
 8002442:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	60fb      	str	r3, [r7, #12]
          break;
 800244a:	bf00      	nop
      }
      break;
 800244c:	e006      	b.n	800245c <IIS2DLPC_ACC_GetOutputDataRate+0x288>

    default:
      *Odr = -1.0f;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <IIS2DLPC_ACC_GetOutputDataRate+0x29c>)
 8002452:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	60fb      	str	r3, [r7, #12]
      break;
 800245a:	bf00      	nop
  }

  return ret;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	41480000 	.word	0x41480000
 800246c:	3fcccccd 	.word	0x3fcccccd
 8002470:	bf800000 	.word	0xbf800000
 8002474:	41c80000 	.word	0x41c80000
 8002478:	42480000 	.word	0x42480000
 800247c:	42c80000 	.word	0x42c80000
 8002480:	43480000 	.word	0x43480000
 8002484:	43c80000 	.word	0x43c80000
 8002488:	44480000 	.word	0x44480000
 800248c:	44c80000 	.word	0x44c80000

08002490 <IIS2DLPC_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	ed97 0a00 	vldr	s0, [r7]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f805 	bl	80024b4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode,
                                                 IIS2DLPC_Low_Noise_t Noise)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80024c0:	460b      	mov	r3, r1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d109      	bne.n	80024e6 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80024d2:	79ba      	ldrb	r2, [r7, #6]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4619      	mov	r1, r3
 80024d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f96b 	bl	80027b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	e008      	b.n	80024f8 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80024e6:	79ba      	ldrb	r2, [r7, #6]
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4619      	mov	r1, r3
 80024ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fa7d 	bl	80029f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 80024f6:	4603      	mov	r3, r0
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <IIS2DLPC_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3320      	adds	r3, #32
 8002512:	f107 020b 	add.w	r2, r7, #11
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fda3 	bl	8003064 <iis2dlpc_full_scale_get>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	e027      	b.n	800257a <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d81b      	bhi.n	8002568 <IIS2DLPC_ACC_GetFullScale+0x68>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <IIS2DLPC_ACC_GetFullScale+0x38>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	08002551 	.word	0x08002551
 8002540:	08002559 	.word	0x08002559
 8002544:	08002561 	.word	0x08002561
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2202      	movs	r2, #2
 800254c:	601a      	str	r2, [r3, #0]
      break;
 800254e:	e013      	b.n	8002578 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	601a      	str	r2, [r3, #0]
      break;
 8002556:	e00f      	b.n	8002578 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2208      	movs	r2, #8
 800255c:	601a      	str	r2, [r3, #0]
      break;
 800255e:	e00b      	b.n	8002578 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	601a      	str	r2, [r3, #0]
      break;
 8002566:	e007      	b.n	8002578 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	60fb      	str	r3, [r7, #12]
      break;
 8002576:	bf00      	nop
  }

  return ret;
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop

08002584 <IIS2DLPC_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
           : (FullScale <= 4) ? IIS2DLPC_4g
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	dd0b      	ble.n	80025ac <IIS2DLPC_ACC_SetFullScale+0x28>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b04      	cmp	r3, #4
 8002598:	dd06      	ble.n	80025a8 <IIS2DLPC_ACC_SetFullScale+0x24>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	dc01      	bgt.n	80025a4 <IIS2DLPC_ACC_SetFullScale+0x20>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e004      	b.n	80025ae <IIS2DLPC_ACC_SetFullScale+0x2a>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e002      	b.n	80025ae <IIS2DLPC_ACC_SetFullScale+0x2a>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <IIS2DLPC_ACC_SetFullScale+0x2a>
 80025ac:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 80025ae:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? IIS2DLPC_8g
           :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3320      	adds	r3, #32
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fd2d 	bl	8003018 <iis2dlpc_full_scale_set>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	e000      	b.n	80025cc <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <IIS2DLPC_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3320      	adds	r3, #32
 80025e6:	f107 020b 	add.w	r2, r7, #11
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fb45 	bl	8002c7c <iis2dlpc_power_mode_get>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	e068      	b.n	80026d0 <IIS2DLPC_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3320      	adds	r3, #32
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fd63 	bl	80030d4 <iis2dlpc_acceleration_raw_get>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	e05a      	b.n	80026d0 <IIS2DLPC_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	2b1b      	cmp	r3, #27
 800261e:	bf8c      	ite	hi
 8002620:	2201      	movhi	r2, #1
 8002622:	2200      	movls	r2, #0
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	2a00      	cmp	r2, #0
 8002628:	d14d      	bne.n	80026c6 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002632:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d124      	bne.n	800268e <IIS2DLPC_ACC_GetAxesRaw+0xba>
 8002644:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d037      	beq.n	80026c6 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002656:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da00      	bge.n	8002660 <IIS2DLPC_ACC_GetAxesRaw+0x8c>
 800265e:	330f      	adds	r3, #15
 8002660:	111b      	asrs	r3, r3, #4
 8002662:	b21a      	sxth	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da00      	bge.n	8002672 <IIS2DLPC_ACC_GetAxesRaw+0x9e>
 8002670:	330f      	adds	r3, #15
 8002672:	111b      	asrs	r3, r3, #4
 8002674:	b21a      	sxth	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800267a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da00      	bge.n	8002684 <IIS2DLPC_ACC_GetAxesRaw+0xb0>
 8002682:	330f      	adds	r3, #15
 8002684:	111b      	asrs	r3, r3, #4
 8002686:	b21a      	sxth	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	809a      	strh	r2, [r3, #4]
      break;
 800268c:	e01f      	b.n	80026ce <IIS2DLPC_ACC_GetAxesRaw+0xfa>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800268e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <IIS2DLPC_ACC_GetAxesRaw+0xc4>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	b21a      	sxth	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80026a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da00      	bge.n	80026aa <IIS2DLPC_ACC_GetAxesRaw+0xd6>
 80026a8:	3303      	adds	r3, #3
 80026aa:	109b      	asrs	r3, r3, #2
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80026b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da00      	bge.n	80026bc <IIS2DLPC_ACC_GetAxesRaw+0xe8>
 80026ba:	3303      	adds	r3, #3
 80026bc:	109b      	asrs	r3, r3, #2
 80026be:	b21a      	sxth	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	809a      	strh	r2, [r3, #4]
      break;
 80026c4:	e003      	b.n	80026ce <IIS2DLPC_ACC_GetAxesRaw+0xfa>

    default:
      ret = IIS2DLPC_ERROR;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	617b      	str	r3, [r7, #20]
      break;
 80026cc:	bf00      	nop
  }

  return ret;
 80026ce:	697b      	ldr	r3, [r7, #20]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <IIS2DLPC_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff70 	bl	80025d4 <IIS2DLPC_ACC_GetAxesRaw>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e03c      	b.n	800277a <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fcbc 	bl	8002084 <IIS2DLPC_ACC_GetSensitivity>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	e030      	b.n	800277a <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002718:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002730:	ee17 2a90 	vmov	r2, s15
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002744:	edd7 7a03 	vldr	s15, [r7, #12]
 8002748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002750:	ee17 2a90 	vmov	r2, s15
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002758:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002764:	edd7 7a03 	vldr	s15, [r7, #12]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002770:	ee17 2a90 	vmov	r2, s15
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <IIS2DLPC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	70fb      	strb	r3, [r7, #3]
 800278e:	4613      	mov	r3, r2
 8002790:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0020 	add.w	r0, r3, #32
 8002798:	1cba      	adds	r2, r7, #2
 800279a:	78f9      	ldrb	r1, [r7, #3]
 800279c:	2301      	movs	r3, #1
 800279e:	f000 fa07 	bl	8002bb0 <iis2dlpc_write_reg>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	e000      	b.n	80027b0 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                           IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80027c4:	460b      	mov	r3, r1
 80027c6:	71fb      	strb	r3, [r7, #7]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d80b      	bhi.n	80027ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	08002819 	.word	0x08002819
 80027e0:	08002845 	.word	0x08002845
 80027e4:	08002871 	.word	0x08002871
 80027e8:	0800289d 	.word	0x0800289d
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 80027f2:	2304      	movs	r3, #4
 80027f4:	75fb      	strb	r3, [r7, #23]
          break;
 80027f6:	e002      	b.n	80027fe <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80027f8:	2314      	movs	r3, #20
 80027fa:	75fb      	strb	r3, [r7, #23]
          break;
 80027fc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80027fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002802:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d400      	bmi.n	8002812 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002810:	e05a      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002814:	60bb      	str	r3, [r7, #8]
      break;
 8002816:	e057      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d002      	beq.n	8002824 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 800281e:	2303      	movs	r3, #3
 8002820:	75fb      	strb	r3, [r7, #23]
          break;
 8002822:	e002      	b.n	800282a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002824:	2313      	movs	r3, #19
 8002826:	75fb      	strb	r3, [r7, #23]
          break;
 8002828:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800282a:	edd7 7a02 	vldr	s15, [r7, #8]
 800282e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	dc00      	bgt.n	800283e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 800283c:	e044      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002840:	60bb      	str	r3, [r7, #8]
      break;
 8002842:	e041      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 8002844:	79bb      	ldrb	r3, [r7, #6]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d002      	beq.n	8002850 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
          break;
 800284e:	e002      	b.n	8002856 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002850:	2312      	movs	r3, #18
 8002852:	75fb      	strb	r3, [r7, #23]
          break;
 8002854:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002856:	edd7 7a02 	vldr	s15, [r7, #8]
 800285a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80029d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800285e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	dc00      	bgt.n	800286a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002868:	e02e      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800286c:	60bb      	str	r3, [r7, #8]
      break;
 800286e:	e02b      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d002      	beq.n	800287c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8002876:	2301      	movs	r3, #1
 8002878:	75fb      	strb	r3, [r7, #23]
          break;
 800287a:	e002      	b.n	8002882 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 800287c:	2311      	movs	r3, #17
 800287e:	75fb      	strb	r3, [r7, #23]
          break;
 8002880:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002882:	edd7 7a02 	vldr	s15, [r7, #8]
 8002886:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80029d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800288a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	dc00      	bgt.n	8002896 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002894:	e018      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002896:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002898:	60bb      	str	r3, [r7, #8]
      break;
 800289a:	e015      	b.n	80028c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
          break;
 80028a6:	e002      	b.n	80028ae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 80028a8:	2310      	movs	r3, #16
 80028aa:	75fb      	strb	r3, [r7, #23]
          break;
 80028ac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80029d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80028b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	dc00      	bgt.n	80028c2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80028c0:	e001      	b.n	80028c6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80028c2:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80028c4:	60bb      	str	r3, [r7, #8]
      break;
 80028c6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80028c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028cc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80029dc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d801      	bhi.n	80028de <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 80028da:	2301      	movs	r3, #1
 80028dc:	e04d      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028de:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d801      	bhi.n	80028f4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e042      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d801      	bhi.n	800290a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002906:	2303      	movs	r3, #3
 8002908:	e037      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800290a:	edd7 7a02 	vldr	s15, [r7, #8]
 800290e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80029e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d801      	bhi.n	8002920 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 800291c:	2304      	movs	r3, #4
 800291e:	e02c      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80029e4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d801      	bhi.n	8002936 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002932:	2305      	movs	r3, #5
 8002934:	e021      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002936:	edd7 7a02 	vldr	s15, [r7, #8]
 800293a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800293e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d801      	bhi.n	800294c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002948:	2306      	movs	r3, #6
 800294a:	e016      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800294c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002950:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80029e8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d801      	bhi.n	8002962 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800295e:	2307      	movs	r3, #7
 8002960:	e00b      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002962:	edd7 7a02 	vldr	s15, [r7, #8]
 8002966:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80029ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 800296a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d801      	bhi.n	8002978 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002974:	2308      	movs	r3, #8
 8002976:	e000      	b.n	800297a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002978:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 800297a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
            : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
            :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3320      	adds	r3, #32
 8002980:	7dba      	ldrb	r2, [r7, #22]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fa33 	bl	8002df0 <iis2dlpc_data_rate_set>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	e018      	b.n	80029c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3320      	adds	r3, #32
 800299a:	7dfa      	ldrb	r2, [r7, #23]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f91e 	bl	8002be0 <iis2dlpc_power_mode_set>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e00b      	b.n	80029c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	79ba      	ldrb	r2, [r7, #6]
 80029c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return IIS2DLPC_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	41480000 	.word	0x41480000
 80029d4:	43480000 	.word	0x43480000
 80029d8:	43480000 	.word	0x43480000
 80029dc:	3fcccccd 	.word	0x3fcccccd
 80029e0:	42480000 	.word	0x42480000
 80029e4:	42c80000 	.word	0x42c80000
 80029e8:	43c80000 	.word	0x43c80000
 80029ec:	44480000 	.word	0x44480000

080029f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80029fc:	460b      	mov	r3, r1
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	79fa      	ldrb	r2, [r7, #7]
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	79ba      	ldrb	r2, [r7, #6]
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002ad8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	d801      	bhi.n	8002a2a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002a28:	e04d      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3a:	d801      	bhi.n	8002a40 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002a3e:	e042      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a44:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	d801      	bhi.n	8002a56 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002a54:	e037      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ae8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d801      	bhi.n	8002a6c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002a6a:	e02c      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a70:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002af0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	d801      	bhi.n	8002a82 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002a80:	e021      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002a82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002af8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	d801      	bhi.n	8002a98 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002a96:	e016      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a9c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002b00 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d801      	bhi.n	8002aae <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002aac:	e00b      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002b08 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d801      	bhi.n	8002ac4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002ac2:	e000      	b.n	8002ac6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6353      	str	r3, [r2, #52]	; 0x34

  return IIS2DLPC_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	3fcccccd 	.word	0x3fcccccd
 8002adc:	3fcccccd 	.word	0x3fcccccd
 8002ae0:	41480000 	.word	0x41480000
 8002ae4:	41c80000 	.word	0x41c80000
 8002ae8:	42480000 	.word	0x42480000
 8002aec:	42480000 	.word	0x42480000
 8002af0:	42c80000 	.word	0x42c80000
 8002af4:	42c80000 	.word	0x42c80000
 8002af8:	43480000 	.word	0x43480000
 8002afc:	43480000 	.word	0x43480000
 8002b00:	43c80000 	.word	0x43c80000
 8002b04:	43c80000 	.word	0x43c80000
 8002b08:	44480000 	.word	0x44480000
 8002b0c:	44480000 	.word	0x44480000
 8002b10:	44c80000 	.word	0x44c80000

08002b14 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	72fb      	strb	r3, [r7, #11]
 8002b24:	4613      	mov	r3, r2
 8002b26:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	695c      	ldr	r4, [r3, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	7b1b      	ldrb	r3, [r3, #12]
 8002b34:	b298      	uxth	r0, r3
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	47a0      	blx	r4
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}

08002b4a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	461a      	mov	r2, r3
 8002b56:	460b      	mov	r3, r1
 8002b58:	72fb      	strb	r3, [r7, #11]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	691c      	ldr	r4, [r3, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	7b1b      	ldrb	r3, [r3, #12]
 8002b6a:	b298      	uxth	r0, r3
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	b299      	uxth	r1, r3
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	47a0      	blx	r4
 8002b76:	4603      	mov	r3, r0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}

08002b80 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	72fb      	strb	r3, [r7, #11]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685c      	ldr	r4, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68d8      	ldr	r0, [r3, #12]
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	7af9      	ldrb	r1, [r7, #11]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	47a0      	blx	r4
 8002ba4:	6178      	str	r0, [r7, #20]

  return ret;
 8002ba6:	697b      	ldr	r3, [r7, #20]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}

08002bb0 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	72fb      	strb	r3, [r7, #11]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68d8      	ldr	r0, [r3, #12]
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	7af9      	ldrb	r1, [r7, #11]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	47a0      	blx	r4
 8002bd4:	6178      	str	r0, [r7, #20]

  return ret;
 8002bd6:	697b      	ldr	r3, [r7, #20]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002bec:	f107 0210 	add.w	r2, r7, #16
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffc3 	bl	8002b80 <iis2dlpc_read_reg>
 8002bfa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <iis2dlpc_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	7c3b      	ldrb	r3, [r7, #16]
 8002c0e:	f362 0383 	bfi	r3, r2, #2, #2
 8002c12:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	7c3b      	ldrb	r3, [r7, #16]
 8002c1e:	f362 0301 	bfi	r3, r2, #0, #2
 8002c22:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c24:	f107 0210 	add.w	r2, r7, #16
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffbf 	bl	8002bb0 <iis2dlpc_write_reg>
 8002c32:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <iis2dlpc_power_mode_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2125      	movs	r1, #37	; 0x25
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff9c 	bl	8002b80 <iis2dlpc_read_reg>
 8002c48:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d110      	bne.n	8002c72 <iis2dlpc_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	f362 0382 	bfi	r3, r2, #2, #1
 8002c60:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c62:	f107 020c 	add.w	r2, r7, #12
 8002c66:	2301      	movs	r3, #1
 8002c68:	2125      	movs	r1, #37	; 0x25
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffa0 	bl	8002bb0 <iis2dlpc_write_reg>
 8002c70:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002c72:	697b      	ldr	r3, [r7, #20]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c86:	f107 0210 	add.w	r2, r7, #16
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff76 	bl	8002b80 <iis2dlpc_read_reg>
 8002c94:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 80a3 	bne.w	8002de4 <iis2dlpc_power_mode_get+0x168>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c9e:	f107 020c 	add.w	r2, r7, #12
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	2125      	movs	r1, #37	; 0x25
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff6a 	bl	8002b80 <iis2dlpc_read_reg>
 8002cac:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002cae:	7b3b      	ldrb	r3, [r7, #12]
 8002cb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	7c3b      	ldrb	r3, [r7, #16]
 8002cba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002cc4:	7c3a      	ldrb	r2, [r7, #16]
 8002cc6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002cca:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ccc:	4413      	add	r3, r2
 8002cce:	2b1b      	cmp	r3, #27
 8002cd0:	f200 8084 	bhi.w	8002ddc <iis2dlpc_power_mode_get+0x160>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <iis2dlpc_power_mode_get+0x60>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d6d 	.word	0x08002d6d
 8002ce0:	08002d65 	.word	0x08002d65
 8002ce4:	08002d5d 	.word	0x08002d5d
 8002ce8:	08002d55 	.word	0x08002d55
 8002cec:	08002d4d 	.word	0x08002d4d
 8002cf0:	08002ddd 	.word	0x08002ddd
 8002cf4:	08002ddd 	.word	0x08002ddd
 8002cf8:	08002ddd 	.word	0x08002ddd
 8002cfc:	08002d8d 	.word	0x08002d8d
 8002d00:	08002d85 	.word	0x08002d85
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	08002d75 	.word	0x08002d75
 8002d0c:	08002ddd 	.word	0x08002ddd
 8002d10:	08002ddd 	.word	0x08002ddd
 8002d14:	08002ddd 	.word	0x08002ddd
 8002d18:	08002ddd 	.word	0x08002ddd
 8002d1c:	08002db5 	.word	0x08002db5
 8002d20:	08002dad 	.word	0x08002dad
 8002d24:	08002da5 	.word	0x08002da5
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002ddd 	.word	0x08002ddd
 8002d34:	08002ddd 	.word	0x08002ddd
 8002d38:	08002ddd 	.word	0x08002ddd
 8002d3c:	08002dd5 	.word	0x08002dd5
 8002d40:	08002dcd 	.word	0x08002dcd
 8002d44:	08002dc5 	.word	0x08002dc5
 8002d48:	08002dbd 	.word	0x08002dbd
    {
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
        break;
 8002d52:	e047      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
        break;
 8002d5a:	e043      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
        break;
 8002d62:	e03f      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	e03b      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
        break;
 8002d72:	e037      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	220b      	movs	r2, #11
 8002d78:	701a      	strb	r2, [r3, #0]
        break;
 8002d7a:	e033      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	220a      	movs	r2, #10
 8002d80:	701a      	strb	r2, [r3, #0]
        break;
 8002d82:	e02f      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2209      	movs	r2, #9
 8002d88:	701a      	strb	r2, [r3, #0]
        break;
 8002d8a:	e02b      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	701a      	strb	r2, [r3, #0]
        break;
 8002d92:	e027      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2214      	movs	r2, #20
 8002d98:	701a      	strb	r2, [r3, #0]
        break;
 8002d9a:	e023      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2213      	movs	r2, #19
 8002da0:	701a      	strb	r2, [r3, #0]
        break;
 8002da2:	e01f      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2212      	movs	r2, #18
 8002da8:	701a      	strb	r2, [r3, #0]
        break;
 8002daa:	e01b      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2211      	movs	r2, #17
 8002db0:	701a      	strb	r2, [r3, #0]
        break;
 8002db2:	e017      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2210      	movs	r2, #16
 8002db8:	701a      	strb	r2, [r3, #0]
        break;
 8002dba:	e013      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	221b      	movs	r2, #27
 8002dc0:	701a      	strb	r2, [r3, #0]
        break;
 8002dc2:	e00f      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	221a      	movs	r2, #26
 8002dc8:	701a      	strb	r2, [r3, #0]
        break;
 8002dca:	e00b      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2219      	movs	r2, #25
 8002dd0:	701a      	strb	r2, [r3, #0]
        break;
 8002dd2:	e007      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	701a      	strb	r2, [r3, #0]
        break;
 8002dda:	e003      	b.n	8002de4 <iis2dlpc_power_mode_get+0x168>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2204      	movs	r2, #4
 8002de0:	701a      	strb	r2, [r3, #0]
        break;
 8002de2:	bf00      	nop
    }
  }

  return ret;
 8002de4:	697b      	ldr	r3, [r7, #20]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop

08002df0 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002dfc:	f107 0210 	add.w	r2, r7, #16
 8002e00:	2301      	movs	r3, #1
 8002e02:	2120      	movs	r1, #32
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff febb 	bl	8002b80 <iis2dlpc_read_reg>
 8002e0a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <iis2dlpc_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	7c3b      	ldrb	r3, [r7, #16]
 8002e1c:	f362 1307 	bfi	r3, r2, #4, #4
 8002e20:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e22:	f107 0210 	add.w	r2, r7, #16
 8002e26:	2301      	movs	r3, #1
 8002e28:	2120      	movs	r1, #32
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fec0 	bl	8002bb0 <iis2dlpc_write_reg>
 8002e30:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <iis2dlpc_data_rate_set+0x58>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e38:	f107 020c 	add.w	r2, r7, #12
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	2122      	movs	r1, #34	; 0x22
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fe9d 	bl	8002b80 <iis2dlpc_read_reg>
 8002e46:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d110      	bne.n	8002e70 <iis2dlpc_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	7b3b      	ldrb	r3, [r7, #12]
 8002e5a:	f362 0301 	bfi	r3, r2, #0, #2
 8002e5e:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e60:	f107 020c 	add.w	r2, r7, #12
 8002e64:	2301      	movs	r3, #1
 8002e66:	2122      	movs	r1, #34	; 0x22
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fea1 	bl	8002bb0 <iis2dlpc_write_reg>
 8002e6e:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002e70:	697b      	ldr	r3, [r7, #20]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e86:	f107 0210 	add.w	r2, r7, #16
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fe76 	bl	8002b80 <iis2dlpc_read_reg>
 8002e94:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 8091 	bne.w	8002fc0 <iis2dlpc_data_rate_get+0x144>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e9e:	f107 020c 	add.w	r2, r7, #12
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	2122      	movs	r1, #34	; 0x22
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fe6a 	bl	8002b80 <iis2dlpc_read_reg>
 8002eac:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002eae:	7b3b      	ldrb	r3, [r7, #12]
 8002eb0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	7c3a      	ldrb	r2, [r7, #16]
 8002eba:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2b22      	cmp	r3, #34	; 0x22
 8002ec4:	d878      	bhi.n	8002fb8 <iis2dlpc_data_rate_get+0x13c>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <iis2dlpc_data_rate_get+0x50>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002f59 	.word	0x08002f59
 8002ed0:	08002f61 	.word	0x08002f61
 8002ed4:	08002f69 	.word	0x08002f69
 8002ed8:	08002f71 	.word	0x08002f71
 8002edc:	08002f79 	.word	0x08002f79
 8002ee0:	08002f81 	.word	0x08002f81
 8002ee4:	08002f89 	.word	0x08002f89
 8002ee8:	08002f91 	.word	0x08002f91
 8002eec:	08002f99 	.word	0x08002f99
 8002ef0:	08002fa1 	.word	0x08002fa1
 8002ef4:	08002fb9 	.word	0x08002fb9
 8002ef8:	08002fb9 	.word	0x08002fb9
 8002efc:	08002fb9 	.word	0x08002fb9
 8002f00:	08002fb9 	.word	0x08002fb9
 8002f04:	08002fb9 	.word	0x08002fb9
 8002f08:	08002fb9 	.word	0x08002fb9
 8002f0c:	08002fb9 	.word	0x08002fb9
 8002f10:	08002fb9 	.word	0x08002fb9
 8002f14:	08002fa9 	.word	0x08002fa9
 8002f18:	08002fb9 	.word	0x08002fb9
 8002f1c:	08002fb9 	.word	0x08002fb9
 8002f20:	08002fb9 	.word	0x08002fb9
 8002f24:	08002fb9 	.word	0x08002fb9
 8002f28:	08002fb9 	.word	0x08002fb9
 8002f2c:	08002fb9 	.word	0x08002fb9
 8002f30:	08002fb9 	.word	0x08002fb9
 8002f34:	08002fb9 	.word	0x08002fb9
 8002f38:	08002fb9 	.word	0x08002fb9
 8002f3c:	08002fb9 	.word	0x08002fb9
 8002f40:	08002fb9 	.word	0x08002fb9
 8002f44:	08002fb9 	.word	0x08002fb9
 8002f48:	08002fb9 	.word	0x08002fb9
 8002f4c:	08002fb9 	.word	0x08002fb9
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002fb1 	.word	0x08002fb1
    {
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
        break;
 8002f5e:	e02f      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
        break;
 8002f66:	e02b      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	701a      	strb	r2, [r3, #0]
        break;
 8002f6e:	e027      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2203      	movs	r2, #3
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	e023      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	701a      	strb	r2, [r3, #0]
        break;
 8002f7e:	e01f      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2205      	movs	r2, #5
 8002f84:	701a      	strb	r2, [r3, #0]
        break;
 8002f86:	e01b      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2206      	movs	r2, #6
 8002f8c:	701a      	strb	r2, [r3, #0]
        break;
 8002f8e:	e017      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2207      	movs	r2, #7
 8002f94:	701a      	strb	r2, [r3, #0]
        break;
 8002f96:	e013      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	701a      	strb	r2, [r3, #0]
        break;
 8002f9e:	e00f      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2209      	movs	r2, #9
 8002fa4:	701a      	strb	r2, [r3, #0]
        break;
 8002fa6:	e00b      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2212      	movs	r2, #18
 8002fac:	701a      	strb	r2, [r3, #0]
        break;
 8002fae:	e007      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2222      	movs	r2, #34	; 0x22
 8002fb4:	701a      	strb	r2, [r3, #0]
        break;
 8002fb6:	e003      	b.n	8002fc0 <iis2dlpc_data_rate_get+0x144>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
        break;
 8002fbe:	bf00      	nop
    }
  }

  return ret;
 8002fc0:	697b      	ldr	r3, [r7, #20]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop

08002fcc <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002fd8:	f107 0208 	add.w	r2, r7, #8
 8002fdc:	2301      	movs	r3, #1
 8002fde:	2121      	movs	r1, #33	; 0x21
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fdcd 	bl	8002b80 <iis2dlpc_read_reg>
 8002fe6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <iis2dlpc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	7a3b      	ldrb	r3, [r7, #8]
 8002ff8:	f362 03c3 	bfi	r3, r2, #3, #1
 8002ffc:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002ffe:	f107 0208 	add.w	r2, r7, #8
 8003002:	2301      	movs	r3, #1
 8003004:	2121      	movs	r1, #33	; 0x21
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fdd2 	bl	8002bb0 <iis2dlpc_write_reg>
 800300c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8003024:	f107 0208 	add.w	r2, r7, #8
 8003028:	2301      	movs	r3, #1
 800302a:	2125      	movs	r1, #37	; 0x25
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fda7 	bl	8002b80 <iis2dlpc_read_reg>
 8003032:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <iis2dlpc_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	b2da      	uxtb	r2, r3
 8003042:	7a3b      	ldrb	r3, [r7, #8]
 8003044:	f362 1305 	bfi	r3, r2, #4, #2
 8003048:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800304a:	f107 0208 	add.w	r2, r7, #8
 800304e:	2301      	movs	r3, #1
 8003050:	2125      	movs	r1, #37	; 0x25
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fdac 	bl	8002bb0 <iis2dlpc_write_reg>
 8003058:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800306e:	f107 0208 	add.w	r2, r7, #8
 8003072:	2301      	movs	r3, #1
 8003074:	2125      	movs	r1, #37	; 0x25
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fd82 	bl	8002b80 <iis2dlpc_read_reg>
 800307c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800307e:	7a3b      	ldrb	r3, [r7, #8]
 8003080:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b03      	cmp	r3, #3
 8003088:	d81a      	bhi.n	80030c0 <iis2dlpc_full_scale_get+0x5c>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <iis2dlpc_full_scale_get+0x2c>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030b1 	.word	0x080030b1
 800309c:	080030b9 	.word	0x080030b9
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
      break;
 80030a6:	e00f      	b.n	80030c8 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
      break;
 80030ae:	e00b      	b.n	80030c8 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
      break;
 80030b6:	e007      	b.n	80030c8 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
      break;
 80030be:	e003      	b.n	80030c8 <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
      break;
 80030c6:	bf00      	nop
  }

  return ret;
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop

080030d4 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 80030de:	f107 020c 	add.w	r2, r7, #12
 80030e2:	2306      	movs	r3, #6
 80030e4:	2128      	movs	r1, #40	; 0x28
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fd4a 	bl	8002b80 <iis2dlpc_read_reg>
 80030ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80030ee:	7b7b      	ldrb	r3, [r7, #13]
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	b29a      	uxth	r2, r3
 8003102:	7b3b      	ldrb	r3, [r7, #12]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4413      	add	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	b21a      	sxth	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3302      	adds	r3, #2
 8003116:	b212      	sxth	r2, r2
 8003118:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	3302      	adds	r3, #2
 800311e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003122:	b29b      	uxth	r3, r3
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b29a      	uxth	r2, r3
 8003128:	7bbb      	ldrb	r3, [r7, #14]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4413      	add	r3, r2
 800312e:	b29a      	uxth	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	3302      	adds	r3, #2
 8003134:	b212      	sxth	r2, r2
 8003136:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003138:	7c7a      	ldrb	r2, [r7, #17]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	b212      	sxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3304      	adds	r3, #4
 8003146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314a:	b29b      	uxth	r3, r3
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	b29a      	uxth	r2, r3
 8003150:	7c3b      	ldrb	r3, [r7, #16]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4413      	add	r3, r2
 8003156:	b29a      	uxth	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	3304      	adds	r3, #4
 800315c:	b212      	sxth	r2, r2
 800315e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003160:	697b      	ldr	r3, [r7, #20]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8003174:	2301      	movs	r3, #1
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	210f      	movs	r1, #15
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fd00 	bl	8002b80 <iis2dlpc_read_reg>
 8003180:	60f8      	str	r0, [r7, #12]

  return ret;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8003198:	f107 0208 	add.w	r2, r7, #8
 800319c:	2301      	movs	r3, #1
 800319e:	2121      	movs	r1, #33	; 0x21
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fced 	bl	8002b80 <iis2dlpc_read_reg>
 80031a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <iis2dlpc_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	7a3b      	ldrb	r3, [r7, #8]
 80031b8:	f362 0382 	bfi	r3, r2, #2, #1
 80031bc:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80031be:	f107 0208 	add.w	r2, r7, #8
 80031c2:	2301      	movs	r3, #1
 80031c4:	2121      	movs	r1, #33	; 0x21
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fcf2 	bl	8002bb0 <iis2dlpc_write_reg>
 80031cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 80031e4:	f107 0208 	add.w	r2, r7, #8
 80031e8:	2301      	movs	r3, #1
 80031ea:	212e      	movs	r1, #46	; 0x2e
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fcc7 	bl	8002b80 <iis2dlpc_read_reg>
 80031f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <iis2dlpc_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	b2da      	uxtb	r2, r3
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f362 1347 	bfi	r3, r2, #5, #3
 8003208:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 800320a:	f107 0208 	add.w	r2, r7, #8
 800320e:	2301      	movs	r3, #1
 8003210:	212e      	movs	r1, #46	; 0x2e
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fccc 	bl	8002bb0 <iis2dlpc_write_reg>
 8003218:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e04f      	b.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	7b1a      	ldrb	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <IIS2MDC_RegisterBusIO+0xc8>)
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <IIS2MDC_RegisterBusIO+0xcc>)
 8003282:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <IIS2MDC_RegisterBusIO+0x7e>
    {
      ret = IIS2MDC_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e01e      	b.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4798      	blx	r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <IIS2MDC_RegisterBusIO+0x92>
    {
      ret = IIS2MDC_ERROR;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e014      	b.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3320      	adds	r3, #32
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fbc8 	bl	8003a64 <iis2mdc_i2c_interface_set>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <IIS2MDC_RegisterBusIO+0xbc>
          {
            ret = IIS2MDC_ERROR;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	080036e7 	.word	0x080036e7
 80032f0:	08003749 	.word	0x08003749

080032f4 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3320      	adds	r3, #32
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fb06 	bl	8003914 <iis2mdc_block_data_update_set>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e028      	b.n	8003366 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3320      	adds	r3, #32
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa75 	bl	800380a <iis2mdc_operating_mode_set>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	e01c      	b.n	8003366 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3320      	adds	r3, #32
 8003330:	2103      	movs	r1, #3
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa8f 	bl	8003856 <iis2mdc_data_rate_set>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e010      	b.n	8003366 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb64 	bl	8003a18 <iis2mdc_self_test_set>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e004      	b.n	8003366 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f874 	bl	8003464 <IIS2MDC_MAG_Disable>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e004      	b.n	8003392 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3320      	adds	r3, #32
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb23 	bl	80039f6 <iis2mdc_device_id_get>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	e000      	b.n	80033be <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2201      	movs	r2, #1
 80033e2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2232      	movs	r2, #50	; 0x32
 80033fa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <IIS2MDC_GetCapabilities+0x58>)
 8003410:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	42c80000 	.word	0x42c80000

08003424 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e010      	b.n	800345c <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3320      	adds	r3, #32
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f9e2 	bl	800380a <iis2mdc_operating_mode_set>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	e004      	b.n	800345c <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e010      	b.n	800349c <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3320      	adds	r3, #32
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f9c2 	bl	800380a <iis2mdc_operating_mode_set>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	e004      	b.n	800349c <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80034b4:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3320      	adds	r3, #32
 80034d6:	f107 020b 	add.w	r2, r7, #11
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f9e1 	bl	80038a4 <iis2mdc_data_rate_get>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e023      	b.n	8003536 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d81b      	bhi.n	800352c <IIS2MDC_MAG_GetOutputDataRate+0x68>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	08003515 	.word	0x08003515
 8003504:	0800351d 	.word	0x0800351d
 8003508:	08003525 	.word	0x08003525
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8003510:	601a      	str	r2, [r3, #0]
      break;
 8003512:	e00f      	b.n	8003534 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8003518:	601a      	str	r2, [r3, #0]
      break;
 800351a:	e00b      	b.n	8003534 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8003520:	601a      	str	r2, [r3, #0]
      break;
 8003522:	e007      	b.n	8003534 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8003528:	601a      	str	r2, [r3, #0]
      break;
 800352a:	e003      	b.n	8003534 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	60fb      	str	r3, [r7, #12]
      break;
 8003532:	bf00      	nop
  }

  return ret;
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	41200000 	.word	0x41200000
 8003544:	41a00000 	.word	0x41a00000
 8003548:	42480000 	.word	0x42480000
 800354c:	42c80000 	.word	0x42c80000

08003550 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 800355c:	edd7 7a00 	vldr	s15, [r7]
 8003560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d801      	bhi.n	8003572 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 800356e:	2300      	movs	r3, #0
 8003570:	e016      	b.n	80035a0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003572:	edd7 7a00 	vldr	s15, [r7]
 8003576:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800357a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d801      	bhi.n	8003588 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8003584:	2301      	movs	r3, #1
 8003586:	e00b      	b.n	80035a0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003588:	edd7 7a00 	vldr	s15, [r7]
 800358c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80035c8 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8003590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	d801      	bhi.n	800359e <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 800359a:	2302      	movs	r3, #2
 800359c:	e000      	b.n	80035a0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800359e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 80035a0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3320      	adds	r3, #32
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f953 	bl	8003856 <iis2mdc_data_rate_set>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e000      	b.n	80035be <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	42480000 	.word	0x42480000

080035cc <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2232      	movs	r2, #50	; 0x32
 80035da:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3320      	adds	r3, #32
 8003610:	f107 0208 	add.w	r2, r7, #8
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f9a2 	bl	8003960 <iis2mdc_magnetic_raw_get>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e00c      	b.n	8003642 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003628:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003630:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003638:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3320      	adds	r3, #32
 8003658:	f107 0210 	add.w	r2, r7, #16
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f97e 	bl	8003960 <iis2mdc_magnetic_raw_get>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e036      	b.n	80036de <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff14 	bl	80034a4 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800367c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	edd7 7a03 	vldr	s15, [r7, #12]
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003694:	ee17 2a90 	vmov	r2, s15
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800369c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b4:	ee17 2a90 	vmov	r2, s15
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80036bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d4:	ee17 2a90 	vmov	r2, s15
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036e6:	b590      	push	{r4, r7, lr}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	461a      	mov	r2, r3
 80036f2:	460b      	mov	r3, r1
 80036f4:	72fb      	strb	r3, [r7, #11]
 80036f6:	4613      	mov	r3, r2
 80036f8:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	695c      	ldr	r4, [r3, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	7b1b      	ldrb	r3, [r3, #12]
 800370e:	b298      	uxth	r0, r3
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003716:	b2db      	uxtb	r3, r3
 8003718:	b299      	uxth	r1, r3
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	47a0      	blx	r4
 8003720:	4603      	mov	r3, r0
 8003722:	e00d      	b.n	8003740 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	695c      	ldr	r4, [r3, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	7b1b      	ldrb	r3, [r3, #12]
 800372c:	b298      	uxth	r0, r3
 800372e:	7afb      	ldrb	r3, [r7, #11]
 8003730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003734:	b2db      	uxtb	r3, r3
 8003736:	b299      	uxth	r1, r3
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	47a0      	blx	r4
 800373e:	4603      	mov	r3, r0
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}

08003748 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	72fb      	strb	r3, [r7, #11]
 8003758:	4613      	mov	r3, r2
 800375a:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10e      	bne.n	8003786 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	691c      	ldr	r4, [r3, #16]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	b298      	uxth	r0, r3
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b299      	uxth	r1, r3
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	47a0      	blx	r4
 8003782:	4603      	mov	r3, r0
 8003784:	e00d      	b.n	80037a2 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	691c      	ldr	r4, [r3, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	7b1b      	ldrb	r3, [r3, #12]
 800378e:	b298      	uxth	r0, r3
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003796:	b2db      	uxtb	r3, r3
 8003798:	b299      	uxth	r1, r3
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	47a0      	blx	r4
 80037a0:	4603      	mov	r3, r0
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}

080037aa <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80037aa:	b590      	push	{r4, r7, lr}
 80037ac:	b087      	sub	sp, #28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	460b      	mov	r3, r1
 80037b8:	72fb      	strb	r3, [r7, #11]
 80037ba:	4613      	mov	r3, r2
 80037bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685c      	ldr	r4, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68d8      	ldr	r0, [r3, #12]
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	7af9      	ldrb	r1, [r7, #11]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	47a0      	blx	r4
 80037ce:	6178      	str	r0, [r7, #20]

  return ret;
 80037d0:	697b      	ldr	r3, [r7, #20]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80037da:	b590      	push	{r4, r7, lr}
 80037dc:	b087      	sub	sp, #28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	461a      	mov	r2, r3
 80037e6:	460b      	mov	r3, r1
 80037e8:	72fb      	strb	r3, [r7, #11]
 80037ea:	4613      	mov	r3, r2
 80037ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681c      	ldr	r4, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68d8      	ldr	r0, [r3, #12]
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	7af9      	ldrb	r1, [r7, #11]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	47a0      	blx	r4
 80037fe:	6178      	str	r0, [r7, #20]

  return ret;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003816:	f107 0208 	add.w	r2, r7, #8
 800381a:	2301      	movs	r3, #1
 800381c:	2160      	movs	r1, #96	; 0x60
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffc3 	bl	80037aa <iis2mdc_read_reg>
 8003824:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10f      	bne.n	800384c <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	b2da      	uxtb	r2, r3
 8003834:	7a3b      	ldrb	r3, [r7, #8]
 8003836:	f362 0301 	bfi	r3, r2, #0, #2
 800383a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800383c:	f107 0208 	add.w	r2, r7, #8
 8003840:	2301      	movs	r3, #1
 8003842:	2160      	movs	r1, #96	; 0x60
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ffc8 	bl	80037da <iis2mdc_write_reg>
 800384a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003862:	f107 0208 	add.w	r2, r7, #8
 8003866:	2301      	movs	r3, #1
 8003868:	2160      	movs	r1, #96	; 0x60
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff9d 	bl	80037aa <iis2mdc_read_reg>
 8003870:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10f      	bne.n	8003898 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	b2da      	uxtb	r2, r3
 8003880:	7a3b      	ldrb	r3, [r7, #8]
 8003882:	f362 0383 	bfi	r3, r2, #2, #2
 8003886:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003888:	f107 0208 	add.w	r2, r7, #8
 800388c:	2301      	movs	r3, #1
 800388e:	2160      	movs	r1, #96	; 0x60
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ffa2 	bl	80037da <iis2mdc_write_reg>
 8003896:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80038ae:	f107 0208 	add.w	r2, r7, #8
 80038b2:	2301      	movs	r3, #1
 80038b4:	2160      	movs	r1, #96	; 0x60
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff77 	bl	80037aa <iis2mdc_read_reg>
 80038bc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80038be:	7a3b      	ldrb	r3, [r7, #8]
 80038c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d81a      	bhi.n	8003900 <iis2mdc_data_rate_get+0x5c>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <iis2mdc_data_rate_get+0x2c>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e9 	.word	0x080038e9
 80038d8:	080038f1 	.word	0x080038f1
 80038dc:	080038f9 	.word	0x080038f9
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
      break;
 80038e6:	e00f      	b.n	8003908 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
      break;
 80038ee:	e00b      	b.n	8003908 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
      break;
 80038f6:	e007      	b.n	8003908 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2203      	movs	r2, #3
 80038fc:	701a      	strb	r2, [r3, #0]
      break;
 80038fe:	e003      	b.n	8003908 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
      break;
 8003906:	bf00      	nop
  }

  return ret;
 8003908:	68fb      	ldr	r3, [r7, #12]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop

08003914 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003920:	f107 0208 	add.w	r2, r7, #8
 8003924:	2301      	movs	r3, #1
 8003926:	2162      	movs	r1, #98	; 0x62
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff3e 	bl	80037aa <iis2mdc_read_reg>
 800392e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	7a3b      	ldrb	r3, [r7, #8]
 8003940:	f362 1304 	bfi	r3, r2, #4, #1
 8003944:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003946:	f107 0208 	add.w	r2, r7, #8
 800394a:	2301      	movs	r3, #1
 800394c:	2162      	movs	r1, #98	; 0x62
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff43 	bl	80037da <iis2mdc_write_reg>
 8003954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 800396a:	f107 020c 	add.w	r2, r7, #12
 800396e:	2306      	movs	r3, #6
 8003970:	2168      	movs	r1, #104	; 0x68
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff19 	bl	80037aa <iis2mdc_read_reg>
 8003978:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800397a:	7b7b      	ldrb	r3, [r7, #13]
 800397c:	b21a      	sxth	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003988:	b29b      	uxth	r3, r3
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	b29a      	uxth	r2, r3
 800398e:	7b3b      	ldrb	r3, [r7, #12]
 8003990:	b29b      	uxth	r3, r3
 8003992:	4413      	add	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	b21a      	sxth	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	3302      	adds	r3, #2
 80039a2:	b212      	sxth	r2, r2
 80039a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	3302      	adds	r3, #2
 80039aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	3302      	adds	r3, #2
 80039c0:	b212      	sxth	r2, r2
 80039c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80039c4:	7c7a      	ldrb	r2, [r7, #17]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	3304      	adds	r3, #4
 80039ca:	b212      	sxth	r2, r2
 80039cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	3304      	adds	r3, #4
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	b29a      	uxth	r2, r3
 80039dc:	7c3b      	ldrb	r3, [r7, #16]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	3304      	adds	r3, #4
 80039e8:	b212      	sxth	r2, r2
 80039ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80039ec:	697b      	ldr	r3, [r7, #20]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8003a00:	2301      	movs	r3, #1
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	214f      	movs	r1, #79	; 0x4f
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fecf 	bl	80037aa <iis2mdc_read_reg>
 8003a0c:	60f8      	str	r0, [r7, #12]

  return ret;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a24:	f107 0208 	add.w	r2, r7, #8
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2162      	movs	r1, #98	; 0x62
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff febc 	bl	80037aa <iis2mdc_read_reg>
 8003a32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	7a3b      	ldrb	r3, [r7, #8]
 8003a44:	f362 0341 	bfi	r3, r2, #1, #1
 8003a48:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a4a:	f107 0208 	add.w	r2, r7, #8
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2162      	movs	r1, #98	; 0x62
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fec1 	bl	80037da <iis2mdc_write_reg>
 8003a58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a70:	f107 0208 	add.w	r2, r7, #8
 8003a74:	2301      	movs	r3, #1
 8003a76:	2162      	movs	r1, #98	; 0x62
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe96 	bl	80037aa <iis2mdc_read_reg>
 8003a7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	7a3b      	ldrb	r3, [r7, #8]
 8003a90:	f362 1345 	bfi	r3, r2, #5, #1
 8003a94:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a96:	f107 0208 	add.w	r2, r7, #8
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	2162      	movs	r1, #98	; 0x62
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fe9b 	bl	80037da <iis2mdc_write_reg>
 8003aa4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e051      	b.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	7b1a      	ldrb	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <ISM330DHCX_RegisterBusIO+0xcc>)
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <ISM330DHCX_RegisterBusIO+0xd0>)
 8003b0e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e020      	b.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4798      	blx	r3
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e016      	b.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d112      	bne.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003b54:	230c      	movs	r3, #12
 8003b56:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2112      	movs	r1, #18
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fd73 	bl	800464a <ISM330DHCX_Write_Reg>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08004ab9 	.word	0x08004ab9
 8003b80:	08004aef 	.word	0x08004aef

08003b84 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3320      	adds	r3, #32
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fd2a 	bl	80055ec <ism330dhcx_device_conf_set>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	e078      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 fda1 	bl	80056f2 <ism330dhcx_auto_increment_set>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	e06c      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3320      	adds	r3, #32
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fd6f 	bl	80056a6 <ism330dhcx_reset_set>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e060      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3320      	adds	r3, #32
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fd89 	bl	80056f2 <ism330dhcx_auto_increment_set>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e054      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3320      	adds	r3, #32
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fc3e 	bl	8005474 <ism330dhcx_block_data_update_set>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	e048      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3320      	adds	r3, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 fd97 	bl	800573e <ism330dhcx_fifo_mode_set>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e03c      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3320      	adds	r3, #32
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f808 	bl	8004c40 <ism330dhcx_xl_data_rate_set>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	e02c      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3320      	adds	r3, #32
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ff9e 	bl	8004b84 <ism330dhcx_xl_full_scale_set>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e020      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3320      	adds	r3, #32
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 fa38 	bl	80050d8 <ism330dhcx_gy_data_rate_set>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e010      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3320      	adds	r3, #32
 8003c78:	210c      	movs	r1, #12
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 f9b4 	bl	8004fe8 <ism330dhcx_gy_full_scale_set>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	e004      	b.n	8003c96 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f888 	bl	8003dbc <ISM330DHCX_ACC_Disable>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e015      	b.n	8003ce4 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa92 	bl	80041e2 <ISM330DHCX_GYRO_Disable>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	e00c      	b.n	8003ce4 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fcc1 	bl	8005684 <ism330dhcx_device_id_get>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	e000      	b.n	8003d10 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d40:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2210      	movs	r2, #16
 8003d46:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <ISM330DHCX_GetCapabilities+0x58>)
 8003d52:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4a06      	ldr	r2, [pc, #24]	; (8003d70 <ISM330DHCX_GetCapabilities+0x58>)
 8003d58:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	45d05800 	.word	0x45d05800

08003d74 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e014      	b.n	8003db4 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f103 0220 	add.w	r2, r3, #32
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 ff51 	bl	8004c40 <ism330dhcx_xl_data_rate_set>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	e004      	b.n	8003db4 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e01f      	b.n	8003e12 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f103 0220 	add.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3333      	adds	r3, #51	; 0x33
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f001 f89a 	bl	8004f18 <ism330dhcx_xl_data_rate_get>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	e010      	b.n	8003e12 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3320      	adds	r3, #32
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff22 	bl	8004c40 <ism330dhcx_xl_data_rate_set>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	e004      	b.n	8003e12 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3320      	adds	r3, #32
 8003e2e:	f107 020b 	add.w	r2, r7, #11
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fecb 	bl	8004bd0 <ism330dhcx_xl_full_scale_get>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	e023      	b.n	8003e8e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003e46:	7afb      	ldrb	r3, [r7, #11]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d81b      	bhi.n	8003e84 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e75 	.word	0x08003e75
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8003e68:	601a      	str	r2, [r3, #0]
      break;
 8003e6a:	e00f      	b.n	8003e8c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003e70:	601a      	str	r2, [r3, #0]
      break;
 8003e72:	e00b      	b.n	8003e8c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8003e78:	601a      	str	r2, [r3, #0]
      break;
 8003e7a:	e007      	b.n	8003e8c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003e80:	601a      	str	r2, [r3, #0]
      break;
 8003e82:	e003      	b.n	8003e8c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	60fb      	str	r3, [r7, #12]
      break;
 8003e8a:	bf00      	nop
  }

  return ret;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	3d79db23 	.word	0x3d79db23
 8003e9c:	3df9db23 	.word	0x3df9db23
 8003ea0:	3e79db23 	.word	0x3e79db23
 8003ea4:	3ef9db23 	.word	0x3ef9db23

08003ea8 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3320      	adds	r3, #32
 8003eba:	f107 020b 	add.w	r2, r7, #11
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f829 	bl	8004f18 <ism330dhcx_xl_data_rate_get>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e04e      	b.n	8003f70 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	2b0a      	cmp	r3, #10
 8003ed6:	d846      	bhi.n	8003f66 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f27 	.word	0x08003f27
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f37 	.word	0x08003f37
 8003ef8:	08003f3f 	.word	0x08003f3f
 8003efc:	08003f47 	.word	0x08003f47
 8003f00:	08003f4f 	.word	0x08003f4f
 8003f04:	08003f57 	.word	0x08003f57
 8003f08:	08003f5f 	.word	0x08003f5f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
      break;
 8003f14:	e02b      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8003f1a:	601a      	str	r2, [r3, #0]
      break;
 8003f1c:	e027      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8003f22:	601a      	str	r2, [r3, #0]
      break;
 8003f24:	e023      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8003f2a:	601a      	str	r2, [r3, #0]
      break;
 8003f2c:	e01f      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8003f32:	601a      	str	r2, [r3, #0]
      break;
 8003f34:	e01b      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8003f3a:	601a      	str	r2, [r3, #0]
      break;
 8003f3c:	e017      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8003f42:	601a      	str	r2, [r3, #0]
      break;
 8003f44:	e013      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8003f4a:	601a      	str	r2, [r3, #0]
      break;
 8003f4c:	e00f      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8003f52:	601a      	str	r2, [r3, #0]
      break;
 8003f54:	e00b      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8003f5a:	601a      	str	r2, [r3, #0]
      break;
 8003f5c:	e007      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8003f62:	601a      	str	r2, [r3, #0]
      break;
 8003f64:	e003      	b.n	8003f6e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	60fb      	str	r3, [r7, #12]
      break;
 8003f6c:	bf00      	nop
  }

  return ret;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	41480000 	.word	0x41480000
 8003f7c:	41d00000 	.word	0x41d00000
 8003f80:	42500000 	.word	0x42500000
 8003f84:	42d00000 	.word	0x42d00000
 8003f88:	43500000 	.word	0x43500000
 8003f8c:	43d00000 	.word	0x43d00000
 8003f90:	44504000 	.word	0x44504000
 8003f94:	44d04000 	.word	0x44d04000
 8003f98:	45504000 	.word	0x45504000
 8003f9c:	45d05800 	.word	0x45d05800

08003fa0 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d106      	bne.n	8003fc4 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003fb6:	ed97 0a00 	vldr	s0, [r7]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fb60 	bl	8004680 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	e005      	b.n	8003fd0 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003fc4:	ed97 0a00 	vldr	s0, [r7]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fbe5 	bl	8004798 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003fce:	4603      	mov	r3, r0
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3320      	adds	r3, #32
 8003fea:	f107 020b 	add.w	r2, r7, #11
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fded 	bl	8004bd0 <ism330dhcx_xl_full_scale_get>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8004000:	e023      	b.n	800404a <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d81b      	bhi.n	8004040 <ISM330DHCX_ACC_GetFullScale+0x68>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	08004039 	.word	0x08004039
 8004018:	08004029 	.word	0x08004029
 800401c:	08004031 	.word	0x08004031
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2202      	movs	r2, #2
 8004024:	601a      	str	r2, [r3, #0]
      break;
 8004026:	e00f      	b.n	8004048 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2204      	movs	r2, #4
 800402c:	601a      	str	r2, [r3, #0]
      break;
 800402e:	e00b      	b.n	8004048 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2208      	movs	r2, #8
 8004034:	601a      	str	r2, [r3, #0]
      break;
 8004036:	e007      	b.n	8004048 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	601a      	str	r2, [r3, #0]
      break;
 800403e:	e003      	b.n	8004048 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	60fb      	str	r3, [r7, #12]
      break;
 8004046:	bf00      	nop
  }

  return ret;
 8004048:	68fb      	ldr	r3, [r7, #12]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	dd0b      	ble.n	800407c <ISM330DHCX_ACC_SetFullScale+0x28>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b04      	cmp	r3, #4
 8004068:	dd06      	ble.n	8004078 <ISM330DHCX_ACC_SetFullScale+0x24>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b08      	cmp	r3, #8
 800406e:	dc01      	bgt.n	8004074 <ISM330DHCX_ACC_SetFullScale+0x20>
 8004070:	2303      	movs	r3, #3
 8004072:	e004      	b.n	800407e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004074:	2301      	movs	r3, #1
 8004076:	e002      	b.n	800407e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004078:	2302      	movs	r3, #2
 800407a:	e000      	b.n	800407e <ISM330DHCX_ACC_SetFullScale+0x2a>
 800407c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800407e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fd7b 	bl	8004b84 <ism330dhcx_xl_full_scale_set>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	e000      	b.n	800409c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3320      	adds	r3, #32
 80040b2:	f107 0208 	add.w	r2, r7, #8
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fa4c 	bl	8005556 <ism330dhcx_acceleration_raw_get>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	e00c      	b.n	80040e4 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80040ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80040d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80040da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3320      	adds	r3, #32
 8004100:	f107 0210 	add.w	r2, r7, #16
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fa25 	bl	8005556 <ism330dhcx_acceleration_raw_get>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e03c      	b.n	8004192 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe7c 	bl	8003e1c <ISM330DHCX_ACC_GetSensitivity>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	e030      	b.n	8004192 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004130:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800413c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004148:	ee17 2a90 	vmov	r2, s15
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004150:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800415c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004168:	ee17 2a90 	vmov	r2, s15
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004170:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800417c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004188:	ee17 2a90 	vmov	r2, s15
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e014      	b.n	80041da <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f103 0220 	add.w	r2, r3, #32
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 ff8a 	bl	80050d8 <ism330dhcx_gy_data_rate_set>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e004      	b.n	80041da <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e01f      	b.n	8004238 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 0220 	add.w	r2, r3, #32
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3334      	adds	r3, #52	; 0x34
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f001 f8d3 	bl	80053b0 <ism330dhcx_gy_data_rate_get>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	e010      	b.n	8004238 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3320      	adds	r3, #32
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ff5b 	bl	80050d8 <ism330dhcx_gy_data_rate_set>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	e004      	b.n	8004238 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3320      	adds	r3, #32
 8004252:	f107 020b 	add.w	r2, r7, #11
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 feeb 	bl	8005034 <ism330dhcx_gy_full_scale_get>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	e03d      	b.n	80042e6 <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d835      	bhi.n	80042dc <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042b5 	.word	0x080042b5
 800427c:	080042d5 	.word	0x080042d5
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042c5 	.word	0x080042c5
 800429c:	080042dd 	.word	0x080042dd
 80042a0:	080042dd 	.word	0x080042dd
 80042a4:	080042dd 	.word	0x080042dd
 80042a8:	080042cd 	.word	0x080042cd
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 80042b0:	601a      	str	r2, [r3, #0]
      break;
 80042b2:	e017      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80042b8:	601a      	str	r2, [r3, #0]
      break;
 80042ba:	e013      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80042c0:	601a      	str	r2, [r3, #0]
      break;
 80042c2:	e00f      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 80042c8:	601a      	str	r2, [r3, #0]
      break;
 80042ca:	e00b      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 80042d0:	601a      	str	r2, [r3, #0]
      break;
 80042d2:	e007      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 80042d8:	601a      	str	r2, [r3, #0]
      break;
 80042da:	e003      	b.n	80042e4 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	60fb      	str	r3, [r7, #12]
      break;
 80042e2:	bf00      	nop
  }

  return ret;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	408c0000 	.word	0x408c0000
 80042f4:	410c0000 	.word	0x410c0000
 80042f8:	418c0000 	.word	0x418c0000
 80042fc:	420c0000 	.word	0x420c0000
 8004300:	428c0000 	.word	0x428c0000
 8004304:	430c0000 	.word	0x430c0000

08004308 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3320      	adds	r3, #32
 800431a:	f107 020b 	add.w	r2, r7, #11
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f845 	bl	80053b0 <ism330dhcx_gy_data_rate_get>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e04e      	b.n	80043d0 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004332:	7afb      	ldrb	r3, [r7, #11]
 8004334:	2b0a      	cmp	r3, #10
 8004336:	d846      	bhi.n	80043c6 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004377 	.word	0x08004377
 8004348:	0800437f 	.word	0x0800437f
 800434c:	08004387 	.word	0x08004387
 8004350:	0800438f 	.word	0x0800438f
 8004354:	08004397 	.word	0x08004397
 8004358:	0800439f 	.word	0x0800439f
 800435c:	080043a7 	.word	0x080043a7
 8004360:	080043af 	.word	0x080043af
 8004364:	080043b7 	.word	0x080043b7
 8004368:	080043bf 	.word	0x080043bf
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
      break;
 8004374:	e02b      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800437a:	601a      	str	r2, [r3, #0]
      break;
 800437c:	e027      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004382:	601a      	str	r2, [r3, #0]
      break;
 8004384:	e023      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 800438a:	601a      	str	r2, [r3, #0]
      break;
 800438c:	e01f      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004392:	601a      	str	r2, [r3, #0]
      break;
 8004394:	e01b      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800439a:	601a      	str	r2, [r3, #0]
      break;
 800439c:	e017      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 80043a2:	601a      	str	r2, [r3, #0]
      break;
 80043a4:	e013      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 80043aa:	601a      	str	r2, [r3, #0]
      break;
 80043ac:	e00f      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 80043b2:	601a      	str	r2, [r3, #0]
      break;
 80043b4:	e00b      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 80043ba:	601a      	str	r2, [r3, #0]
      break;
 80043bc:	e007      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 80043c2:	601a      	str	r2, [r3, #0]
      break;
 80043c4:	e003      	b.n	80043ce <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	60fb      	str	r3, [r7, #12]
      break;
 80043cc:	bf00      	nop
  }

  return ret;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	41480000 	.word	0x41480000
 80043dc:	41d00000 	.word	0x41d00000
 80043e0:	42500000 	.word	0x42500000
 80043e4:	42d00000 	.word	0x42d00000
 80043e8:	43500000 	.word	0x43500000
 80043ec:	43d00000 	.word	0x43d00000
 80043f0:	44504000 	.word	0x44504000
 80043f4:	44d04000 	.word	0x44d04000
 80043f8:	45504000 	.word	0x45504000
 80043fc:	45d05800 	.word	0x45d05800

08004400 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004412:	2b01      	cmp	r3, #1
 8004414:	d106      	bne.n	8004424 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004416:	ed97 0a00 	vldr	s0, [r7]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa3e 	bl	800489c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004420:	4603      	mov	r3, r0
 8004422:	e005      	b.n	8004430 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004424:	ed97 0a00 	vldr	s0, [r7]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fac3 	bl	80049b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800442e:	4603      	mov	r3, r0
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3320      	adds	r3, #32
 800444a:	f107 020b 	add.w	r2, r7, #11
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fdef 	bl	8005034 <ism330dhcx_gy_full_scale_get>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295
 8004460:	e041      	b.n	80044e6 <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d839      	bhi.n	80044dc <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044ad 	.word	0x080044ad
 8004474:	080044d3 	.word	0x080044d3
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044dd 	.word	0x080044dd
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044dd 	.word	0x080044dd
 800448c:	080044dd 	.word	0x080044dd
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044dd 	.word	0x080044dd
 8004498:	080044dd 	.word	0x080044dd
 800449c:	080044dd 	.word	0x080044dd
 80044a0:	080044c9 	.word	0x080044c9
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	227d      	movs	r2, #125	; 0x7d
 80044a8:	601a      	str	r2, [r3, #0]
      break;
 80044aa:	e01b      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	22fa      	movs	r2, #250	; 0xfa
 80044b0:	601a      	str	r2, [r3, #0]
      break;
 80044b2:	e017      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044ba:	601a      	str	r2, [r3, #0]
      break;
 80044bc:	e012      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044c4:	601a      	str	r2, [r3, #0]
      break;
 80044c6:	e00d      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044ce:	601a      	str	r2, [r3, #0]
      break;
 80044d0:	e008      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80044d8:	601a      	str	r2, [r3, #0]
      break;
 80044da:	e003      	b.n	80044e4 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	60fb      	str	r3, [r7, #12]
      break;
 80044e2:	bf00      	nop
  }

  return ret;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b7d      	cmp	r3, #125	; 0x7d
 80044fe:	dd18      	ble.n	8004532 <ISM330DHCX_GYRO_SetFullScale+0x42>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2bfa      	cmp	r3, #250	; 0xfa
 8004504:	dd13      	ble.n	800452e <ISM330DHCX_GYRO_SetFullScale+0x3e>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800450c:	dd0d      	ble.n	800452a <ISM330DHCX_GYRO_SetFullScale+0x3a>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004514:	dd07      	ble.n	8004526 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800451c:	dc01      	bgt.n	8004522 <ISM330DHCX_GYRO_SetFullScale+0x32>
 800451e:	230c      	movs	r3, #12
 8004520:	e008      	b.n	8004534 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004522:	2301      	movs	r3, #1
 8004524:	e006      	b.n	8004534 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004526:	2308      	movs	r3, #8
 8004528:	e004      	b.n	8004534 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800452a:	2304      	movs	r3, #4
 800452c:	e002      	b.n	8004534 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004532:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004534:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3320      	adds	r3, #32
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd52 	bl	8004fe8 <ism330dhcx_gy_full_scale_set>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	e000      	b.n	8004552 <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3320      	adds	r3, #32
 8004568:	f107 0208 	add.w	r2, r7, #8
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ffa6 	bl	80054c0 <ism330dhcx_angular_rate_raw_get>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e00c      	b.n	800459a <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004580:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004588:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004590:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3320      	adds	r3, #32
 80045b0:	f107 0210 	add.w	r2, r7, #16
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ff82 	bl	80054c0 <ism330dhcx_angular_rate_raw_get>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e03c      	b.n	8004642 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fe36 	bl	8004240 <ISM330DHCX_GYRO_GetSensitivity>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e030      	b.n	8004642 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80045e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f8:	ee17 2a90 	vmov	r2, s15
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004600:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004618:	ee17 2a90 	vmov	r2, s15
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004620:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800462c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004638:	ee17 2a90 	vmov	r2, s15
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]
 8004656:	4613      	mov	r3, r2
 8004658:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 0020 	add.w	r0, r3, #32
 8004660:	1cba      	adds	r2, r7, #2
 8004662:	78f9      	ldrb	r1, [r7, #3]
 8004664:	2301      	movs	r3, #1
 8004666:	f000 fa75 	bl	8004b54 <ism330dhcx_write_reg>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	e000      	b.n	8004678 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800468c:	edd7 7a00 	vldr	s15, [r7]
 8004690:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d801      	bhi.n	80046a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800469e:	2301      	movs	r3, #1
 80046a0:	e058      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046a2:	edd7 7a00 	vldr	s15, [r7]
 80046a6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80046aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d801      	bhi.n	80046b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e04d      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046b8:	edd7 7a00 	vldr	s15, [r7]
 80046bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800477c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80046c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d801      	bhi.n	80046ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80046ca:	2303      	movs	r3, #3
 80046cc:	e042      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046ce:	edd7 7a00 	vldr	s15, [r7]
 80046d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004780 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d801      	bhi.n	80046e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80046e0:	2304      	movs	r3, #4
 80046e2:	e037      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004784 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d801      	bhi.n	80046fa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80046f6:	2305      	movs	r3, #5
 80046f8:	e02c      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046fa:	edd7 7a00 	vldr	s15, [r7]
 80046fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004788 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	d801      	bhi.n	8004710 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 800470c:	2306      	movs	r3, #6
 800470e:	e021      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004710:	edd7 7a00 	vldr	s15, [r7]
 8004714:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800478c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	d801      	bhi.n	8004726 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004722:	2307      	movs	r3, #7
 8004724:	e016      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004726:	edd7 7a00 	vldr	s15, [r7]
 800472a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004790 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800472e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d801      	bhi.n	800473c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004738:	2308      	movs	r3, #8
 800473a:	e00b      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800473c:	edd7 7a00 	vldr	s15, [r7]
 8004740:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004794 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d801      	bhi.n	8004752 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800474e:	2309      	movs	r3, #9
 8004750:	e000      	b.n	8004754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004752:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004754:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3320      	adds	r3, #32
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fa6e 	bl	8004c40 <ism330dhcx_xl_data_rate_set>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	e000      	b.n	8004772 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	42500000 	.word	0x42500000
 8004780:	42d00000 	.word	0x42d00000
 8004784:	43500000 	.word	0x43500000
 8004788:	43d00000 	.word	0x43d00000
 800478c:	44504000 	.word	0x44504000
 8004790:	44d04000 	.word	0x44d04000
 8004794:	45504000 	.word	0x45504000

08004798 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80047a4:	edd7 7a00 	vldr	s15, [r7]
 80047a8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80047ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	d801      	bhi.n	80047ba <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e058      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047ba:	edd7 7a00 	vldr	s15, [r7]
 80047be:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80047c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ca:	d801      	bhi.n	80047d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e04d      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047d0:	edd7 7a00 	vldr	s15, [r7]
 80047d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004880 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	d801      	bhi.n	80047e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80047e2:	2303      	movs	r3, #3
 80047e4:	e042      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047e6:	edd7 7a00 	vldr	s15, [r7]
 80047ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004884 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80047ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	d801      	bhi.n	80047fc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e037      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047fc:	edd7 7a00 	vldr	s15, [r7]
 8004800:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004888 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	d801      	bhi.n	8004812 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800480e:	2305      	movs	r3, #5
 8004810:	e02c      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004812:	edd7 7a00 	vldr	s15, [r7]
 8004816:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800488c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	d801      	bhi.n	8004828 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004824:	2306      	movs	r3, #6
 8004826:	e021      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004828:	edd7 7a00 	vldr	s15, [r7]
 800482c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004890 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	d801      	bhi.n	800483e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800483a:	2307      	movs	r3, #7
 800483c:	e016      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800483e:	edd7 7a00 	vldr	s15, [r7]
 8004842:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004894 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d801      	bhi.n	8004854 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004850:	2308      	movs	r3, #8
 8004852:	e00b      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004854:	edd7 7a00 	vldr	s15, [r7]
 8004858:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004898 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 800485c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	d801      	bhi.n	800486a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004866:	2309      	movs	r3, #9
 8004868:	e000      	b.n	800486c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800486a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	42500000 	.word	0x42500000
 8004884:	42d00000 	.word	0x42d00000
 8004888:	43500000 	.word	0x43500000
 800488c:	43d00000 	.word	0x43d00000
 8004890:	44504000 	.word	0x44504000
 8004894:	44d04000 	.word	0x44d04000
 8004898:	45504000 	.word	0x45504000

0800489c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80048a8:	edd7 7a00 	vldr	s15, [r7]
 80048ac:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	d801      	bhi.n	80048be <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e058      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048be:	edd7 7a00 	vldr	s15, [r7]
 80048c2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	d801      	bhi.n	80048d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e04d      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048d4:	edd7 7a00 	vldr	s15, [r7]
 80048d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004998 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80048dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e4:	d801      	bhi.n	80048ea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80048e6:	2303      	movs	r3, #3
 80048e8:	e042      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048ea:	edd7 7a00 	vldr	s15, [r7]
 80048ee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800499c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80048f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	d801      	bhi.n	8004900 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e037      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004900:	edd7 7a00 	vldr	s15, [r7]
 8004904:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80049a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004910:	d801      	bhi.n	8004916 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004912:	2305      	movs	r3, #5
 8004914:	e02c      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004916:	edd7 7a00 	vldr	s15, [r7]
 800491a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800491e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004926:	d801      	bhi.n	800492c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004928:	2306      	movs	r3, #6
 800492a:	e021      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800492c:	edd7 7a00 	vldr	s15, [r7]
 8004930:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	d801      	bhi.n	8004942 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800493e:	2307      	movs	r3, #7
 8004940:	e016      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004942:	edd7 7a00 	vldr	s15, [r7]
 8004946:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800494a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	d801      	bhi.n	8004958 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004954:	2308      	movs	r3, #8
 8004956:	e00b      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004958:	edd7 7a00 	vldr	s15, [r7]
 800495c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80049b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	d801      	bhi.n	800496e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800496a:	2309      	movs	r3, #9
 800496c:	e000      	b.n	8004970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800496e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004970:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3320      	adds	r3, #32
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fbac 	bl	80050d8 <ism330dhcx_gy_data_rate_set>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e000      	b.n	800498e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	42500000 	.word	0x42500000
 800499c:	42d00000 	.word	0x42d00000
 80049a0:	43500000 	.word	0x43500000
 80049a4:	43d00000 	.word	0x43d00000
 80049a8:	44504000 	.word	0x44504000
 80049ac:	44d04000 	.word	0x44d04000
 80049b0:	45504000 	.word	0x45504000

080049b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d801      	bhi.n	80049d6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e058      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049d6:	edd7 7a00 	vldr	s15, [r7]
 80049da:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d801      	bhi.n	80049ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e04d      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d801      	bhi.n	8004a02 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049fe:	2303      	movs	r3, #3
 8004a00:	e042      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a02:	edd7 7a00 	vldr	s15, [r7]
 8004a06:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004aa0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d801      	bhi.n	8004a18 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004a14:	2304      	movs	r3, #4
 8004a16:	e037      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a18:	edd7 7a00 	vldr	s15, [r7]
 8004a1c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004aa4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d801      	bhi.n	8004a2e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004a2a:	2305      	movs	r3, #5
 8004a2c:	e02c      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a2e:	edd7 7a00 	vldr	s15, [r7]
 8004a32:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004aa8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d801      	bhi.n	8004a44 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004a40:	2306      	movs	r3, #6
 8004a42:	e021      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a44:	edd7 7a00 	vldr	s15, [r7]
 8004a48:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004aac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d801      	bhi.n	8004a5a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a56:	2307      	movs	r3, #7
 8004a58:	e016      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a5a:	edd7 7a00 	vldr	s15, [r7]
 8004a5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ab0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d801      	bhi.n	8004a70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	e00b      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a70:	edd7 7a00 	vldr	s15, [r7]
 8004a74:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ab4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d801      	bhi.n	8004a86 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a82:	2309      	movs	r3, #9
 8004a84:	e000      	b.n	8004a88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a86:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	42500000 	.word	0x42500000
 8004aa0:	42d00000 	.word	0x42d00000
 8004aa4:	43500000 	.word	0x43500000
 8004aa8:	43d00000 	.word	0x43d00000
 8004aac:	44504000 	.word	0x44504000
 8004ab0:	44d04000 	.word	0x44d04000
 8004ab4:	45504000 	.word	0x45504000

08004ab8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	72fb      	strb	r3, [r7, #11]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	695c      	ldr	r4, [r3, #20]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	7b1b      	ldrb	r3, [r3, #12]
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	b299      	uxth	r1, r3
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	47a0      	blx	r4
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}

08004aee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004aee:	b590      	push	{r4, r7, lr}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	461a      	mov	r2, r3
 8004afa:	460b      	mov	r3, r1
 8004afc:	72fb      	strb	r3, [r7, #11]
 8004afe:	4613      	mov	r3, r2
 8004b00:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	691c      	ldr	r4, [r3, #16]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	7b1b      	ldrb	r3, [r3, #12]
 8004b0e:	b298      	uxth	r0, r3
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	b299      	uxth	r1, r3
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	47a0      	blx	r4
 8004b1a:	4603      	mov	r3, r0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}

08004b24 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	72fb      	strb	r3, [r7, #11]
 8004b34:	4613      	mov	r3, r2
 8004b36:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685c      	ldr	r4, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68d8      	ldr	r0, [r3, #12]
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	7af9      	ldrb	r1, [r7, #11]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	47a0      	blx	r4
 8004b48:	6178      	str	r0, [r7, #20]

  return ret;
 8004b4a:	697b      	ldr	r3, [r7, #20]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}

08004b54 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	460b      	mov	r3, r1
 8004b62:	72fb      	strb	r3, [r7, #11]
 8004b64:	4613      	mov	r3, r2
 8004b66:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681c      	ldr	r4, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68d8      	ldr	r0, [r3, #12]
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	7af9      	ldrb	r1, [r7, #11]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	47a0      	blx	r4
 8004b78:	6178      	str	r0, [r7, #20]

  return ret;
 8004b7a:	697b      	ldr	r3, [r7, #20]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}

08004b84 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b90:	f107 0208 	add.w	r2, r7, #8
 8004b94:	2301      	movs	r3, #1
 8004b96:	2110      	movs	r1, #16
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ffc3 	bl	8004b24 <ism330dhcx_read_reg>
 8004b9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	7a3b      	ldrb	r3, [r7, #8]
 8004bb0:	f362 0383 	bfi	r3, r2, #2, #2
 8004bb4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004bb6:	f107 0208 	add.w	r2, r7, #8
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffc8 	bl	8004b54 <ism330dhcx_write_reg>
 8004bc4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004bda:	f107 0208 	add.w	r2, r7, #8
 8004bde:	2301      	movs	r3, #1
 8004be0:	2110      	movs	r1, #16
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff9e 	bl	8004b24 <ism330dhcx_read_reg>
 8004be8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8004bea:	7a3b      	ldrb	r3, [r7, #8]
 8004bec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d81a      	bhi.n	8004c2c <ism330dhcx_xl_full_scale_get+0x5c>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <ism330dhcx_xl_full_scale_get+0x2c>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c1d 	.word	0x08004c1d
 8004c08:	08004c25 	.word	0x08004c25
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e00f      	b.n	8004c34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e00b      	b.n	8004c34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	e007      	b.n	8004c34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2203      	movs	r2, #3
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e003      	b.n	8004c34 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
      break;
 8004c32:	bf00      	nop
  }

  return ret;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop

08004c40 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fd97 	bl	800578a <ism330dhcx_fsm_enable_get>
 8004c5c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80c4 	bne.w	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c66:	7b3b      	ldrb	r3, [r7, #12]
 8004c68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c6e:	7b3b      	ldrb	r3, [r7, #12]
 8004c70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c74:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c7a:	7b3b      	ldrb	r3, [r7, #12]
 8004c7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c86:	7b3b      	ldrb	r3, [r7, #12]
 8004c88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c92:	7b3b      	ldrb	r3, [r7, #12]
 8004c94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c9e:	7b3b      	ldrb	r3, [r7, #12]
 8004ca0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ca4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004caa:	7b3b      	ldrb	r3, [r7, #12]
 8004cac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004cb6:	7b3b      	ldrb	r3, [r7, #12]
 8004cb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004cce:	7b7b      	ldrb	r3, [r7, #13]
 8004cd0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004cda:	7b7b      	ldrb	r3, [r7, #13]
 8004cdc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ce6:	7b7b      	ldrb	r3, [r7, #13]
 8004ce8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004cec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004cf2:	7b7b      	ldrb	r3, [r7, #13]
 8004cf4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004cfe:	7b7b      	ldrb	r3, [r7, #13]
 8004d00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004d0a:	7b7b      	ldrb	r3, [r7, #13]
 8004d0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004d16:	7b7b      	ldrb	r3, [r7, #13]
 8004d18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d163      	bne.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004d26:	f107 030b 	add.w	r3, r7, #11
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fd59 	bl	80057e4 <ism330dhcx_fsm_data_rate_get>
 8004d32:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d159      	bne.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d853      	bhi.n	8004de8 <ism330dhcx_xl_data_rate_set+0x1a8>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <ism330dhcx_xl_data_rate_set+0x108>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d6b 	.word	0x08004d6b
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004db3 	.word	0x08004db3
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d62:	e044      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	75fb      	strb	r3, [r7, #23]
            break;
 8004d68:	e041      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004d70:	2302      	movs	r3, #2
 8004d72:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d74:	e03b      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d102      	bne.n	8004d82 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d80:	e035      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	75fb      	strb	r3, [r7, #23]
            break;
 8004d86:	e032      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d92:	e02c      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d102      	bne.n	8004da0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d9e:	e026      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d102      	bne.n	8004dac <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004da6:	2303      	movs	r3, #3
 8004da8:	75fb      	strb	r3, [r7, #23]
            break;
 8004daa:	e020      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	75fb      	strb	r3, [r7, #23]
            break;
 8004db0:	e01d      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004db8:	2304      	movs	r3, #4
 8004dba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004dbc:	e017      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d102      	bne.n	8004dca <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8004dc8:	e011      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d102      	bne.n	8004dd6 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	75fb      	strb	r3, [r7, #23]
            break;
 8004dd4:	e00b      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d102      	bne.n	8004de2 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004ddc:	2304      	movs	r3, #4
 8004dde:	75fb      	strb	r3, [r7, #23]
            break;
 8004de0:	e005      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	75fb      	strb	r3, [r7, #23]
            break;
 8004de6:	e002      	b.n	8004dee <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	75fb      	strb	r3, [r7, #23]
            break;
 8004dec:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d16c      	bne.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004df8:	f107 030a 	add.w	r3, r7, #10
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fd38 	bl	8005874 <ism330dhcx_mlc_get>
 8004e04:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8004e06:	7abb      	ldrb	r3, [r7, #10]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d162      	bne.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004e0c:	f107 0309 	add.w	r3, r7, #9
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fd58 	bl	80058c8 <ism330dhcx_mlc_data_rate_get>
 8004e18:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d158      	bne.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8004e20:	7a7b      	ldrb	r3, [r7, #9]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d852      	bhi.n	8004ecc <ism330dhcx_xl_data_rate_set+0x28c>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <ism330dhcx_xl_data_rate_set+0x1ec>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e4f 	.word	0x08004e4f
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e97 	.word	0x08004e97
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e46:	e044      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	75fb      	strb	r3, [r7, #23]
            break;
 8004e4c:	e041      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004e54:	2302      	movs	r3, #2
 8004e56:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e58:	e03b      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d102      	bne.n	8004e66 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004e60:	2302      	movs	r3, #2
 8004e62:	75fb      	strb	r3, [r7, #23]
            break;
 8004e64:	e035      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	75fb      	strb	r3, [r7, #23]
            break;
 8004e6a:	e032      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e76:	e02c      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	75fb      	strb	r3, [r7, #23]
            break;
 8004e82:	e026      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d102      	bne.n	8004e90 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	75fb      	strb	r3, [r7, #23]
            break;
 8004e8e:	e020      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	75fb      	strb	r3, [r7, #23]
            break;
 8004e94:	e01d      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004ea0:	e017      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d102      	bne.n	8004eae <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8004eac:	e011      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d102      	bne.n	8004eba <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	75fb      	strb	r3, [r7, #23]
            break;
 8004eb8:	e00b      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d102      	bne.n	8004ec6 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ec4:	e005      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	75fb      	strb	r3, [r7, #23]
            break;
 8004eca:	e002      	b.n	8004ed2 <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed0:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004ed8:	f107 0208 	add.w	r2, r7, #8
 8004edc:	2301      	movs	r3, #1
 8004ede:	2110      	movs	r1, #16
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fe1f 	bl	8004b24 <ism330dhcx_read_reg>
 8004ee6:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	7a3b      	ldrb	r3, [r7, #8]
 8004ef8:	f362 1307 	bfi	r3, r2, #4, #4
 8004efc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	2301      	movs	r3, #1
 8004f04:	2110      	movs	r1, #16
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe24 	bl	8004b54 <ism330dhcx_write_reg>
 8004f0c:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004f0e:	693b      	ldr	r3, [r7, #16]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004f22:	f107 0208 	add.w	r2, r7, #8
 8004f26:	2301      	movs	r3, #1
 8004f28:	2110      	movs	r1, #16
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff fdfa 	bl	8004b24 <ism330dhcx_read_reg>
 8004f30:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8004f32:	7a3b      	ldrb	r3, [r7, #8]
 8004f34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b0b      	cmp	r3, #11
 8004f3c:	d84a      	bhi.n	8004fd4 <ism330dhcx_xl_data_rate_get+0xbc>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <ism330dhcx_xl_data_rate_get+0x2c>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f8d 	.word	0x08004f8d
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f9d 	.word	0x08004f9d
 8004f5c:	08004fa5 	.word	0x08004fa5
 8004f60:	08004fad 	.word	0x08004fad
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004fbd 	.word	0x08004fbd
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fcd 	.word	0x08004fcd
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e02f      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e02b      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2202      	movs	r2, #2
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e027      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e023      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2204      	movs	r2, #4
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e01f      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	e01b      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2206      	movs	r2, #6
 8004fa8:	701a      	strb	r2, [r3, #0]
      break;
 8004faa:	e017      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2207      	movs	r2, #7
 8004fb0:	701a      	strb	r2, [r3, #0]
      break;
 8004fb2:	e013      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	e00f      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2209      	movs	r2, #9
 8004fc0:	701a      	strb	r2, [r3, #0]
      break;
 8004fc2:	e00b      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	220a      	movs	r2, #10
 8004fc8:	701a      	strb	r2, [r3, #0]
      break;
 8004fca:	e007      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	220b      	movs	r2, #11
 8004fd0:	701a      	strb	r2, [r3, #0]
      break;
 8004fd2:	e003      	b.n	8004fdc <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	bf00      	nop
  }

  return ret;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop

08004fe8 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004ff4:	f107 0208 	add.w	r2, r7, #8
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	2111      	movs	r1, #17
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fd91 	bl	8004b24 <ism330dhcx_read_reg>
 8005002:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	7a3b      	ldrb	r3, [r7, #8]
 8005014:	f362 0303 	bfi	r3, r2, #0, #4
 8005018:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800501a:	f107 0208 	add.w	r2, r7, #8
 800501e:	2301      	movs	r3, #1
 8005020:	2111      	movs	r1, #17
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fd96 	bl	8004b54 <ism330dhcx_write_reg>
 8005028:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800503e:	f107 0208 	add.w	r2, r7, #8
 8005042:	2301      	movs	r3, #1
 8005044:	2111      	movs	r1, #17
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff fd6c 	bl	8004b24 <ism330dhcx_read_reg>
 800504c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 800504e:	7a3b      	ldrb	r3, [r7, #8]
 8005050:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d834      	bhi.n	80050c4 <ism330dhcx_gy_full_scale_get+0x90>
 800505a:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <ism330dhcx_gy_full_scale_get+0x2c>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	0800509d 	.word	0x0800509d
 8005064:	080050bd 	.word	0x080050bd
 8005068:	08005095 	.word	0x08005095
 800506c:	080050c5 	.word	0x080050c5
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050c5 	.word	0x080050c5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	080050c5 	.word	0x080050c5
 8005088:	080050c5 	.word	0x080050c5
 800508c:	080050c5 	.word	0x080050c5
 8005090:	080050b5 	.word	0x080050b5
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2202      	movs	r2, #2
 8005098:	701a      	strb	r2, [r3, #0]
      break;
 800509a:	e017      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
      break;
 80050a2:	e013      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2204      	movs	r2, #4
 80050a8:	701a      	strb	r2, [r3, #0]
      break;
 80050aa:	e00f      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2208      	movs	r2, #8
 80050b0:	701a      	strb	r2, [r3, #0]
      break;
 80050b2:	e00b      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	220c      	movs	r2, #12
 80050b8:	701a      	strb	r2, [r3, #0]
      break;
 80050ba:	e007      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
      break;
 80050c2:	e003      	b.n	80050cc <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2202      	movs	r2, #2
 80050c8:	701a      	strb	r2, [r3, #0]
      break;
 80050ca:	bf00      	nop
  }

  return ret;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb4b 	bl	800578a <ism330dhcx_fsm_enable_get>
 80050f4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 80c4 	bne.w	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050fe:	7b3b      	ldrb	r3, [r7, #12]
 8005100:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005104:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005106:	7b3b      	ldrb	r3, [r7, #12]
 8005108:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800510c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800510e:	4313      	orrs	r3, r2
 8005110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005112:	7b3b      	ldrb	r3, [r7, #12]
 8005114:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005118:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800511a:	4313      	orrs	r3, r2
 800511c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800511e:	7b3b      	ldrb	r3, [r7, #12]
 8005120:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005124:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005126:	4313      	orrs	r3, r2
 8005128:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800512a:	7b3b      	ldrb	r3, [r7, #12]
 800512c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005130:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005132:	4313      	orrs	r3, r2
 8005134:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005136:	7b3b      	ldrb	r3, [r7, #12]
 8005138:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800513c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800513e:	4313      	orrs	r3, r2
 8005140:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005142:	7b3b      	ldrb	r3, [r7, #12]
 8005144:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005148:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800514a:	4313      	orrs	r3, r2
 800514c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800514e:	7b3b      	ldrb	r3, [r7, #12]
 8005150:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005154:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005156:	4313      	orrs	r3, r2
 8005158:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800515a:	7b7b      	ldrb	r3, [r7, #13]
 800515c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005162:	4313      	orrs	r3, r2
 8005164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005166:	7b7b      	ldrb	r3, [r7, #13]
 8005168:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800516c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800516e:	4313      	orrs	r3, r2
 8005170:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005172:	7b7b      	ldrb	r3, [r7, #13]
 8005174:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005178:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800517a:	4313      	orrs	r3, r2
 800517c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800517e:	7b7b      	ldrb	r3, [r7, #13]
 8005180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005184:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005186:	4313      	orrs	r3, r2
 8005188:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800518a:	7b7b      	ldrb	r3, [r7, #13]
 800518c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005190:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005192:	4313      	orrs	r3, r2
 8005194:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005196:	7b7b      	ldrb	r3, [r7, #13]
 8005198:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800519c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800519e:	4313      	orrs	r3, r2
 80051a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80051a2:	7b7b      	ldrb	r3, [r7, #13]
 80051a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80051ae:	7b7b      	ldrb	r3, [r7, #13]
 80051b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d163      	bne.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80051be:	f107 030b 	add.w	r3, r7, #11
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fb0d 	bl	80057e4 <ism330dhcx_fsm_data_rate_get>
 80051ca:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d159      	bne.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d853      	bhi.n	8005280 <ism330dhcx_gy_data_rate_set+0x1a8>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <ism330dhcx_gy_data_rate_set+0x108>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	08005203 	.word	0x08005203
 80051e8:	08005221 	.word	0x08005221
 80051ec:	0800524b 	.word	0x0800524b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051fa:	e044      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	75fb      	strb	r3, [r7, #23]
            break;
 8005200:	e041      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005208:	2302      	movs	r3, #2
 800520a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800520c:	e03b      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d102      	bne.n	800521a <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005214:	2302      	movs	r3, #2
 8005216:	75fb      	strb	r3, [r7, #23]
            break;
 8005218:	e035      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	75fb      	strb	r3, [r7, #23]
            break;
 800521e:	e032      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005226:	2303      	movs	r3, #3
 8005228:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800522a:	e02c      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d102      	bne.n	8005238 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005232:	2303      	movs	r3, #3
 8005234:	75fb      	strb	r3, [r7, #23]
            break;
 8005236:	e026      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d102      	bne.n	8005244 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800523e:	2303      	movs	r3, #3
 8005240:	75fb      	strb	r3, [r7, #23]
            break;
 8005242:	e020      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	75fb      	strb	r3, [r7, #23]
            break;
 8005248:	e01d      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005250:	2304      	movs	r3, #4
 8005252:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005254:	e017      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800525c:	2304      	movs	r3, #4
 800525e:	75fb      	strb	r3, [r7, #23]
            break;
 8005260:	e011      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d102      	bne.n	800526e <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005268:	2304      	movs	r3, #4
 800526a:	75fb      	strb	r3, [r7, #23]
            break;
 800526c:	e00b      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d102      	bne.n	800527a <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005274:	2304      	movs	r3, #4
 8005276:	75fb      	strb	r3, [r7, #23]
            break;
 8005278:	e005      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	75fb      	strb	r3, [r7, #23]
            break;
 800527e:	e002      	b.n	8005286 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	75fb      	strb	r3, [r7, #23]
            break;
 8005284:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d16c      	bne.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005290:	f107 030a 	add.w	r3, r7, #10
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 faec 	bl	8005874 <ism330dhcx_mlc_get>
 800529c:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800529e:	7abb      	ldrb	r3, [r7, #10]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d162      	bne.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80052a4:	f107 0309 	add.w	r3, r7, #9
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb0c 	bl	80058c8 <ism330dhcx_mlc_data_rate_get>
 80052b0:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d158      	bne.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 80052b8:	7a7b      	ldrb	r3, [r7, #9]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d852      	bhi.n	8005364 <ism330dhcx_gy_data_rate_set+0x28c>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <ism330dhcx_gy_data_rate_set+0x1ec>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e7 	.word	0x080052e7
 80052cc:	08005305 	.word	0x08005305
 80052d0:	0800532f 	.word	0x0800532f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80052da:	2301      	movs	r3, #1
 80052dc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052de:	e044      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	75fb      	strb	r3, [r7, #23]
            break;
 80052e4:	e041      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80052ec:	2302      	movs	r3, #2
 80052ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052f0:	e03b      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d102      	bne.n	80052fe <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80052f8:	2302      	movs	r3, #2
 80052fa:	75fb      	strb	r3, [r7, #23]
            break;
 80052fc:	e035      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	75fb      	strb	r3, [r7, #23]
            break;
 8005302:	e032      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800530a:	2303      	movs	r3, #3
 800530c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800530e:	e02c      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005316:	2303      	movs	r3, #3
 8005318:	75fb      	strb	r3, [r7, #23]
            break;
 800531a:	e026      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d102      	bne.n	8005328 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005322:	2303      	movs	r3, #3
 8005324:	75fb      	strb	r3, [r7, #23]
            break;
 8005326:	e020      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	75fb      	strb	r3, [r7, #23]
            break;
 800532c:	e01d      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005334:	2304      	movs	r3, #4
 8005336:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005338:	e017      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d102      	bne.n	8005346 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005340:	2304      	movs	r3, #4
 8005342:	75fb      	strb	r3, [r7, #23]
            break;
 8005344:	e011      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d102      	bne.n	8005352 <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800534c:	2304      	movs	r3, #4
 800534e:	75fb      	strb	r3, [r7, #23]
            break;
 8005350:	e00b      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d102      	bne.n	800535e <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005358:	2304      	movs	r3, #4
 800535a:	75fb      	strb	r3, [r7, #23]
            break;
 800535c:	e005      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	75fb      	strb	r3, [r7, #23]
            break;
 8005362:	e002      	b.n	800536a <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	75fb      	strb	r3, [r7, #23]
            break;
 8005368:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005370:	f107 0208 	add.w	r2, r7, #8
 8005374:	2301      	movs	r3, #1
 8005376:	2111      	movs	r1, #17
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fbd3 	bl	8004b24 <ism330dhcx_read_reg>
 800537e:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	7a3b      	ldrb	r3, [r7, #8]
 8005390:	f362 1307 	bfi	r3, r2, #4, #4
 8005394:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005396:	f107 0208 	add.w	r2, r7, #8
 800539a:	2301      	movs	r3, #1
 800539c:	2111      	movs	r1, #17
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fbd8 	bl	8004b54 <ism330dhcx_write_reg>
 80053a4:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80053a6:	693b      	ldr	r3, [r7, #16]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80053ba:	f107 0208 	add.w	r2, r7, #8
 80053be:	2301      	movs	r3, #1
 80053c0:	2111      	movs	r1, #17
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fbae 	bl	8004b24 <ism330dhcx_read_reg>
 80053c8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 80053ca:	7a3b      	ldrb	r3, [r7, #8]
 80053cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b0a      	cmp	r3, #10
 80053d4:	d844      	bhi.n	8005460 <ism330dhcx_gy_data_rate_get+0xb0>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <ism330dhcx_gy_data_rate_get+0x2c>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005409 	.word	0x08005409
 80053e0:	08005411 	.word	0x08005411
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005429 	.word	0x08005429
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005441 	.word	0x08005441
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005451 	.word	0x08005451
 8005404:	08005459 	.word	0x08005459
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e02b      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e027      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2202      	movs	r2, #2
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	e023      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2203      	movs	r2, #3
 8005424:	701a      	strb	r2, [r3, #0]
      break;
 8005426:	e01f      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2204      	movs	r2, #4
 800542c:	701a      	strb	r2, [r3, #0]
      break;
 800542e:	e01b      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2205      	movs	r2, #5
 8005434:	701a      	strb	r2, [r3, #0]
      break;
 8005436:	e017      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2206      	movs	r2, #6
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	e013      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2207      	movs	r2, #7
 8005444:	701a      	strb	r2, [r3, #0]
      break;
 8005446:	e00f      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	701a      	strb	r2, [r3, #0]
      break;
 800544e:	e00b      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2209      	movs	r2, #9
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	e007      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	220a      	movs	r2, #10
 800545c:	701a      	strb	r2, [r3, #0]
      break;
 800545e:	e003      	b.n	8005468 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
      break;
 8005466:	bf00      	nop
  }

  return ret;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop

08005474 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005480:	f107 0208 	add.w	r2, r7, #8
 8005484:	2301      	movs	r3, #1
 8005486:	2112      	movs	r1, #18
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fb4b 	bl	8004b24 <ism330dhcx_read_reg>
 800548e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	7a3b      	ldrb	r3, [r7, #8]
 80054a0:	f362 1386 	bfi	r3, r2, #6, #1
 80054a4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	2301      	movs	r3, #1
 80054ac:	2112      	movs	r1, #18
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fb50 	bl	8004b54 <ism330dhcx_write_reg>
 80054b4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80054ca:	f107 020c 	add.w	r2, r7, #12
 80054ce:	2306      	movs	r3, #6
 80054d0:	2122      	movs	r1, #34	; 0x22
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fb26 	bl	8004b24 <ism330dhcx_read_reg>
 80054d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054da:	7b7b      	ldrb	r3, [r7, #13]
 80054dc:	b21a      	sxth	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	7b3b      	ldrb	r3, [r7, #12]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b21a      	sxth	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3302      	adds	r3, #2
 8005502:	b212      	sxth	r2, r2
 8005504:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	3302      	adds	r3, #2
 800550a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800550e:	b29b      	uxth	r3, r3
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	b29a      	uxth	r2, r3
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	b29b      	uxth	r3, r3
 8005518:	4413      	add	r3, r2
 800551a:	b29a      	uxth	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3302      	adds	r3, #2
 8005520:	b212      	sxth	r2, r2
 8005522:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005524:	7c7a      	ldrb	r2, [r7, #17]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	3304      	adds	r3, #4
 800552a:	b212      	sxth	r2, r2
 800552c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3304      	adds	r3, #4
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	b29b      	uxth	r3, r3
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b29a      	uxth	r2, r3
 800553c:	7c3b      	ldrb	r3, [r7, #16]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	3304      	adds	r3, #4
 8005548:	b212      	sxth	r2, r2
 800554a:	801a      	strh	r2, [r3, #0]

  return ret;
 800554c:	697b      	ldr	r3, [r7, #20]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005560:	f107 020c 	add.w	r2, r7, #12
 8005564:	2306      	movs	r3, #6
 8005566:	2128      	movs	r1, #40	; 0x28
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fadb 	bl	8004b24 <ism330dhcx_read_reg>
 800556e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005570:	7b7b      	ldrb	r3, [r7, #13]
 8005572:	b21a      	sxth	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557e:	b29b      	uxth	r3, r3
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	b29a      	uxth	r2, r3
 8005584:	7b3b      	ldrb	r3, [r7, #12]
 8005586:	b29b      	uxth	r3, r3
 8005588:	4413      	add	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	b21a      	sxth	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005592:	7bfa      	ldrb	r2, [r7, #15]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	3302      	adds	r3, #2
 8005598:	b212      	sxth	r2, r2
 800559a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3302      	adds	r3, #2
 80055a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	3302      	adds	r3, #2
 80055b6:	b212      	sxth	r2, r2
 80055b8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80055ba:	7c7a      	ldrb	r2, [r7, #17]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	b212      	sxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	7c3b      	ldrb	r3, [r7, #16]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	b212      	sxth	r2, r2
 80055e0:	801a      	strh	r2, [r3, #0]

  return ret;
 80055e2:	697b      	ldr	r3, [r7, #20]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80055f8:	f107 0208 	add.w	r2, r7, #8
 80055fc:	2301      	movs	r3, #1
 80055fe:	2118      	movs	r1, #24
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fa8f 	bl	8004b24 <ism330dhcx_read_reg>
 8005606:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	7a3b      	ldrb	r3, [r7, #8]
 8005618:	f362 0341 	bfi	r3, r2, #1, #1
 800561c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800561e:	f107 0208 	add.w	r2, r7, #8
 8005622:	2301      	movs	r3, #1
 8005624:	2118      	movs	r1, #24
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fa94 	bl	8004b54 <ism330dhcx_write_reg>
 800562c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005644:	f107 0208 	add.w	r2, r7, #8
 8005648:	2301      	movs	r3, #1
 800564a:	2101      	movs	r1, #1
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fa69 	bl	8004b24 <ism330dhcx_read_reg>
 8005652:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	b2da      	uxtb	r2, r3
 8005662:	7a3b      	ldrb	r3, [r7, #8]
 8005664:	f362 1387 	bfi	r3, r2, #6, #2
 8005668:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800566a:	f107 0208 	add.w	r2, r7, #8
 800566e:	2301      	movs	r3, #1
 8005670:	2101      	movs	r1, #1
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fa6e 	bl	8004b54 <ism330dhcx_write_reg>
 8005678:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800568e:	2301      	movs	r3, #1
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	210f      	movs	r1, #15
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fa45 	bl	8004b24 <ism330dhcx_read_reg>
 800569a:	60f8      	str	r0, [r7, #12]

  return ret;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80056b2:	f107 0208 	add.w	r2, r7, #8
 80056b6:	2301      	movs	r3, #1
 80056b8:	2112      	movs	r1, #18
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fa32 	bl	8004b24 <ism330dhcx_read_reg>
 80056c0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10f      	bne.n	80056e8 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	7a3b      	ldrb	r3, [r7, #8]
 80056d2:	f362 0300 	bfi	r3, r2, #0, #1
 80056d6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80056d8:	f107 0208 	add.w	r2, r7, #8
 80056dc:	2301      	movs	r3, #1
 80056de:	2112      	movs	r1, #18
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fa37 	bl	8004b54 <ism330dhcx_write_reg>
 80056e6:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80056e8:	68fb      	ldr	r3, [r7, #12]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80056fe:	f107 0208 	add.w	r2, r7, #8
 8005702:	2301      	movs	r3, #1
 8005704:	2112      	movs	r1, #18
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fa0c 	bl	8004b24 <ism330dhcx_read_reg>
 800570c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10f      	bne.n	8005734 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	7a3b      	ldrb	r3, [r7, #8]
 800571e:	f362 0382 	bfi	r3, r2, #2, #1
 8005722:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005724:	f107 0208 	add.w	r2, r7, #8
 8005728:	2301      	movs	r3, #1
 800572a:	2112      	movs	r1, #18
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fa11 	bl	8004b54 <ism330dhcx_write_reg>
 8005732:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005734:	68fb      	ldr	r3, [r7, #12]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800574a:	f107 0208 	add.w	r2, r7, #8
 800574e:	2301      	movs	r3, #1
 8005750:	210a      	movs	r1, #10
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff f9e6 	bl	8004b24 <ism330dhcx_read_reg>
 8005758:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10f      	bne.n	8005780 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	b2da      	uxtb	r2, r3
 8005768:	7a3b      	ldrb	r3, [r7, #8]
 800576a:	f362 0302 	bfi	r3, r2, #0, #3
 800576e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005770:	f107 0208 	add.w	r2, r7, #8
 8005774:	2301      	movs	r3, #1
 8005776:	210a      	movs	r1, #10
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff f9eb 	bl	8004b54 <ism330dhcx_write_reg>
 800577e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8005780:	68fb      	ldr	r3, [r7, #12]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005794:	2102      	movs	r1, #2
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ff4e 	bl	8005638 <ism330dhcx_mem_bank_set>
 800579c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80057a4:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80057a6:	2301      	movs	r3, #1
 80057a8:	2146      	movs	r1, #70	; 0x46
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff f9ba 	bl	8004b24 <ism330dhcx_read_reg>
 80057b0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80057bc:	2301      	movs	r3, #1
 80057be:	2147      	movs	r1, #71	; 0x47
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff f9af 	bl	8004b24 <ism330dhcx_read_reg>
 80057c6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80057ce:	2100      	movs	r1, #0
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff31 	bl	8005638 <ism330dhcx_mem_bank_set>
 80057d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80057ee:	2102      	movs	r1, #2
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff21 	bl	8005638 <ism330dhcx_mem_bank_set>
 80057f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80057fe:	f107 0208 	add.w	r2, r7, #8
 8005802:	2301      	movs	r3, #1
 8005804:	215f      	movs	r1, #95	; 0x5f
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff f98c 	bl	8004b24 <ism330dhcx_read_reg>
 800580c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005814:	2100      	movs	r1, #0
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ff0e 	bl	8005638 <ism330dhcx_mem_bank_set>
 800581c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800581e:	7a3b      	ldrb	r3, [r7, #8]
 8005820:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d81a      	bhi.n	8005860 <ism330dhcx_fsm_data_rate_get+0x7c>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <ism330dhcx_fsm_data_rate_get+0x4c>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005841 	.word	0x08005841
 8005834:	08005849 	.word	0x08005849
 8005838:	08005851 	.word	0x08005851
 800583c:	08005859 	.word	0x08005859
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
      break;
 8005846:	e00f      	b.n	8005868 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
      break;
 800584e:	e00b      	b.n	8005868 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]
      break;
 8005856:	e007      	b.n	8005868 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2203      	movs	r2, #3
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e003      	b.n	8005868 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	bf00      	nop
  }

  return ret;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800587e:	2102      	movs	r1, #2
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fed9 	bl	8005638 <ism330dhcx_mem_bank_set>
 8005886:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800588e:	f107 0208 	add.w	r2, r7, #8
 8005892:	2301      	movs	r3, #1
 8005894:	2105      	movs	r1, #5
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff f944 	bl	8004b24 <ism330dhcx_read_reg>
 800589c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80058a4:	2100      	movs	r1, #0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fec6 	bl	8005638 <ism330dhcx_mem_bank_set>
 80058ac:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80058ae:	7a3b      	ldrb	r3, [r7, #8]
 80058b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80058d2:	2102      	movs	r1, #2
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff feaf 	bl	8005638 <ism330dhcx_mem_bank_set>
 80058da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d107      	bne.n	80058f2 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80058e2:	f107 0208 	add.w	r2, r7, #8
 80058e6:	2301      	movs	r3, #1
 80058e8:	2160      	movs	r1, #96	; 0x60
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff f91a 	bl	8004b24 <ism330dhcx_read_reg>
 80058f0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d12a      	bne.n	800594e <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80058f8:	7a3b      	ldrb	r3, [r7, #8]
 80058fa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d81b      	bhi.n	800593c <ism330dhcx_mlc_data_rate_get+0x74>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <ism330dhcx_mlc_data_rate_get+0x44>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005925 	.word	0x08005925
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005935 	.word	0x08005935
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	701a      	strb	r2, [r3, #0]
        break;
 8005922:	e00f      	b.n	8005944 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
        break;
 800592a:	e00b      	b.n	8005944 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
        break;
 8005932:	e007      	b.n	8005944 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2203      	movs	r2, #3
 8005938:	701a      	strb	r2, [r3, #0]
        break;
 800593a:	e003      	b.n	8005944 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
        break;
 8005942:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005944:	2100      	movs	r1, #0
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fe76 	bl	8005638 <ism330dhcx_mem_bank_set>
 800594c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <IKS02A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	; 0x38
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005966:	2301      	movs	r3, #1
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d06e      	beq.n	8005a52 <IKS02A1_MOTION_SENSOR_Init+0xfa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b02      	cmp	r3, #2
 8005978:	f200 809d 	bhi.w	8005ab6 <IKS02A1_MOTION_SENSOR_Init+0x15e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <IKS02A1_MOTION_SENSOR_Init+0x32>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d032      	beq.n	80059ee <IKS02A1_MOTION_SENSOR_Init+0x96>
 8005988:	e095      	b.n	8005ab6 <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	f000 fa00 	bl	8005d90 <ISM330DHCX_0_Probe>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	e0cc      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800599c:	4a68      	ldr	r2, [pc, #416]	; (8005b40 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4967      	ldr	r1, [pc, #412]	; (8005b44 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059ae:	f107 010c 	add.w	r1, r7, #12
 80059b2:	4610      	mov	r0, r2
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059bc:	f06f 0306 	mvn.w	r3, #6
 80059c0:	e0b9      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059c2:	7b3b      	ldrb	r3, [r7, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d103      	bne.n	80059d0 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059d0:	7b7b      	ldrb	r3, [r7, #13]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d103      	bne.n	80059de <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d16c      	bne.n	8005abe <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059ec:	e067      	b.n	8005abe <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f000 fa8e 	bl	8005f10 <IIS2DLPC_0_Probe>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	e09a      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a00:	4a4f      	ldr	r2, [pc, #316]	; (8005b40 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	494e      	ldr	r1, [pc, #312]	; (8005b44 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a12:	f107 010c 	add.w	r1, r7, #12
 8005a16:	4610      	mov	r0, r2
 8005a18:	4798      	blx	r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a20:	f06f 0306 	mvn.w	r3, #6
 8005a24:	e087      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a26:	7b3b      	ldrb	r3, [r7, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d103      	bne.n	8005a34 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	f043 0302 	orr.w	r3, r3, #2
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a34:	7b7b      	ldrb	r3, [r7, #13]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d103      	bne.n	8005a42 <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d13c      	bne.n	8005ac2 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a50:	e037      	b.n	8005ac2 <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005a52:	6838      	ldr	r0, [r7, #0]
 8005a54:	f000 fb08 	bl	8006068 <IIS2MDC_0_Probe>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	e068      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a64:	4a36      	ldr	r2, [pc, #216]	; (8005b40 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4935      	ldr	r1, [pc, #212]	; (8005b44 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a76:	f107 010c 	add.w	r1, r7, #12
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4798      	blx	r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a84:	f06f 0306 	mvn.w	r3, #6
 8005a88:	e055      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a8a:	7b3b      	ldrb	r3, [r7, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d103      	bne.n	8005a98 <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f043 0302 	orr.w	r3, r3, #2
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a98:	7b7b      	ldrb	r3, [r7, #13]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d103      	bne.n	8005aa6 <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d10c      	bne.n	8005ac6 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005ab4:	e007      	b.n	8005ac6 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005ab6:	f06f 0301 	mvn.w	r3, #1
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005abc:	e004      	b.n	8005ac8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005ac6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	e031      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad6:	e02a      	b.n	8005b2e <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	4013      	ands	r3, r2
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d11e      	bne.n	8005b22 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	4013      	ands	r3, r2
 8005aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d118      	bne.n	8005b22 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005af8:	4814      	ldr	r0, [pc, #80]	; (8005b4c <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	440b      	add	r3, r1
 8005b04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	490e      	ldr	r1, [pc, #56]	; (8005b44 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b12:	4610      	mov	r0, r2
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005b1c:	f06f 0304 	mvn.w	r3, #4
 8005b20:	e009      	b.n	8005b36 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d9d1      	bls.n	8005ad8 <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3738      	adds	r7, #56	; 0x38
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000310 	.word	0x20000310
 8005b44:	200002e0 	.word	0x200002e0
 8005b48:	200000c4 	.word	0x200000c4
 8005b4c:	200002ec 	.word	0x200002ec

08005b50 <IKS02A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS02A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d903      	bls.n	8005b68 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b60:	f06f 0301 	mvn.w	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e014      	b.n	8005b92 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8005b68:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <IKS02A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	490b      	ldr	r1, [pc, #44]	; (8005ba0 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x50>)
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <IKS02A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b86:	f06f 0306 	mvn.w	r3, #6
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000310 	.word	0x20000310
 8005ba0:	200002e0 	.word	0x200002e0

08005ba4 <IKS02A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d903      	bls.n	8005bbc <IKS02A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bb4:	f06f 0301 	mvn.w	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e014      	b.n	8005be6 <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8005bbc:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <IKS02A1_MOTION_SENSOR_ReadID+0x4c>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	490b      	ldr	r1, [pc, #44]	; (8005bf4 <IKS02A1_MOTION_SENSOR_ReadID+0x50>)
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <IKS02A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005bda:	f06f 0306 	mvn.w	r3, #6
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e001      	b.n	8005be6 <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000310 	.word	0x20000310
 8005bf4:	200002e0 	.word	0x200002e0

08005bf8 <IKS02A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d903      	bls.n	8005c12 <IKS02A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c0a:	f06f 0301 	mvn.w	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e029      	b.n	8005c66 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c12:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <IKS02A1_MOTION_SENSOR_GetAxes+0x78>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d11d      	bne.n	8005c60 <IKS02A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <IKS02A1_MOTION_SENSOR_GetAxes+0x7c>)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c2c:	4812      	ldr	r0, [pc, #72]	; (8005c78 <IKS02A1_MOTION_SENSOR_GetAxes+0x80>)
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	490f      	ldr	r1, [pc, #60]	; (8005c7c <IKS02A1_MOTION_SENSOR_GetAxes+0x84>)
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <IKS02A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c52:	f06f 0304 	mvn.w	r3, #4
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e005      	b.n	8005c66 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e002      	b.n	8005c66 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c60:	f06f 0301 	mvn.w	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c66:	697b      	ldr	r3, [r7, #20]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000031c 	.word	0x2000031c
 8005c74:	200000c4 	.word	0x200000c4
 8005c78:	200002ec 	.word	0x200002ec
 8005c7c:	200002e0 	.word	0x200002e0

08005c80 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d903      	bls.n	8005c9a <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c92:	f06f 0301 	mvn.w	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e029      	b.n	8005cee <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d11d      	bne.n	8005ce8 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005cac:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cb4:	4812      	ldr	r0, [pc, #72]	; (8005d00 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	490f      	ldr	r1, [pc, #60]	; (8005d04 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cda:	f06f 0304 	mvn.w	r3, #4
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e005      	b.n	8005cee <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e002      	b.n	8005cee <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ce8:	f06f 0301 	mvn.w	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	2000031c 	.word	0x2000031c
 8005cfc:	200000c4 	.word	0x200000c4
 8005d00:	200002ec 	.word	0x200002ec
 8005d04:	200002e0 	.word	0x200002e0

08005d08 <IKS02A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d903      	bls.n	8005d22 <IKS02A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d1a:	f06f 0301 	mvn.w	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e029      	b.n	8005d76 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d22:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <IKS02A1_MOTION_SENSOR_GetFullScale+0x78>)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d11d      	bne.n	8005d70 <IKS02A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <IKS02A1_MOTION_SENSOR_GetFullScale+0x7c>)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d3c:	4812      	ldr	r0, [pc, #72]	; (8005d88 <IKS02A1_MOTION_SENSOR_GetFullScale+0x80>)
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	440b      	add	r3, r1
 8005d48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	490f      	ldr	r1, [pc, #60]	; (8005d8c <IKS02A1_MOTION_SENSOR_GetFullScale+0x84>)
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <IKS02A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d62:	f06f 0304 	mvn.w	r3, #4
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e005      	b.n	8005d76 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e002      	b.n	8005d76 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d70:	f06f 0301 	mvn.w	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d76:	697b      	ldr	r3, [r7, #20]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	2000031c 	.word	0x2000031c
 8005d84:	200000c4 	.word	0x200000c4
 8005d88:	200002ec 	.word	0x200002ec
 8005d8c:	200002e0 	.word	0x200002e0

08005d90 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b094      	sub	sp, #80	; 0x50
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005da0:	23d7      	movs	r3, #215	; 0xd7
 8005da2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005da6:	4b4b      	ldr	r3, [pc, #300]	; (8005ed4 <ISM330DHCX_0_Probe+0x144>)
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005daa:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <ISM330DHCX_0_Probe+0x148>)
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005dae:	4b4b      	ldr	r3, [pc, #300]	; (8005edc <ISM330DHCX_0_Probe+0x14c>)
 8005db0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005db2:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <ISM330DHCX_0_Probe+0x150>)
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005db6:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <ISM330DHCX_0_Probe+0x154>)
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 8005dba:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <ISM330DHCX_0_Probe+0x158>)
 8005dbc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8005dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4849      	ldr	r0, [pc, #292]	; (8005eec <ISM330DHCX_0_Probe+0x15c>)
 8005dc6:	f7fd fe73 	bl	8003ab0 <ISM330DHCX_RegisterBusIO>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <ISM330DHCX_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dd0:	f06f 0306 	mvn.w	r3, #6
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd6:	e077      	b.n	8005ec8 <ISM330DHCX_0_Probe+0x138>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005dd8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4843      	ldr	r0, [pc, #268]	; (8005eec <ISM330DHCX_0_Probe+0x15c>)
 8005de0:	f7fd ff84 	bl	8003cec <ISM330DHCX_ReadID>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <ISM330DHCX_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dea:	f06f 0306 	mvn.w	r3, #6
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df0:	e06a      	b.n	8005ec8 <ISM330DHCX_0_Probe+0x138>
  }
  else if (id != ISM330DHCX_ID)
 8005df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005df6:	2b6b      	cmp	r3, #107	; 0x6b
 8005df8:	d003      	beq.n	8005e02 <ISM330DHCX_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dfa:	f06f 0306 	mvn.w	r3, #6
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e00:	e062      	b.n	8005ec8 <ISM330DHCX_0_Probe+0x138>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4619      	mov	r1, r3
 8005e08:	4838      	ldr	r0, [pc, #224]	; (8005eec <ISM330DHCX_0_Probe+0x15c>)
 8005e0a:	f7fd ff85 	bl	8003d18 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005e0e:	7b7b      	ldrb	r3, [r7, #13]
 8005e10:	461a      	mov	r2, r3
 8005e12:	7b3b      	ldrb	r3, [r7, #12]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	4a34      	ldr	r2, [pc, #208]	; (8005ef0 <ISM330DHCX_0_Probe+0x160>)
 8005e20:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8005e22:	4b34      	ldr	r3, [pc, #208]	; (8005ef4 <ISM330DHCX_0_Probe+0x164>)
 8005e24:	4a31      	ldr	r2, [pc, #196]	; (8005eec <ISM330DHCX_0_Probe+0x15c>)
 8005e26:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8005e28:	4b33      	ldr	r3, [pc, #204]	; (8005ef8 <ISM330DHCX_0_Probe+0x168>)
 8005e2a:	4a34      	ldr	r2, [pc, #208]	; (8005efc <ISM330DHCX_0_Probe+0x16c>)
 8005e2c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11d      	bne.n	8005e70 <ISM330DHCX_0_Probe+0xe0>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d018      	beq.n	8005e70 <ISM330DHCX_0_Probe+0xe0>
 8005e3e:	7b7b      	ldrb	r3, [r7, #13]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d115      	bne.n	8005e70 <ISM330DHCX_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8005e44:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <ISM330DHCX_0_Probe+0x170>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a2e      	ldr	r2, [pc, #184]	; (8005f04 <ISM330DHCX_0_Probe+0x174>)
 8005e4a:	492f      	ldr	r1, [pc, #188]	; (8005f08 <ISM330DHCX_0_Probe+0x178>)
 8005e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005e50:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <ISM330DHCX_0_Probe+0x168>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <ISM330DHCX_0_Probe+0x164>)
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4798      	blx	r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <ISM330DHCX_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e64:	f06f 0304 	mvn.w	r3, #4
 8005e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6a:	e001      	b.n	8005e70 <ISM330DHCX_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11d      	bne.n	8005eb2 <ISM330DHCX_0_Probe+0x122>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d018      	beq.n	8005eb2 <ISM330DHCX_0_Probe+0x122>
 8005e80:	7b3b      	ldrb	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d115      	bne.n	8005eb2 <ISM330DHCX_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e86:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <ISM330DHCX_0_Probe+0x170>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <ISM330DHCX_0_Probe+0x174>)
 8005e8c:	491f      	ldr	r1, [pc, #124]	; (8005f0c <ISM330DHCX_0_Probe+0x17c>)
 8005e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                              void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005e92:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <ISM330DHCX_0_Probe+0x168>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <ISM330DHCX_0_Probe+0x164>)
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <ISM330DHCX_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ea6:	f06f 0304 	mvn.w	r3, #4
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	e001      	b.n	8005eb2 <ISM330DHCX_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <ISM330DHCX_0_Probe+0x138>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <ISM330DHCX_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ec2:	f06f 0304 	mvn.w	r3, #4
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3750      	adds	r7, #80	; 0x50
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08001779 	.word	0x08001779
 8005ed8:	080017f5 	.word	0x080017f5
 8005edc:	080018a9 	.word	0x080018a9
 8005ee0:	08001845 	.word	0x08001845
 8005ee4:	0800190d 	.word	0x0800190d
 8005ee8:	0800689d 	.word	0x0800689d
 8005eec:	20000328 	.word	0x20000328
 8005ef0:	2000031c 	.word	0x2000031c
 8005ef4:	200002e0 	.word	0x200002e0
 8005ef8:	20000310 	.word	0x20000310
 8005efc:	2000006c 	.word	0x2000006c
 8005f00:	200000c4 	.word	0x200000c4
 8005f04:	200002ec 	.word	0x200002ec
 8005f08:	200000a0 	.word	0x200000a0
 8005f0c:	2000007c 	.word	0x2000007c

08005f10 <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b094      	sub	sp, #80	; 0x50
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8005f20:	2333      	movs	r3, #51	; 0x33
 8005f22:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005f26:	4b42      	ldr	r3, [pc, #264]	; (8006030 <IIS2DLPC_0_Probe+0x120>)
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <IIS2DLPC_0_Probe+0x124>)
 8005f2c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <IIS2DLPC_0_Probe+0x128>)
 8005f30:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005f32:	4b42      	ldr	r3, [pc, #264]	; (800603c <IIS2DLPC_0_Probe+0x12c>)
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005f36:	4b42      	ldr	r3, [pc, #264]	; (8006040 <IIS2DLPC_0_Probe+0x130>)
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 8005f3a:	4b42      	ldr	r3, [pc, #264]	; (8006044 <IIS2DLPC_0_Probe+0x134>)
 8005f3c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 8005f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f42:	4619      	mov	r1, r3
 8005f44:	4840      	ldr	r0, [pc, #256]	; (8006048 <IIS2DLPC_0_Probe+0x138>)
 8005f46:	f7fb ff21 	bl	8001d8c <IIS2DLPC_RegisterBusIO>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <IIS2DLPC_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f50:	f06f 0306 	mvn.w	r3, #6
 8005f54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f56:	e065      	b.n	8006024 <IIS2DLPC_0_Probe+0x114>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 8005f58:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	483a      	ldr	r0, [pc, #232]	; (8006048 <IIS2DLPC_0_Probe+0x138>)
 8005f60:	f7fc f802 	bl	8001f68 <IIS2DLPC_ReadID>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <IIS2DLPC_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f6a:	f06f 0306 	mvn.w	r3, #6
 8005f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f70:	e058      	b.n	8006024 <IIS2DLPC_0_Probe+0x114>
  }
  else if (id != IIS2DLPC_ID)
 8005f72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f76:	2b44      	cmp	r3, #68	; 0x44
 8005f78:	d003      	beq.n	8005f82 <IIS2DLPC_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f7a:	f06f 0306 	mvn.w	r3, #6
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	e050      	b.n	8006024 <IIS2DLPC_0_Probe+0x114>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4619      	mov	r1, r3
 8005f88:	482f      	ldr	r0, [pc, #188]	; (8006048 <IIS2DLPC_0_Probe+0x138>)
 8005f8a:	f7fc f803 	bl	8001f94 <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	461a      	mov	r2, r3
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	431a      	orrs	r2, r3
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	4a2b      	ldr	r2, [pc, #172]	; (800604c <IIS2DLPC_0_Probe+0x13c>)
 8005fa0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <IIS2DLPC_0_Probe+0x140>)
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <IIS2DLPC_0_Probe+0x138>)
 8005fa6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 8005fa8:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <IIS2DLPC_0_Probe+0x144>)
 8005faa:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <IIS2DLPC_0_Probe+0x148>)
 8005fac:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <IIS2DLPC_0_Probe+0xba>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <IIS2DLPC_0_Probe+0xba>
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <IIS2DLPC_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fc4:	f06f 0304 	mvn.w	r3, #4
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11e      	bne.n	800600e <IIS2DLPC_0_Probe+0xfe>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <IIS2DLPC_0_Probe+0xfe>
 8005fda:	7b3b      	ldrb	r3, [r7, #12]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d116      	bne.n	800600e <IIS2DLPC_0_Probe+0xfe>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <IIS2DLPC_0_Probe+0x14c>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <IIS2DLPC_0_Probe+0x150>)
 8005fe6:	3303      	adds	r3, #3
 8005fe8:	491e      	ldr	r1, [pc, #120]	; (8006064 <IIS2DLPC_0_Probe+0x154>)
 8005fea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <IIS2DLPC_0_Probe+0x144>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <IIS2DLPC_0_Probe+0x140>)
 8005ff6:	6852      	ldr	r2, [r2, #4]
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <IIS2DLPC_0_Probe+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006002:	f06f 0304 	mvn.w	r3, #4
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	e001      	b.n	800600e <IIS2DLPC_0_Probe+0xfe>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800600a:	2300      	movs	r3, #0
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <IIS2DLPC_0_Probe+0x114>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <IIS2DLPC_0_Probe+0x114>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800601e:	f06f 0304 	mvn.w	r3, #4
 8006022:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006026:	4618      	mov	r0, r3
 8006028:	3750      	adds	r7, #80	; 0x50
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	08001779 	.word	0x08001779
 8006034:	080017f5 	.word	0x080017f5
 8006038:	080018a9 	.word	0x080018a9
 800603c:	08001845 	.word	0x08001845
 8006040:	0800190d 	.word	0x0800190d
 8006044:	0800689d 	.word	0x0800689d
 8006048:	20000360 	.word	0x20000360
 800604c:	2000031c 	.word	0x2000031c
 8006050:	200002e0 	.word	0x200002e0
 8006054:	20000310 	.word	0x20000310
 8006058:	20000004 	.word	0x20000004
 800605c:	200000c4 	.word	0x200000c4
 8006060:	200002ec 	.word	0x200002ec
 8006064:	20000014 	.word	0x20000014

08006068 <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b094      	sub	sp, #80	; 0x50
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006070:	2300      	movs	r3, #0
 8006072:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006074:	2300      	movs	r3, #0
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006078:	233d      	movs	r3, #61	; 0x3d
 800607a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 800607e:	4b42      	ldr	r3, [pc, #264]	; (8006188 <IIS2MDC_0_Probe+0x120>)
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8006082:	4b42      	ldr	r3, [pc, #264]	; (800618c <IIS2MDC_0_Probe+0x124>)
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8006086:	4b42      	ldr	r3, [pc, #264]	; (8006190 <IIS2MDC_0_Probe+0x128>)
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 800608a:	4b42      	ldr	r3, [pc, #264]	; (8006194 <IIS2MDC_0_Probe+0x12c>)
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 800608e:	4b42      	ldr	r3, [pc, #264]	; (8006198 <IIS2MDC_0_Probe+0x130>)
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 8006092:	4b42      	ldr	r3, [pc, #264]	; (800619c <IIS2MDC_0_Probe+0x134>)
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800609a:	4619      	mov	r1, r3
 800609c:	4840      	ldr	r0, [pc, #256]	; (80061a0 <IIS2MDC_0_Probe+0x138>)
 800609e:	f7fd f8c1 	bl	8003224 <IIS2MDC_RegisterBusIO>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <IIS2MDC_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060a8:	f06f 0306 	mvn.w	r3, #6
 80060ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ae:	e065      	b.n	800617c <IIS2MDC_0_Probe+0x114>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 80060b0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80060b4:	4619      	mov	r1, r3
 80060b6:	483a      	ldr	r0, [pc, #232]	; (80061a0 <IIS2MDC_0_Probe+0x138>)
 80060b8:	f7fd f96f 	bl	800339a <IIS2MDC_ReadID>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <IIS2MDC_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060c2:	f06f 0306 	mvn.w	r3, #6
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c8:	e058      	b.n	800617c <IIS2MDC_0_Probe+0x114>
  }
  else if (id != IIS2MDC_ID)
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d003      	beq.n	80060da <IIS2MDC_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060d2:	f06f 0306 	mvn.w	r3, #6
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d8:	e050      	b.n	800617c <IIS2MDC_0_Probe+0x114>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	4619      	mov	r1, r3
 80060e0:	482f      	ldr	r0, [pc, #188]	; (80061a0 <IIS2MDC_0_Probe+0x138>)
 80060e2:	f7fd f971 	bl	80033c8 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	461a      	mov	r2, r3
 80060ea:	7b3b      	ldrb	r3, [r7, #12]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	431a      	orrs	r2, r3
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4313      	orrs	r3, r2
 80060f6:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <IIS2MDC_0_Probe+0x13c>)
 80060f8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 80060fa:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <IIS2MDC_0_Probe+0x140>)
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <IIS2MDC_0_Probe+0x138>)
 80060fe:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <IIS2MDC_0_Probe+0x144>)
 8006102:	4a2b      	ldr	r2, [pc, #172]	; (80061b0 <IIS2MDC_0_Probe+0x148>)
 8006104:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <IIS2MDC_0_Probe+0xba>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <IIS2MDC_0_Probe+0xba>
 8006116:	7b7b      	ldrb	r3, [r7, #13]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <IIS2MDC_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800611c:	f06f 0304 	mvn.w	r3, #4
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <IIS2MDC_0_Probe+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <IIS2MDC_0_Probe+0xd6>
 8006132:	7b3b      	ldrb	r3, [r7, #12]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d102      	bne.n	800613e <IIS2MDC_0_Probe+0xd6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006138:	f06f 0304 	mvn.w	r3, #4
 800613c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800613e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11b      	bne.n	800617c <IIS2MDC_0_Probe+0x114>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <IIS2MDC_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800614e:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <IIS2MDC_0_Probe+0x14c>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <IIS2MDC_0_Probe+0x150>)
 8006154:	3306      	adds	r3, #6
 8006156:	4919      	ldr	r1, [pc, #100]	; (80061bc <IIS2MDC_0_Probe+0x154>)
 8006158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <IIS2MDC_0_Probe+0x144>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a11      	ldr	r2, [pc, #68]	; (80061a8 <IIS2MDC_0_Probe+0x140>)
 8006164:	6892      	ldr	r2, [r2, #8]
 8006166:	4610      	mov	r0, r2
 8006168:	4798      	blx	r3
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <IIS2MDC_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006170:	f06f 0304 	mvn.w	r3, #4
 8006174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006176:	e001      	b.n	800617c <IIS2MDC_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006178:	2300      	movs	r3, #0
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
  }
  return ret;
 800617c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800617e:	4618      	mov	r0, r3
 8006180:	3750      	adds	r7, #80	; 0x50
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	08001779 	.word	0x08001779
 800618c:	080017f5 	.word	0x080017f5
 8006190:	080018a9 	.word	0x080018a9
 8006194:	08001845 	.word	0x08001845
 8006198:	0800190d 	.word	0x0800190d
 800619c:	0800689d 	.word	0x0800689d
 80061a0:	2000039c 	.word	0x2000039c
 80061a4:	2000031c 	.word	0x2000031c
 80061a8:	200002e0 	.word	0x200002e0
 80061ac:	20000310 	.word	0x20000310
 80061b0:	20000038 	.word	0x20000038
 80061b4:	200000c4 	.word	0x200000c4
 80061b8:	200002ec 	.word	0x200002ec
 80061bc:	20000048 	.word	0x20000048

080061c0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <BSP_LED_Init+0x20>)
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	08014798 	.word	0x08014798

080061e4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ea:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 80061ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f0:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 80061fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 800621a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621e:	4a11      	ldr	r2, [pc, #68]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <LED_USER_GPIO_Init+0x80>)
 800622a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8006236:	2200      	movs	r2, #0
 8006238:	2120      	movs	r1, #32
 800623a:	480b      	ldr	r0, [pc, #44]	; (8006268 <LED_USER_GPIO_Init+0x84>)
 800623c:	f003 f856 	bl	80092ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8006240:	2320      	movs	r3, #32
 8006242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006244:	2301      	movs	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800624c:	2300      	movs	r3, #0
 800624e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	4619      	mov	r1, r3
 8006256:	4804      	ldr	r0, [pc, #16]	; (8006268 <LED_USER_GPIO_Init+0x84>)
 8006258:	f002 fe22 	bl	8008ea0 <HAL_GPIO_Init>

}
 800625c:	bf00      	nop
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	44020c00 	.word	0x44020c00
 8006268:	42020000 	.word	0x42020000

0800626c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	460a      	mov	r2, r1
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	4613      	mov	r3, r2
 800627a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	4a22      	ldr	r2, [pc, #136]	; (800630c <BSP_PB_Init+0xa0>)
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800628a:	79bb      	ldrb	r3, [r7, #6]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d138      	bne.n	8006302 <BSP_PB_Init+0x96>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006290:	79fa      	ldrb	r2, [r7, #7]
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <BSP_PB_Init+0xa4>)
 800629c:	441a      	add	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	491c      	ldr	r1, [pc, #112]	; (8006314 <BSP_PB_Init+0xa8>)
 80062a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f002 fde4 	bl	8008e76 <HAL_EXTI_GetHandle>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80062b4:	f06f 0303 	mvn.w	r3, #3
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e022      	b.n	8006302 <BSP_PB_Init+0x96>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4a12      	ldr	r2, [pc, #72]	; (8006310 <BSP_PB_Init+0xa4>)
 80062c8:	1898      	adds	r0, r3, r2
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	4a12      	ldr	r2, [pc, #72]	; (8006318 <BSP_PB_Init+0xac>)
 80062ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d2:	461a      	mov	r2, r3
 80062d4:	2100      	movs	r1, #0
 80062d6:	f002 fda2 	bl	8008e1e <HAL_EXTI_RegisterCallback>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <BSP_PB_Init+0x7c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80062e0:	f06f 0303 	mvn.w	r3, #3
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e00c      	b.n	8006302 <BSP_PB_Init+0x96>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80062e8:	2018      	movs	r0, #24
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <BSP_PB_Init+0xb0>)
 80062ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f2:	2200      	movs	r2, #0
 80062f4:	4619      	mov	r1, r3
 80062f6:	f001 fb22 	bl	800793e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80062fa:	2318      	movs	r3, #24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fb38 	bl	8007972 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	0801479c 	.word	0x0801479c
 8006310:	200000dc 	.word	0x200000dc
 8006314:	080147a0 	.word	0x080147a0
 8006318:	080147a4 	.word	0x080147a4
 800631c:	080147a8 	.word	0x080147a8

08006320 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <BSP_PB_GetState+0x34>)
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f002 ffbf 	bl	80092bc <HAL_GPIO_ReadPin>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	bf0c      	ite	eq
 8006344:	2301      	moveq	r3, #1
 8006346:	2300      	movne	r3, #0
 8006348:	b2db      	uxtb	r3, r3
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200000d8 	.word	0x200000d8

08006358 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800635c:	2000      	movs	r0, #0
 800635e:	f00b fd0d 	bl	8011d7c <BSP_PB_Callback>
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800636e:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006374:	4a19      	ldr	r2, [pc, #100]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800638c:	f107 030c 	add.w	r3, r7, #12
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800639c:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 800639e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a2:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <BUTTON_USER_GPIO_Init+0x74>)
 80063ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80063ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <BUTTON_USER_GPIO_Init+0x78>)
 80063c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80063c8:	f107 030c 	add.w	r3, r7, #12
 80063cc:	4619      	mov	r1, r3
 80063ce:	4805      	ldr	r0, [pc, #20]	; (80063e4 <BUTTON_USER_GPIO_Init+0x7c>)
 80063d0:	f002 fd66 	bl	8008ea0 <HAL_GPIO_Init>

}
 80063d4:	bf00      	nop
 80063d6:	3720      	adds	r7, #32
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	44020c00 	.word	0x44020c00
 80063e0:	10110000 	.word	0x10110000
 80063e4:	42020800 	.word	0x42020800

080063e8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d903      	bls.n	8006404 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80063fc:	f06f 0301 	mvn.w	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e022      	b.n	800644a <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8006404:	79fa      	ldrb	r2, [r7, #7]
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	4912      	ldr	r1, [pc, #72]	; (8006454 <BSP_COM_Init+0x6c>)
 800640a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800640e:	4912      	ldr	r1, [pc, #72]	; (8006458 <BSP_COM_Init+0x70>)
 8006410:	2094      	movs	r0, #148	; 0x94
 8006412:	fb00 f303 	mul.w	r3, r0, r3
 8006416:	440b      	add	r3, r1
 8006418:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2294      	movs	r2, #148	; 0x94
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	4a0d      	ldr	r2, [pc, #52]	; (8006458 <BSP_COM_Init+0x70>)
 8006424:	4413      	add	r3, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f886 	bl	8006538 <USART3_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	2294      	movs	r2, #148	; 0x94
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	4a08      	ldr	r2, [pc, #32]	; (8006458 <BSP_COM_Init+0x70>)
 8006436:	4413      	add	r3, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f80f 	bl	800645c <MX_USART3_UART_Init>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006444:	f06f 0303 	mvn.w	r3, #3
 8006448:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800644a:	68fb      	ldr	r3, [r7, #12]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200000e8 	.word	0x200000e8
 8006458:	200003d0 	.word	0x200003d0

0800645c <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART3;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <MX_USART3_UART_Init+0xa0>)
 800646c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006474:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	220c      	movs	r2, #12
 800648c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f00a f9fd 	bl	80108ac <HAL_UART_Init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_USART3_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064bc:	2100      	movs	r1, #0
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f00b fa7f 	bl	80119c2 <HAL_UARTEx_SetTxFifoThreshold>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <MX_USART3_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f00b fab4 	bl	8011a3e <HAL_UARTEx_SetRxFifoThreshold>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_USART3_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f00b fa35 	bl	8011950 <HAL_UARTEx_DisableFifoMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_USART3_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40004800 	.word	0x40004800

08006500 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <__io_putchar+0x30>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	2394      	movs	r3, #148	; 0x94
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	4a07      	ldr	r2, [pc, #28]	; (8006534 <__io_putchar+0x34>)
 8006516:	1898      	adds	r0, r3, r2
 8006518:	1d39      	adds	r1, r7, #4
 800651a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800651e:	2201      	movs	r2, #1
 8006520:	f00a fa1e 	bl	8010960 <HAL_UART_Transmit>
  return ch;
 8006524:	687b      	ldr	r3, [r7, #4]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000464 	.word	0x20000464
 8006534:	200003d0 	.word	0x200003d0

08006538 <USART3_MspInit>:
DMA_NodeTypeDef Node_GPDMA1_Channel0;
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b0e8      	sub	sp, #416	; 0x1a0
 800653c:	af00      	add	r7, sp, #0
 800653e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006542:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006546:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006548:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800654c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006550:	4618      	mov	r0, r3
 8006552:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006556:	461a      	mov	r2, r3
 8006558:	2100      	movs	r1, #0
 800655a:	f00c f86e 	bl	801263a <memset>
  DMA_NodeConfTypeDef NodeConfig;
  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800655e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006562:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8006566:	f04f 0204 	mov.w	r2, #4
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006572:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006576:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800657a:	2200      	movs	r2, #0
 800657c:	665a      	str	r2, [r3, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800657e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006582:	4618      	mov	r0, r3
 8006584:	f004 fcea 	bl	800af5c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006588:	4b80      	ldr	r3, [pc, #512]	; (800678c <USART3_MspInit+0x254>)
 800658a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800658e:	4a7f      	ldr	r2, [pc, #508]	; (800678c <USART3_MspInit+0x254>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006594:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006598:	4b7c      	ldr	r3, [pc, #496]	; (800678c <USART3_MspInit+0x254>)
 800659a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659e:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80065a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80065a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80065b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80065b4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065b6:	4b75      	ldr	r3, [pc, #468]	; (800678c <USART3_MspInit+0x254>)
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065bc:	4a73      	ldr	r2, [pc, #460]	; (800678c <USART3_MspInit+0x254>)
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065c6:	4b71      	ldr	r3, [pc, #452]	; (800678c <USART3_MspInit+0x254>)
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065cc:	f003 0208 	and.w	r2, r3, #8
 80065d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80065d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80065de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80065e2:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 80065e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ec:	2302      	movs	r3, #2
 80065ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 80065fe:	2307      	movs	r3, #7
 8006600:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 8006604:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006608:	4619      	mov	r1, r3
 800660a:	4861      	ldr	r0, [pc, #388]	; (8006790 <USART3_MspInit+0x258>)
 800660c:	f002 fc48 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 8006610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006614:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006618:	2302      	movs	r3, #2
 800661a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661e:	2300      	movs	r3, #0
 8006620:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 800662a:	2307      	movs	r3, #7
 800662c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 8006630:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006634:	4619      	mov	r1, r3
 8006636:	4856      	ldr	r0, [pc, #344]	; (8006790 <USART3_MspInit+0x258>)
 8006638:	f002 fc32 	bl	8008ea0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800663c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006640:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006644:	2221      	movs	r2, #33	; 0x21
 8006646:	601a      	str	r2, [r3, #0]
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8006648:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800664c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006650:	2219      	movs	r2, #25
 8006652:	605a      	str	r2, [r3, #4]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8006654:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006658:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006660:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006664:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006668:	2200      	movs	r2, #0
 800666a:	60da      	str	r2, [r3, #12]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800666c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006670:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8006678:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800667c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006680:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006684:	615a      	str	r2, [r3, #20]
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8006686:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800668a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800668e:	2200      	movs	r2, #0
 8006690:	619a      	str	r2, [r3, #24]
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8006692:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006696:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800669a:	2200      	movs	r2, #0
 800669c:	61da      	str	r2, [r3, #28]
    NodeConfig.Init.SrcBurstLength = 1;
 800669e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066a6:	2201      	movs	r2, #1
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24
    NodeConfig.Init.DestBurstLength = 1;
 80066aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066b2:	2201      	movs	r2, #1
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80066b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066be:	2200      	movs	r2, #0
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80066c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
    NodeConfig.Init.Mode = DMA_NORMAL;
 80066ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066d6:	2200      	movs	r2, #0
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80066da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066e2:	2200      	movs	r2, #0
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80066e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066ee:	2200      	movs	r2, #0
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80066f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80066f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066fa:	2200      	movs	r2, #0
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0);
 80066fe:	f107 0314 	add.w	r3, r7, #20
 8006702:	4924      	ldr	r1, [pc, #144]	; (8006794 <USART3_MspInit+0x25c>)
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fdc9 	bl	800829c <HAL_DMAEx_List_BuildNode>

    HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0);
 800670a:	4a22      	ldr	r2, [pc, #136]	; (8006794 <USART3_MspInit+0x25c>)
 800670c:	2100      	movs	r1, #0
 800670e:	4822      	ldr	r0, [pc, #136]	; (8006798 <USART3_MspInit+0x260>)
 8006710:	f001 fdda 	bl	80082c8 <HAL_DMAEx_List_InsertNode>

    HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0);
 8006714:	4820      	ldr	r0, [pc, #128]	; (8006798 <USART3_MspInit+0x260>)
 8006716:	f001 fea0 	bl	800845a <HAL_DMAEx_List_SetCircularMode>

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <USART3_MspInit+0x264>)
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <USART3_MspInit+0x268>)
 800671e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8006720:	4b1e      	ldr	r3, [pc, #120]	; (800679c <USART3_MspInit+0x264>)
 8006722:	2200      	movs	r2, #0
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <USART3_MspInit+0x264>)
 8006728:	2200      	movs	r2, #0
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800672c:	4b1b      	ldr	r3, [pc, #108]	; (800679c <USART3_MspInit+0x264>)
 800672e:	2200      	movs	r2, #0
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8006732:	4b1a      	ldr	r3, [pc, #104]	; (800679c <USART3_MspInit+0x264>)
 8006734:	2200      	movs	r2, #0
 8006736:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8006738:	4b18      	ldr	r3, [pc, #96]	; (800679c <USART3_MspInit+0x264>)
 800673a:	2281      	movs	r2, #129	; 0x81
 800673c:	649a      	str	r2, [r3, #72]	; 0x48
    HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0);
 800673e:	4817      	ldr	r0, [pc, #92]	; (800679c <USART3_MspInit+0x264>)
 8006740:	f001 fc80 	bl	8008044 <HAL_DMAEx_List_Init>

    HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0);
 8006744:	4914      	ldr	r1, [pc, #80]	; (8006798 <USART3_MspInit+0x260>)
 8006746:	4815      	ldr	r0, [pc, #84]	; (800679c <USART3_MspInit+0x264>)
 8006748:	f001 fee8 	bl	800851c <HAL_DMAEx_List_LinkQ>

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 800674c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006750:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a11      	ldr	r2, [pc, #68]	; (800679c <USART3_MspInit+0x264>)
 8006758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800675c:	4a0f      	ldr	r2, [pc, #60]	; (800679c <USART3_MspInit+0x264>)
 800675e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006762:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	65d3      	str	r3, [r2, #92]	; 0x5c

    HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV);
 800676a:	2110      	movs	r1, #16
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <USART3_MspInit+0x264>)
 800676e:	f001 fc2c 	bl	8007fca <HAL_DMA_ConfigChannelAttributes>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006772:	2200      	movs	r2, #0
 8006774:	2100      	movs	r1, #0
 8006776:	203c      	movs	r0, #60	; 0x3c
 8006778:	f001 f8e1 	bl	800793e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800677c:	203c      	movs	r0, #60	; 0x3c
 800677e:	f001 f8f8 	bl	8007972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 8006782:	bf00      	nop
 8006784:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	44020c00 	.word	0x44020c00
 8006790:	42020c00 	.word	0x42020c00
 8006794:	20000468 	.word	0x20000468
 8006798:	2000048c 	.word	0x2000048c
 800679c:	200004a4 	.word	0x200004a4
 80067a0:	40020050 	.word	0x40020050

080067a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a8:	2003      	movs	r0, #3
 80067aa:	f001 f8bd 	bl	8007928 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80067ae:	f004 fa4b 	bl	800ac48 <HAL_RCC_GetSysClockFreq>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <HAL_Init+0x40>)
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	490a      	ldr	r1, [pc, #40]	; (80067e8 <HAL_Init+0x44>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	4a09      	ldr	r2, [pc, #36]	; (80067ec <HAL_Init+0x48>)
 80067c6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067c8:	200f      	movs	r0, #15
 80067ca:	f000 f811 	bl	80067f0 <HAL_InitTick>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e002      	b.n	80067de <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80067d8:	f7fa fe23 	bl	8001422 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	44020c00 	.word	0x44020c00
 80067e8:	08014780 	.word	0x08014780
 80067ec:	20000000 	.word	0x20000000

080067f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <HAL_InitTick+0x60>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e021      	b.n	8006848 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006804:	4b13      	ldr	r3, [pc, #76]	; (8006854 <HAL_InitTick+0x64>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_InitTick+0x60>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	4619      	mov	r1, r3
 800680e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006812:	fbb3 f3f1 	udiv	r3, r3, r1
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	4618      	mov	r0, r3
 800681c:	f001 f8b7 	bl	800798e <HAL_SYSTICK_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e00e      	b.n	8006848 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b0f      	cmp	r3, #15
 800682e:	d80a      	bhi.n	8006846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006830:	2200      	movs	r2, #0
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	f001 f881 	bl	800793e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800683c:	4a06      	ldr	r2, [pc, #24]	; (8006858 <HAL_InitTick+0x68>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e000      	b.n	8006848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200000f0 	.word	0x200000f0
 8006854:	20000000 	.word	0x20000000
 8006858:	200000ec 	.word	0x200000ec

0800685c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_IncTick+0x20>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_IncTick+0x24>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4413      	add	r3, r2
 800686c:	4a04      	ldr	r2, [pc, #16]	; (8006880 <HAL_IncTick+0x24>)
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	200000f0 	.word	0x200000f0
 8006880:	2000051c 	.word	0x2000051c

08006884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return uwTick;
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <HAL_GetTick+0x14>)
 800688a:	681b      	ldr	r3, [r3, #0]
}
 800688c:	4618      	mov	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000051c 	.word	0x2000051c

0800689c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068a4:	f7ff ffee 	bl	8006884 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d005      	beq.n	80068c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <HAL_Delay+0x44>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068c2:	bf00      	nop
 80068c4:	f7ff ffde 	bl	8006884 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d8f7      	bhi.n	80068c4 <HAL_Delay+0x28>
  {
  }
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200000f0 	.word	0x200000f0

080068e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	609a      	str	r2, [r3, #8]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800695a:	f043 0201 	orr.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8006978:	4b06      	ldr	r3, [pc, #24]	; (8006994 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800697a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800697e:	4a05      	ldr	r2, [pc, #20]	; (8006994 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	42028000 	.word	0x42028000

08006998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3360      	adds	r3, #96	; 0x60
 80069aa:	461a      	mov	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <LL_ADC_SetOffset+0x44>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	03fff000 	.word	0x03fff000

080069e0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3360      	adds	r3, #96	; 0x60
 80069ee:	461a      	mov	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3360      	adds	r3, #96	; 0x60
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3360      	adds	r3, #96	; 0x60
 8006a52:	461a      	mov	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3360      	adds	r3, #96	; 0x60
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	615a      	str	r2, [r3, #20]
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3330      	adds	r3, #48	; 0x30
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f003 030c 	and.w	r3, r3, #12
 8006af0:	4413      	add	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	211f      	movs	r1, #31
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	0e9b      	lsrs	r3, r3, #26
 8006b0c:	f003 011f 	and.w	r1, r3, #31
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b20:	bf00      	nop
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	0e5b      	lsrs	r3, r3, #25
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	0d1b      	lsrs	r3, r3, #20
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2107      	movs	r1, #7
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	401a      	ands	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0d1b      	lsrs	r3, r3, #20
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b70:	431a      	orrs	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f003 0318 	and.w	r3, r3, #24
 8006ba6:	4908      	ldr	r1, [pc, #32]	; (8006bc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ba8:	40d9      	lsrs	r1, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	400b      	ands	r3, r1
 8006bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	000fffff 	.word	0x000fffff

08006bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6093      	str	r3, [r2, #8]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d101      	bne.n	8006c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c54:	d101      	bne.n	8006c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <LL_ADC_IsEnabled+0x18>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <LL_ADC_IsEnabled+0x1a>
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d101      	bne.n	8006ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d101      	bne.n	8006ccc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e136      	b.n	8006f64 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d109      	bne.n	8006d18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa fb93 	bl	8001430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff ff67 	bl	8006bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ff4d 	bl	8006bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ff82 	bl	8006c40 <LL_ADC_IsInternalRegulatorEnabled>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d115      	bne.n	8006d6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff ff66 	bl	8006c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d4c:	4b87      	ldr	r3, [pc, #540]	; (8006f6c <HAL_ADC_Init+0x290>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	4a87      	ldr	r2, [pc, #540]	; (8006f70 <HAL_ADC_Init+0x294>)
 8006d54:	fba2 2303 	umull	r2, r3, r2, r3
 8006d58:	099b      	lsrs	r3, r3, #6
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d60:	e002      	b.n	8006d68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f9      	bne.n	8006d62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff64 	bl	8006c40 <LL_ADC_IsInternalRegulatorEnabled>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	f043 0210 	orr.w	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff75 	bl	8006c8e <LL_ADC_REG_IsConversionOngoing>
 8006da4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80cf 	bne.w	8006f52 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 80cb 	bne.w	8006f52 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006dc4:	f043 0202 	orr.w	r2, r3, #2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff ff49 	bl	8006c68 <LL_ADC_IsEnabled>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d110      	bne.n	8006dfe <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ddc:	4865      	ldr	r0, [pc, #404]	; (8006f74 <HAL_ADC_Init+0x298>)
 8006dde:	f7ff ff43 	bl	8006c68 <LL_ADC_IsEnabled>
 8006de2:	4604      	mov	r4, r0
 8006de4:	4864      	ldr	r0, [pc, #400]	; (8006f78 <HAL_ADC_Init+0x29c>)
 8006de6:	f7ff ff3f 	bl	8006c68 <LL_ADC_IsEnabled>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4323      	orrs	r3, r4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4619      	mov	r1, r3
 8006df8:	4860      	ldr	r0, [pc, #384]	; (8006f7c <HAL_ADC_Init+0x2a0>)
 8006dfa:	f7ff fd73 	bl	80068e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7e5b      	ldrb	r3, [r3, #25]
 8006e02:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e08:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006e0e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006e14:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e1c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d106      	bne.n	8006e3a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	3b01      	subs	r3, #1
 8006e32:	045b      	lsls	r3, r3, #17
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	4b48      	ldr	r3, [pc, #288]	; (8006f80 <HAL_ADC_Init+0x2a4>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	430b      	orrs	r3, r1
 8006e68:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff15 	bl	8006cb4 <LL_ADC_INJ_IsConversionOngoing>
 8006e8a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d13d      	bne.n	8006f0e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d13a      	bne.n	8006f0e <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7e1b      	ldrb	r3, [r3, #24]
 8006e9c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ea4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb4:	f023 0302 	bic.w	r3, r3, #2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d118      	bne.n	8006efe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed6:	f023 0304 	bic.w	r3, r3, #4
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ee2:	4311      	orrs	r1, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	611a      	str	r2, [r3, #16]
 8006efc:	e007      	b.n	8006f0e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d10c      	bne.n	8006f30 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	f023 010f 	bic.w	r1, r3, #15
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	1e5a      	subs	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f2e:	e007      	b.n	8006f40 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 020f 	bic.w	r2, r2, #15
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	f043 0201 	orr.w	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f50:	e007      	b.n	8006f62 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f56:	f043 0210 	orr.w	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3724      	adds	r7, #36	; 0x24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd90      	pop	{r4, r7, pc}
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	053e2d63 	.word	0x053e2d63
 8006f74:	42028000 	.word	0x42028000
 8006f78:	42028100 	.word	0x42028100
 8006f7c:	42028300 	.word	0x42028300
 8006f80:	fff04007 	.word	0xfff04007

08006f84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b0b6      	sub	sp, #216	; 0xd8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_ADC_ConfigChannel+0x22>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e3d8      	b.n	8007758 <HAL_ADC_ConfigChannel+0x7d4>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fe6b 	bl	8006c8e <LL_ADC_REG_IsConversionOngoing>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 83bd 	bne.w	800773a <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d104      	bne.n	8006fd2 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fccf 	bl	8006970 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7ff fd78 	bl	8006ad4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fe50 	bl	8006c8e <LL_ADC_REG_IsConversionOngoing>
 8006fee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fe5c 	bl	8006cb4 <LL_ADC_INJ_IsConversionOngoing>
 8006ffc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007000:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 81d9 	bne.w	80073bc <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800700a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 81d4 	bne.w	80073bc <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800701c:	d10f      	bne.n	800703e <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	4619      	mov	r1, r3
 800702a:	f7ff fd7f 	bl	8006b2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fd39 	bl	8006aae <LL_ADC_SetSamplingTimeCommonConfig>
 800703c:	e00e      	b.n	800705c <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	461a      	mov	r2, r3
 800704c:	f7ff fd6e 	bl	8006b2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fd29 	bl	8006aae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	08db      	lsrs	r3, r3, #3
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b04      	cmp	r3, #4
 800707c:	d022      	beq.n	80070c4 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6919      	ldr	r1, [r3, #16]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800708e:	f7ff fc83 	bl	8006998 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6919      	ldr	r1, [r3, #16]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7ff fccf 	bl	8006a42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d102      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x136>
 80070b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070b8:	e000      	b.n	80070bc <HAL_ADC_ConfigChannel+0x138>
 80070ba:	2300      	movs	r3, #0
 80070bc:	461a      	mov	r2, r3
 80070be:	f7ff fcdb 	bl	8006a78 <LL_ADC_SetOffsetSaturation>
 80070c2:	e17b      	b.n	80073bc <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fc88 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <HAL_ADC_ConfigChannel+0x16c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fc7d 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 80070e6:	4603      	mov	r3, r0
 80070e8:	0e9b      	lsrs	r3, r3, #26
 80070ea:	f003 021f 	and.w	r2, r3, #31
 80070ee:	e01e      	b.n	800712e <HAL_ADC_ConfigChannel+0x1aa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fc72 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007106:	fa93 f3a3 	rbit	r3, r3
 800710a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800710e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8007116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800711e:	2320      	movs	r3, #32
 8007120:	e004      	b.n	800712c <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8007122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007126:	fab3 f383 	clz	r3, r3
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007136:	2b00      	cmp	r3, #0
 8007138:	d105      	bne.n	8007146 <HAL_ADC_ConfigChannel+0x1c2>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	0e9b      	lsrs	r3, r3, #26
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	e018      	b.n	8007178 <HAL_ADC_ConfigChannel+0x1f4>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007152:	fa93 f3a3 	rbit	r3, r3
 8007156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800715a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800715e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800716a:	2320      	movs	r3, #32
 800716c:	e004      	b.n	8007178 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800716e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007172:	fab3 f383 	clz	r3, r3
 8007176:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007178:	429a      	cmp	r2, r3
 800717a:	d106      	bne.n	800718a <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2200      	movs	r2, #0
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fc41 	bl	8006a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2101      	movs	r1, #1
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fc25 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 8007196:	4603      	mov	r3, r0
 8007198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x232>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2101      	movs	r1, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fc1a 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 80071ac:	4603      	mov	r3, r0
 80071ae:	0e9b      	lsrs	r3, r3, #26
 80071b0:	f003 021f 	and.w	r2, r3, #31
 80071b4:	e01e      	b.n	80071f4 <HAL_ADC_ConfigChannel+0x270>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2101      	movs	r1, #1
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fc0f 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071cc:	fa93 f3a3 	rbit	r3, r3
 80071d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80071d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80071e4:	2320      	movs	r3, #32
 80071e6:	e004      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80071e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ec:	fab3 f383 	clz	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <HAL_ADC_ConfigChannel+0x288>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	0e9b      	lsrs	r3, r3, #26
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	e018      	b.n	800723e <HAL_ADC_ConfigChannel+0x2ba>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007218:	fa93 f3a3 	rbit	r3, r3
 800721c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007220:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8007230:	2320      	movs	r3, #32
 8007232:	e004      	b.n	800723e <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8007234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007238:	fab3 f383 	clz	r3, r3
 800723c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800723e:	429a      	cmp	r2, r3
 8007240:	d106      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fbde 	bl	8006a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2102      	movs	r1, #2
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fbc2 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 800725c:	4603      	mov	r3, r0
 800725e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <HAL_ADC_ConfigChannel+0x2f8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fbb7 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 8007272:	4603      	mov	r3, r0
 8007274:	0e9b      	lsrs	r3, r3, #26
 8007276:	f003 021f 	and.w	r2, r3, #31
 800727a:	e01e      	b.n	80072ba <HAL_ADC_ConfigChannel+0x336>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2102      	movs	r1, #2
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fbac 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 8007288:	4603      	mov	r3, r0
 800728a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800728e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007292:	fa93 f3a3 	rbit	r3, r3
 8007296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800729a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800729e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80072a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80072aa:	2320      	movs	r3, #32
 80072ac:	e004      	b.n	80072b8 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80072ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072b2:	fab3 f383 	clz	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <HAL_ADC_ConfigChannel+0x34e>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	0e9b      	lsrs	r3, r3, #26
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	e016      	b.n	8007300 <HAL_ADC_ConfigChannel+0x37c>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072de:	fa93 f3a3 	rbit	r3, r3
 80072e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80072e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80072ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80072f2:	2320      	movs	r3, #32
 80072f4:	e004      	b.n	8007300 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80072f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072fa:	fab3 f383 	clz	r3, r3
 80072fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007300:	429a      	cmp	r2, r3
 8007302:	d106      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	2102      	movs	r1, #2
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fb7d 	bl	8006a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2103      	movs	r1, #3
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fb61 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 800731e:	4603      	mov	r3, r0
 8007320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_ADC_ConfigChannel+0x3ba>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2103      	movs	r1, #3
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fb56 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 8007334:	4603      	mov	r3, r0
 8007336:	0e9b      	lsrs	r3, r3, #26
 8007338:	f003 021f 	and.w	r2, r3, #31
 800733c:	e017      	b.n	800736e <HAL_ADC_ConfigChannel+0x3ea>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2103      	movs	r1, #3
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fb4b 	bl	80069e0 <LL_ADC_GetOffsetChannel>
 800734a:	4603      	mov	r3, r0
 800734c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007350:	fa93 f3a3 	rbit	r3, r3
 8007354:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007358:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800735a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8007360:	2320      	movs	r3, #32
 8007362:	e003      	b.n	800736c <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8007364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007366:	fab3 f383 	clz	r3, r3
 800736a:	b2db      	uxtb	r3, r3
 800736c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x402>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	0e9b      	lsrs	r3, r3, #26
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	e011      	b.n	80073aa <HAL_ADC_ConfigChannel+0x426>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800738e:	fa93 f3a3 	rbit	r3, r3
 8007392:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007396:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800739e:	2320      	movs	r3, #32
 80073a0:	e003      	b.n	80073aa <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	fab3 f383 	clz	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d106      	bne.n	80073bc <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	2103      	movs	r1, #3
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fb28 	bl	8006a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fc51 	bl	8006c68 <LL_ADC_IsEnabled>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 813f 	bne.w	800764c <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7ff fbd2 	bl	8006b84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a8e      	ldr	r2, [pc, #568]	; (8007620 <HAL_ADC_ConfigChannel+0x69c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	f040 8130 	bne.w	800764c <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <HAL_ADC_ConfigChannel+0x490>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	0e9b      	lsrs	r3, r3, #26
 8007402:	3301      	adds	r3, #1
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2b09      	cmp	r3, #9
 800740a:	bf94      	ite	ls
 800740c:	2301      	movls	r3, #1
 800740e:	2300      	movhi	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e019      	b.n	8007448 <HAL_ADC_ConfigChannel+0x4c4>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741c:	fa93 f3a3 	rbit	r3, r3
 8007420:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007424:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800742c:	2320      	movs	r3, #32
 800742e:	e003      	b.n	8007438 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8007430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007432:	fab3 f383 	clz	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3301      	adds	r3, #1
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b09      	cmp	r3, #9
 8007440:	bf94      	ite	ls
 8007442:	2301      	movls	r3, #1
 8007444:	2300      	movhi	r3, #0
 8007446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007448:	2b00      	cmp	r3, #0
 800744a:	d079      	beq.n	8007540 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007454:	2b00      	cmp	r3, #0
 8007456:	d107      	bne.n	8007468 <HAL_ADC_ConfigChannel+0x4e4>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	0e9b      	lsrs	r3, r3, #26
 800745e:	3301      	adds	r3, #1
 8007460:	069b      	lsls	r3, r3, #26
 8007462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007466:	e015      	b.n	8007494 <HAL_ADC_ConfigChannel+0x510>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007470:	fa93 f3a3 	rbit	r3, r3
 8007474:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007478:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800747a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8007480:	2320      	movs	r3, #32
 8007482:	e003      	b.n	800748c <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8007484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	b2db      	uxtb	r3, r3
 800748c:	3301      	adds	r3, #1
 800748e:	069b      	lsls	r3, r3, #26
 8007490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_ADC_ConfigChannel+0x530>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	0e9b      	lsrs	r3, r3, #26
 80074a6:	3301      	adds	r3, #1
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2101      	movs	r1, #1
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	e017      	b.n	80074e4 <HAL_ADC_ConfigChannel+0x560>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	fa93 f3a3 	rbit	r3, r3
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80074c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80074c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80074cc:	2320      	movs	r3, #32
 80074ce:	e003      	b.n	80074d8 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80074d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	3301      	adds	r3, #1
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2101      	movs	r1, #1
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	ea42 0103 	orr.w	r1, r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <HAL_ADC_ConfigChannel+0x586>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	0e9b      	lsrs	r3, r3, #26
 80074fa:	3301      	adds	r3, #1
 80074fc:	f003 021f 	and.w	r2, r3, #31
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	051b      	lsls	r3, r3, #20
 8007508:	e018      	b.n	800753c <HAL_ADC_ConfigChannel+0x5b8>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	fa93 f3a3 	rbit	r3, r3
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800751c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8007522:	2320      	movs	r3, #32
 8007524:	e003      	b.n	800752e <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	fab3 f383 	clz	r3, r3
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3301      	adds	r3, #1
 8007530:	f003 021f 	and.w	r2, r3, #31
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800753c:	430b      	orrs	r3, r1
 800753e:	e080      	b.n	8007642 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007548:	2b00      	cmp	r3, #0
 800754a:	d107      	bne.n	800755c <HAL_ADC_ConfigChannel+0x5d8>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	0e9b      	lsrs	r3, r3, #26
 8007552:	3301      	adds	r3, #1
 8007554:	069b      	lsls	r3, r3, #26
 8007556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800755a:	e015      	b.n	8007588 <HAL_ADC_ConfigChannel+0x604>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	fa93 f3a3 	rbit	r3, r3
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8007574:	2320      	movs	r3, #32
 8007576:	e003      	b.n	8007580 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	fab3 f383 	clz	r3, r3
 800757e:	b2db      	uxtb	r3, r3
 8007580:	3301      	adds	r3, #1
 8007582:	069b      	lsls	r3, r3, #26
 8007584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x624>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	0e9b      	lsrs	r3, r3, #26
 800759a:	3301      	adds	r3, #1
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2101      	movs	r1, #1
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	e017      	b.n	80075d8 <HAL_ADC_ConfigChannel+0x654>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	fa93 f3a3 	rbit	r3, r3
 80075b4:	61fb      	str	r3, [r7, #28]
  return result;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80075c0:	2320      	movs	r3, #32
 80075c2:	e003      	b.n	80075cc <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	fab3 f383 	clz	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	3301      	adds	r3, #1
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2101      	movs	r1, #1
 80075d4:	fa01 f303 	lsl.w	r3, r1, r3
 80075d8:	ea42 0103 	orr.w	r1, r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10d      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x680>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	0e9b      	lsrs	r3, r3, #26
 80075ee:	3301      	adds	r3, #1
 80075f0:	f003 021f 	and.w	r2, r3, #31
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	3b1e      	subs	r3, #30
 80075fc:	051b      	lsls	r3, r3, #20
 80075fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007602:	e01d      	b.n	8007640 <HAL_ADC_ConfigChannel+0x6bc>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	fa93 f3a3 	rbit	r3, r3
 8007610:	613b      	str	r3, [r7, #16]
  return result;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800761c:	2320      	movs	r3, #32
 800761e:	e005      	b.n	800762c <HAL_ADC_ConfigChannel+0x6a8>
 8007620:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	fab3 f383 	clz	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	3301      	adds	r3, #1
 800762e:	f003 021f 	and.w	r2, r3, #31
 8007632:	4613      	mov	r3, r2
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4413      	add	r3, r2
 8007638:	3b1e      	subs	r3, #30
 800763a:	051b      	lsls	r3, r3, #20
 800763c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007640:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007646:	4619      	mov	r1, r3
 8007648:	f7ff fa70 	bl	8006b2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b43      	ldr	r3, [pc, #268]	; (8007760 <HAL_ADC_ConfigChannel+0x7dc>)
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d079      	beq.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007658:	4842      	ldr	r0, [pc, #264]	; (8007764 <HAL_ADC_ConfigChannel+0x7e0>)
 800765a:	f7ff f969 	bl	8006930 <LL_ADC_GetCommonPathInternalCh>
 800765e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <HAL_ADC_ConfigChannel+0x7e4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d124      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800766c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11e      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a3b      	ldr	r2, [pc, #236]	; (800776c <HAL_ADC_ConfigChannel+0x7e8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d164      	bne.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800768a:	4619      	mov	r1, r3
 800768c:	4835      	ldr	r0, [pc, #212]	; (8007764 <HAL_ADC_ConfigChannel+0x7e0>)
 800768e:	f7ff f93c 	bl	800690a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007692:	4b37      	ldr	r3, [pc, #220]	; (8007770 <HAL_ADC_ConfigChannel+0x7ec>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	4a36      	ldr	r2, [pc, #216]	; (8007774 <HAL_ADC_ConfigChannel+0x7f0>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	099b      	lsrs	r3, r3, #6
 80076a0:	3301      	adds	r3, #1
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80076a6:	e002      	b.n	80076ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f9      	bne.n	80076a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076b4:	e04a      	b.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <HAL_ADC_ConfigChannel+0x7f4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d113      	bne.n	80076e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80076c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a2a      	ldr	r2, [pc, #168]	; (800777c <HAL_ADC_ConfigChannel+0x7f8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d13a      	bne.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076de:	4619      	mov	r1, r3
 80076e0:	4820      	ldr	r0, [pc, #128]	; (8007764 <HAL_ADC_ConfigChannel+0x7e0>)
 80076e2:	f7ff f912 	bl	800690a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076e6:	e031      	b.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a24      	ldr	r2, [pc, #144]	; (8007780 <HAL_ADC_ConfigChannel+0x7fc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d113      	bne.n	800771a <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1a      	ldr	r2, [pc, #104]	; (800776c <HAL_ADC_ConfigChannel+0x7e8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d121      	bne.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800770c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007710:	4619      	mov	r1, r3
 8007712:	4814      	ldr	r0, [pc, #80]	; (8007764 <HAL_ADC_ConfigChannel+0x7e0>)
 8007714:	f7ff f8f9 	bl	800690a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8007718:	e018      	b.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <HAL_ADC_ConfigChannel+0x800>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d113      	bne.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a10      	ldr	r2, [pc, #64]	; (800776c <HAL_ADC_ConfigChannel+0x7e8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff f90a 	bl	800694c <LL_ADC_EnableChannelVDDcore>
 8007738:	e008      	b.n	800774c <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	f043 0220 	orr.w	r2, r3, #32
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007754:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007758:	4618      	mov	r0, r3
 800775a:	37d8      	adds	r7, #216	; 0xd8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	80080000 	.word	0x80080000
 8007764:	42028300 	.word	0x42028300
 8007768:	c3210000 	.word	0xc3210000
 800776c:	42028000 	.word	0x42028000
 8007770:	20000000 	.word	0x20000000
 8007774:	053e2d63 	.word	0x053e2d63
 8007778:	43290000 	.word	0x43290000
 800777c:	42028100 	.word	0x42028100
 8007780:	c7520000 	.word	0xc7520000
 8007784:	475a0000 	.word	0x475a0000

08007788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <__NVIC_SetPriorityGrouping+0x44>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077a4:	4013      	ands	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ba:	4a04      	ldr	r2, [pc, #16]	; (80077cc <__NVIC_SetPriorityGrouping+0x44>)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	60d3      	str	r3, [r2, #12]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <__NVIC_GetPriorityGrouping+0x18>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	f003 0307 	and.w	r3, r3, #7
}
 80077de:	4618      	mov	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	e000ed00 	.word	0xe000ed00

080077ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80077f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	db0b      	blt.n	8007816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	f003 021f 	and.w	r2, r3, #31
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <__NVIC_EnableIRQ+0x38>)
 8007806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2001      	movs	r0, #1
 800780e:	fa00 f202 	lsl.w	r2, r0, r2
 8007812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	e000e100 	.word	0xe000e100

08007828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	db0a      	blt.n	8007852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	490c      	ldr	r1, [pc, #48]	; (8007874 <__NVIC_SetPriority+0x4c>)
 8007842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007846:	0112      	lsls	r2, r2, #4
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	440b      	add	r3, r1
 800784c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007850:	e00a      	b.n	8007868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	b2da      	uxtb	r2, r3
 8007856:	4908      	ldr	r1, [pc, #32]	; (8007878 <__NVIC_SetPriority+0x50>)
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	3b04      	subs	r3, #4
 8007860:	0112      	lsls	r2, r2, #4
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	440b      	add	r3, r1
 8007866:	761a      	strb	r2, [r3, #24]
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	e000e100 	.word	0xe000e100
 8007878:	e000ed00 	.word	0xe000ed00

0800787c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800787c:	b480      	push	{r7}
 800787e:	b089      	sub	sp, #36	; 0x24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f1c3 0307 	rsb	r3, r3, #7
 8007896:	2b04      	cmp	r3, #4
 8007898:	bf28      	it	cs
 800789a:	2304      	movcs	r3, #4
 800789c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3304      	adds	r3, #4
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d902      	bls.n	80078ac <NVIC_EncodePriority+0x30>
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	3b03      	subs	r3, #3
 80078aa:	e000      	b.n	80078ae <NVIC_EncodePriority+0x32>
 80078ac:	2300      	movs	r3, #0
 80078ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078b0:	f04f 32ff 	mov.w	r2, #4294967295
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	43da      	mvns	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	401a      	ands	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078c4:	f04f 31ff 	mov.w	r1, #4294967295
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	fa01 f303 	lsl.w	r3, r1, r3
 80078ce:	43d9      	mvns	r1, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078d4:	4313      	orrs	r3, r2
         );
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3724      	adds	r7, #36	; 0x24
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078f4:	d301      	bcc.n	80078fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078f6:	2301      	movs	r3, #1
 80078f8:	e00f      	b.n	800791a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078fa:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <SysTick_Config+0x40>)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007902:	210f      	movs	r1, #15
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	f7ff ff8e 	bl	8007828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <SysTick_Config+0x40>)
 800790e:	2200      	movs	r2, #0
 8007910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007912:	4b04      	ldr	r3, [pc, #16]	; (8007924 <SysTick_Config+0x40>)
 8007914:	2207      	movs	r2, #7
 8007916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	e000e010 	.word	0xe000e010

08007928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff29 	bl	8007788 <__NVIC_SetPriorityGrouping>
}
 8007936:	bf00      	nop
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	4603      	mov	r3, r0
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800794c:	f7ff ff40 	bl	80077d0 <__NVIC_GetPriorityGrouping>
 8007950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	6978      	ldr	r0, [r7, #20]
 8007958:	f7ff ff90 	bl	800787c <NVIC_EncodePriority>
 800795c:	4602      	mov	r2, r0
 800795e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff ff5f 	bl	8007828 <__NVIC_SetPriority>
}
 800796a:	bf00      	nop
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	4603      	mov	r3, r0
 800797a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800797c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff ff33 	bl	80077ec <__NVIC_EnableIRQ>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff ffa4 	bl	80078e4 <SysTick_Config>
 800799c:	4603      	mov	r3, r0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e054      	b.n	8007a64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7f5b      	ldrb	r3, [r3, #29]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7f9 fe0a 	bl	80015e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	791b      	ldrb	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <HAL_CRC_Init+0xc4>)
 80079e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0218 	bic.w	r2, r2, #24
 80079f4:	609a      	str	r2, [r3, #8]
 80079f6:	e00c      	b.n	8007a12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6899      	ldr	r1, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f834 	bl	8007a70 <HAL_CRCEx_Polynomial_Set>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e028      	b.n	8007a64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a22:	611a      	str	r2, [r3, #16]
 8007a24:	e004      	b.n	8007a30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6912      	ldr	r2, [r2, #16]
 8007a2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695a      	ldr	r2, [r3, #20]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	04c11db7 	.word	0x04c11db7

08007a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007a80:	231f      	movs	r3, #31
 8007a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
 8007a92:	e063      	b.n	8007b5c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007a94:	bf00      	nop
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	613a      	str	r2, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <HAL_CRCEx_Polynomial_Set+0x44>
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0f0      	beq.n	8007a96 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b18      	cmp	r3, #24
 8007ab8:	d846      	bhi.n	8007b48 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b49 	.word	0x08007b49
 8007ad4:	08007b49 	.word	0x08007b49
 8007ad8:	08007b49 	.word	0x08007b49
 8007adc:	08007b49 	.word	0x08007b49
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b49 	.word	0x08007b49
 8007ae8:	08007b49 	.word	0x08007b49
 8007aec:	08007b49 	.word	0x08007b49
 8007af0:	08007b49 	.word	0x08007b49
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007b49 	.word	0x08007b49
 8007afc:	08007b49 	.word	0x08007b49
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007b49 	.word	0x08007b49
 8007b08:	08007b49 	.word	0x08007b49
 8007b0c:	08007b49 	.word	0x08007b49
 8007b10:	08007b49 	.word	0x08007b49
 8007b14:	08007b49 	.word	0x08007b49
 8007b18:	08007b49 	.word	0x08007b49
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b25 	.word	0x08007b25
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b06      	cmp	r3, #6
 8007b28:	d913      	bls.n	8007b52 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007b2e:	e010      	b.n	8007b52 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b07      	cmp	r3, #7
 8007b34:	d90f      	bls.n	8007b56 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007b3a:	e00c      	b.n	8007b56 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d90b      	bls.n	8007b5a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007b46:	e008      	b.n	8007b5a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
        break;
 8007b4c:	e006      	b.n	8007b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e004      	b.n	8007b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007b5a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f023 0118 	bic.w	r1, r3, #24
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007b94:	f7fe fe76 	bl	8006884 <HAL_GetTick>
 8007b98:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e06b      	b.n	8007c7c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d008      	beq.n	8007bc2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e05c      	b.n	8007c7c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695a      	ldr	r2, [r3, #20]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0204 	orr.w	r2, r2, #4
 8007bd0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2205      	movs	r2, #5
 8007bd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007bda:	e020      	b.n	8007c1e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007bdc:	f7fe fe52 	bl	8006884 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d919      	bls.n	8007c1e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	f043 0210 	orr.w	r2, r3, #16
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	2201      	movs	r2, #1
 8007c10:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e02e      	b.n	8007c7c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0d7      	beq.n	8007bdc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0202 	orr.w	r2, r2, #2
 8007c3a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007c4c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c66:	2201      	movs	r2, #1
 8007c68:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e019      	b.n	8007cca <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d004      	beq.n	8007cac <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e00e      	b.n	8007cca <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2204      	movs	r2, #4
 8007cb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cc2:	f043 0304 	orr.w	r3, r3, #4
 8007cc6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ce6:	f023 030f 	bic.w	r3, r3, #15
 8007cea:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf4:	3b50      	subs	r3, #80	; 0x50
 8007cf6:	09db      	lsrs	r3, r3, #7
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 8154 	beq.w	8007fbe <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d011      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d3a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d40:	f043 0201 	orr.w	r2, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d72:	f043 0202 	orr.w	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d011      	beq.n	8007dac <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d9e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da4:	f043 0204 	orr.w	r2, r3, #4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d011      	beq.n	8007dde <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007dd0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	f043 0208 	orr.w	r2, r3, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d013      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00c      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e02:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d059      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d052      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e38:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d13b      	bne.n	8007ebe <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695a      	ldr	r2, [r3, #20]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e54:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0202 	orr.w	r2, r2, #2
 8007e64:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007e7c:	e003      	b.n	8007e86 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e96:	2201      	movs	r2, #1
 8007e98:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8087 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
        }

        return;
 8007ebc:	e081      	b.n	8007fc2 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2205      	movs	r2, #5
 8007ec2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d039      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d032      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d012      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d116      	bne.n	8007f36 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d111      	bne.n	8007f36 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f1e:	2201      	movs	r2, #1
 8007f20:	731a      	strb	r2, [r3, #12]
 8007f22:	e008      	b.n	8007f36 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007f3e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d031      	beq.n	8007fc4 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0202 	orr.w	r2, r2, #2
 8007f6e:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2203      	movs	r2, #3
 8007f82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007f86:	e003      	b.n	8007f90 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
 8007fbc:	e002      	b.n	8007fc4 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8007fbe:	bf00      	nop
 8007fc0:	e000      	b.n	8007fc4 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8007fc2:	bf00      	nop
    }
  }
}
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e02b      	b.n	8008036 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007fe6:	f023 030f 	bic.w	r3, r3, #15
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ff4:	3b50      	subs	r3, #80	; 0x50
 8007ff6:	09db      	lsrs	r3, r3, #7
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b00      	cmp	r3, #0
 800800c:	d012      	beq.n	8008034 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f003 0311 	and.w	r3, r3, #17
 8008014:	2b11      	cmp	r3, #17
 8008016:	d106      	bne.n	8008026 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	431a      	orrs	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	605a      	str	r2, [r3, #4]
 8008024:	e006      	b.n	8008034 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	43db      	mvns	r3, r3
 800802e:	401a      	ands	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800804c:	f7fe fc1a 	bl	8006884 <HAL_GetTick>
 8008050:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0db      	b.n	8008214 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a6e      	ldr	r2, [pc, #440]	; (800821c <HAL_DMAEx_List_Init+0x1d8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	f000 809f 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a6c      	ldr	r2, [pc, #432]	; (8008220 <HAL_DMAEx_List_Init+0x1dc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	f000 8099 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a6a      	ldr	r2, [pc, #424]	; (8008224 <HAL_DMAEx_List_Init+0x1e0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	f000 8093 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a68      	ldr	r2, [pc, #416]	; (8008228 <HAL_DMAEx_List_Init+0x1e4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f000 808d 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a66      	ldr	r2, [pc, #408]	; (800822c <HAL_DMAEx_List_Init+0x1e8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	f000 8087 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a64      	ldr	r2, [pc, #400]	; (8008230 <HAL_DMAEx_List_Init+0x1ec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f000 8081 	beq.w	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a62      	ldr	r2, [pc, #392]	; (8008234 <HAL_DMAEx_List_Init+0x1f0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d07b      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a61      	ldr	r2, [pc, #388]	; (8008238 <HAL_DMAEx_List_Init+0x1f4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d076      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a5f      	ldr	r2, [pc, #380]	; (800823c <HAL_DMAEx_List_Init+0x1f8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d071      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a5e      	ldr	r2, [pc, #376]	; (8008240 <HAL_DMAEx_List_Init+0x1fc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d06c      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a5c      	ldr	r2, [pc, #368]	; (8008244 <HAL_DMAEx_List_Init+0x200>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d067      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a5b      	ldr	r2, [pc, #364]	; (8008248 <HAL_DMAEx_List_Init+0x204>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d062      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a59      	ldr	r2, [pc, #356]	; (800824c <HAL_DMAEx_List_Init+0x208>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d05d      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a58      	ldr	r2, [pc, #352]	; (8008250 <HAL_DMAEx_List_Init+0x20c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d058      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a56      	ldr	r2, [pc, #344]	; (8008254 <HAL_DMAEx_List_Init+0x210>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d053      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a55      	ldr	r2, [pc, #340]	; (8008258 <HAL_DMAEx_List_Init+0x214>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04e      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a53      	ldr	r2, [pc, #332]	; (800825c <HAL_DMAEx_List_Init+0x218>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d049      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a52      	ldr	r2, [pc, #328]	; (8008260 <HAL_DMAEx_List_Init+0x21c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d044      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a50      	ldr	r2, [pc, #320]	; (8008264 <HAL_DMAEx_List_Init+0x220>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03f      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a4f      	ldr	r2, [pc, #316]	; (8008268 <HAL_DMAEx_List_Init+0x224>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d03a      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a4d      	ldr	r2, [pc, #308]	; (800826c <HAL_DMAEx_List_Init+0x228>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d035      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a4c      	ldr	r2, [pc, #304]	; (8008270 <HAL_DMAEx_List_Init+0x22c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d030      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a4a      	ldr	r2, [pc, #296]	; (8008274 <HAL_DMAEx_List_Init+0x230>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d02b      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a49      	ldr	r2, [pc, #292]	; (8008278 <HAL_DMAEx_List_Init+0x234>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d026      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a47      	ldr	r2, [pc, #284]	; (800827c <HAL_DMAEx_List_Init+0x238>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d021      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a46      	ldr	r2, [pc, #280]	; (8008280 <HAL_DMAEx_List_Init+0x23c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01c      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a44      	ldr	r2, [pc, #272]	; (8008284 <HAL_DMAEx_List_Init+0x240>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d017      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a43      	ldr	r2, [pc, #268]	; (8008288 <HAL_DMAEx_List_Init+0x244>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d012      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a41      	ldr	r2, [pc, #260]	; (800828c <HAL_DMAEx_List_Init+0x248>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00d      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a40      	ldr	r2, [pc, #256]	; (8008290 <HAL_DMAEx_List_Init+0x24c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d008      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a3e      	ldr	r2, [pc, #248]	; (8008294 <HAL_DMAEx_List_Init+0x250>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d003      	beq.n	80081a6 <HAL_DMAEx_List_Init+0x162>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a3d      	ldr	r2, [pc, #244]	; (8008298 <HAL_DMAEx_List_Init+0x254>)
 80081a4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2202      	movs	r2, #2
 80081b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0206 	orr.w	r2, r2, #6
 80081c4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80081c6:	e00f      	b.n	80081e8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80081c8:	f7fe fb5c 	bl	8006884 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d908      	bls.n	80081e8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2210      	movs	r2, #16
 80081da:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2203      	movs	r2, #3
 80081e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e015      	b.n	8008214 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e8      	bne.n	80081c8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa26 	bl	8008648 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40020050 	.word	0x40020050
 8008220:	50020050 	.word	0x50020050
 8008224:	400200d0 	.word	0x400200d0
 8008228:	500200d0 	.word	0x500200d0
 800822c:	40020150 	.word	0x40020150
 8008230:	50020150 	.word	0x50020150
 8008234:	400201d0 	.word	0x400201d0
 8008238:	500201d0 	.word	0x500201d0
 800823c:	40020250 	.word	0x40020250
 8008240:	50020250 	.word	0x50020250
 8008244:	400202d0 	.word	0x400202d0
 8008248:	500202d0 	.word	0x500202d0
 800824c:	40020350 	.word	0x40020350
 8008250:	50020350 	.word	0x50020350
 8008254:	400203d0 	.word	0x400203d0
 8008258:	500203d0 	.word	0x500203d0
 800825c:	40021050 	.word	0x40021050
 8008260:	50021050 	.word	0x50021050
 8008264:	400210d0 	.word	0x400210d0
 8008268:	500210d0 	.word	0x500210d0
 800826c:	40021150 	.word	0x40021150
 8008270:	50021150 	.word	0x50021150
 8008274:	400211d0 	.word	0x400211d0
 8008278:	500211d0 	.word	0x500211d0
 800827c:	40021250 	.word	0x40021250
 8008280:	50021250 	.word	0x50021250
 8008284:	400212d0 	.word	0x400212d0
 8008288:	500212d0 	.word	0x500212d0
 800828c:	40021350 	.word	0x40021350
 8008290:	50021350 	.word	0x50021350
 8008294:	400213d0 	.word	0x400213d0
 8008298:	500213d0 	.word	0x500213d0

0800829c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_DMAEx_List_BuildNode+0x16>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e004      	b.n	80082c0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fb1d 	bl	80088f8 <DMA_List_BuildNode>

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08c      	sub	sp, #48	; 0x30
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <HAL_DMAEx_List_InsertNode+0x18>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e0b6      	b.n	8008452 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d104      	bne.n	80082f6 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2204      	movs	r2, #4
 80082f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e0ad      	b.n	8008452 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fc52 	bl	8008ba8 <DMA_List_CheckNodesBaseAddresses>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2205      	movs	r2, #5
 800830e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e09e      	b.n	8008452 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fc73 	bl	8008c08 <DMA_List_CheckNodesTypes>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2204      	movs	r2, #4
 800832c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e08f      	b.n	8008452 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2202      	movs	r2, #2
 8008336:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800833e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc99 	bl	8008c80 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d11a      	bne.n	800838c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	609a      	str	r2, [r3, #8]
 8008368:	e06c      	b.n	8008444 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008376:	4013      	ands	r3, r2
 8008378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800837c:	4319      	orrs	r1, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2202      	movs	r2, #2
 8008388:	609a      	str	r2, [r3, #8]
 800838a:	e05b      	b.n	8008444 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10f      	bne.n	80083b2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800839c:	4013      	ands	r3, r2
 800839e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a2:	4319      	orrs	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e043      	b.n	800843a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	461a      	mov	r2, r3
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fc8e 	bl	8008ce0 <DMA_List_FindNode>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d132      	bne.n	8008430 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d11a      	bne.n	800840a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	461a      	mov	r2, r3
 80083e2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80083e6:	4013      	ands	r3, r2
 80083e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ec:	4319      	orrs	r1, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80083fa:	4013      	ands	r3, r2
 80083fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008400:	4319      	orrs	r1, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008408:	e017      	b.n	800843a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800840a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008420:	4013      	ands	r3, r2
 8008422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008426:	4319      	orrs	r1, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800842e:	e004      	b.n	800843a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2206      	movs	r2, #6
 8008434:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e00b      	b.n	8008452 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3730      	adds	r7, #48	; 0x30
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b08a      	sub	sp, #40	; 0x28
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e052      	b.n	8008512 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e049      	b.n	8008512 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00c      	beq.n	80084a0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d101      	bne.n	8008496 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	e03d      	b.n	8008512 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2204      	movs	r2, #4
 800849a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e038      	b.n	8008512 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d104      	bne.n	80084b2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2204      	movs	r2, #4
 80084ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e02f      	b.n	8008512 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f107 0220 	add.w	r2, r7, #32
 80084c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fbd8 	bl	8008c80 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80084d4:	f107 030c 	add.w	r3, r7, #12
 80084d8:	461a      	mov	r2, r3
 80084da:	2100      	movs	r1, #0
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fbff 	bl	8008ce0 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80084ec:	4013      	ands	r3, r2
 80084ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	4610      	mov	r0, r2
 80084f4:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80084f6:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80084f8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_DMAEx_List_LinkQ+0x16>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e072      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800853c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d002      	beq.n	8008550 <HAL_DMAEx_List_LinkQ+0x34>
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b05      	cmp	r3, #5
 800854e:	d108      	bne.n	8008562 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2240      	movs	r2, #64	; 0x40
 8008554:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e05c      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	7b1b      	ldrb	r3, [r3, #12]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d104      	bne.n	8008576 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2201      	movs	r2, #1
 8008570:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e052      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2b      	ldr	r2, [pc, #172]	; (8008628 <HAL_DMAEx_List_LinkQ+0x10c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d022      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a29      	ldr	r2, [pc, #164]	; (800862c <HAL_DMAEx_List_LinkQ+0x110>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d01d      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a28      	ldr	r2, [pc, #160]	; (8008630 <HAL_DMAEx_List_LinkQ+0x114>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d018      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a26      	ldr	r2, [pc, #152]	; (8008634 <HAL_DMAEx_List_LinkQ+0x118>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d013      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a25      	ldr	r2, [pc, #148]	; (8008638 <HAL_DMAEx_List_LinkQ+0x11c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00e      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a23      	ldr	r2, [pc, #140]	; (800863c <HAL_DMAEx_List_LinkQ+0x120>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d009      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a22      	ldr	r2, [pc, #136]	; (8008640 <HAL_DMAEx_List_LinkQ+0x124>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d004      	beq.n	80085c6 <HAL_DMAEx_List_LinkQ+0xaa>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a20      	ldr	r2, [pc, #128]	; (8008644 <HAL_DMAEx_List_LinkQ+0x128>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d101      	bne.n	80085ca <HAL_DMAEx_List_LinkQ+0xae>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <HAL_DMAEx_List_LinkQ+0xb0>
 80085ca:	2300      	movs	r3, #0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10b      	bne.n	80085e8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2203      	movs	r2, #3
 80085e2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e019      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ec:	2b81      	cmp	r3, #129	; 0x81
 80085ee:	d108      	bne.n	8008602 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10d      	bne.n	8008614 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2204      	movs	r2, #4
 80085fc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e00c      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2204      	movs	r2, #4
 800860e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e003      	b.n	800861c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	40020350 	.word	0x40020350
 800862c:	50020350 	.word	0x50020350
 8008630:	400203d0 	.word	0x400203d0
 8008634:	500203d0 	.word	0x500203d0
 8008638:	40021350 	.word	0x40021350
 800863c:	50021350 	.word	0x50021350
 8008640:	400213d0 	.word	0x400213d0
 8008644:	500213d0 	.word	0x500213d0

08008648 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a85      	ldr	r2, [pc, #532]	; (8008878 <DMA_List_Init+0x230>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f000 80a0 	beq.w	80087a8 <DMA_List_Init+0x160>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a83      	ldr	r2, [pc, #524]	; (800887c <DMA_List_Init+0x234>)
 800866e:	4293      	cmp	r3, r2
 8008670:	f000 809a 	beq.w	80087a8 <DMA_List_Init+0x160>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a81      	ldr	r2, [pc, #516]	; (8008880 <DMA_List_Init+0x238>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f000 8094 	beq.w	80087a8 <DMA_List_Init+0x160>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a7f      	ldr	r2, [pc, #508]	; (8008884 <DMA_List_Init+0x23c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	f000 808e 	beq.w	80087a8 <DMA_List_Init+0x160>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a7d      	ldr	r2, [pc, #500]	; (8008888 <DMA_List_Init+0x240>)
 8008692:	4293      	cmp	r3, r2
 8008694:	f000 8088 	beq.w	80087a8 <DMA_List_Init+0x160>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a7b      	ldr	r2, [pc, #492]	; (800888c <DMA_List_Init+0x244>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f000 8082 	beq.w	80087a8 <DMA_List_Init+0x160>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a79      	ldr	r2, [pc, #484]	; (8008890 <DMA_List_Init+0x248>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d07c      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a78      	ldr	r2, [pc, #480]	; (8008894 <DMA_List_Init+0x24c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d077      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a76      	ldr	r2, [pc, #472]	; (8008898 <DMA_List_Init+0x250>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d072      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a75      	ldr	r2, [pc, #468]	; (800889c <DMA_List_Init+0x254>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d06d      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a73      	ldr	r2, [pc, #460]	; (80088a0 <DMA_List_Init+0x258>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d068      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a72      	ldr	r2, [pc, #456]	; (80088a4 <DMA_List_Init+0x25c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d063      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a70      	ldr	r2, [pc, #448]	; (80088a8 <DMA_List_Init+0x260>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d05e      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a6f      	ldr	r2, [pc, #444]	; (80088ac <DMA_List_Init+0x264>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d059      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a6d      	ldr	r2, [pc, #436]	; (80088b0 <DMA_List_Init+0x268>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d054      	beq.n	80087a8 <DMA_List_Init+0x160>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a6c      	ldr	r2, [pc, #432]	; (80088b4 <DMA_List_Init+0x26c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d04f      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a6a      	ldr	r2, [pc, #424]	; (80088b8 <DMA_List_Init+0x270>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d04a      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a69      	ldr	r2, [pc, #420]	; (80088bc <DMA_List_Init+0x274>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d045      	beq.n	80087a8 <DMA_List_Init+0x160>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a67      	ldr	r2, [pc, #412]	; (80088c0 <DMA_List_Init+0x278>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d040      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a66      	ldr	r2, [pc, #408]	; (80088c4 <DMA_List_Init+0x27c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d03b      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a64      	ldr	r2, [pc, #400]	; (80088c8 <DMA_List_Init+0x280>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d036      	beq.n	80087a8 <DMA_List_Init+0x160>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a63      	ldr	r2, [pc, #396]	; (80088cc <DMA_List_Init+0x284>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d031      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <DMA_List_Init+0x288>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d02c      	beq.n	80087a8 <DMA_List_Init+0x160>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a60      	ldr	r2, [pc, #384]	; (80088d4 <DMA_List_Init+0x28c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d027      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a5e      	ldr	r2, [pc, #376]	; (80088d8 <DMA_List_Init+0x290>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a5d      	ldr	r2, [pc, #372]	; (80088dc <DMA_List_Init+0x294>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d01d      	beq.n	80087a8 <DMA_List_Init+0x160>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a5b      	ldr	r2, [pc, #364]	; (80088e0 <DMA_List_Init+0x298>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a5a      	ldr	r2, [pc, #360]	; (80088e4 <DMA_List_Init+0x29c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a58      	ldr	r2, [pc, #352]	; (80088e8 <DMA_List_Init+0x2a0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <DMA_List_Init+0x160>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a57      	ldr	r2, [pc, #348]	; (80088ec <DMA_List_Init+0x2a4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <DMA_List_Init+0x160>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a55      	ldr	r2, [pc, #340]	; (80088f0 <DMA_List_Init+0x2a8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <DMA_List_Init+0x160>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a54      	ldr	r2, [pc, #336]	; (80088f4 <DMA_List_Init+0x2ac>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d101      	bne.n	80087ac <DMA_List_Init+0x164>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <DMA_List_Init+0x166>
 80087ac:	2300      	movs	r3, #0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80087e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2200      	movs	r2, #0
 80087f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <DMA_List_Init+0x260>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d022      	beq.n	800884a <DMA_List_Init+0x202>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <DMA_List_Init+0x264>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01d      	beq.n	800884a <DMA_List_Init+0x202>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <DMA_List_Init+0x268>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <DMA_List_Init+0x202>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a25      	ldr	r2, [pc, #148]	; (80088b4 <DMA_List_Init+0x26c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <DMA_List_Init+0x202>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a30      	ldr	r2, [pc, #192]	; (80088e8 <DMA_List_Init+0x2a0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00e      	beq.n	800884a <DMA_List_Init+0x202>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a2e      	ldr	r2, [pc, #184]	; (80088ec <DMA_List_Init+0x2a4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <DMA_List_Init+0x202>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2d      	ldr	r2, [pc, #180]	; (80088f0 <DMA_List_Init+0x2a8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <DMA_List_Init+0x202>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2b      	ldr	r2, [pc, #172]	; (80088f4 <DMA_List_Init+0x2ac>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <DMA_List_Init+0x206>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <DMA_List_Init+0x208>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2200      	movs	r2, #0
 8008862:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	40020050 	.word	0x40020050
 800887c:	50020050 	.word	0x50020050
 8008880:	400200d0 	.word	0x400200d0
 8008884:	500200d0 	.word	0x500200d0
 8008888:	40020150 	.word	0x40020150
 800888c:	50020150 	.word	0x50020150
 8008890:	400201d0 	.word	0x400201d0
 8008894:	500201d0 	.word	0x500201d0
 8008898:	40020250 	.word	0x40020250
 800889c:	50020250 	.word	0x50020250
 80088a0:	400202d0 	.word	0x400202d0
 80088a4:	500202d0 	.word	0x500202d0
 80088a8:	40020350 	.word	0x40020350
 80088ac:	50020350 	.word	0x50020350
 80088b0:	400203d0 	.word	0x400203d0
 80088b4:	500203d0 	.word	0x500203d0
 80088b8:	40021050 	.word	0x40021050
 80088bc:	50021050 	.word	0x50021050
 80088c0:	400210d0 	.word	0x400210d0
 80088c4:	500210d0 	.word	0x500210d0
 80088c8:	40021150 	.word	0x40021150
 80088cc:	50021150 	.word	0x50021150
 80088d0:	400211d0 	.word	0x400211d0
 80088d4:	500211d0 	.word	0x500211d0
 80088d8:	40021250 	.word	0x40021250
 80088dc:	50021250 	.word	0x50021250
 80088e0:	400212d0 	.word	0x400212d0
 80088e4:	500212d0 	.word	0x500212d0
 80088e8:	40021350 	.word	0x40021350
 80088ec:	50021350 	.word	0x50021350
 80088f0:	400213d0 	.word	0x400213d0
 80088f4:	500213d0 	.word	0x500213d0

080088f8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800890a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8008910:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8008916:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800891c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d017      	beq.n	800895e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	3b01      	subs	r3, #1
 8008942:	051b      	lsls	r3, r3, #20
 8008944:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008948:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	3b01      	subs	r3, #1
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8008956:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8008958:	431a      	orrs	r2, r3
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6859      	ldr	r1, [r3, #4]
 8008966:	f240 23ff 	movw	r3, #767	; 0x2ff
 800896a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800896c:	431a      	orrs	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897a:	d10c      	bne.n	8008996 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d011      	beq.n	80089ac <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	605a      	str	r2, [r3, #4]
 8008994:	e00a      	b.n	80089ac <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899e:	d105      	bne.n	80089ac <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	431a      	orrs	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00f      	beq.n	80089e2 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80089da:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80089dc:	431a      	orrs	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d04e      	beq.n	8008a96 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a00:	3b01      	subs	r3, #1
 8008a02:	0419      	lsls	r1, r3, #16
 8008a04:	4b66      	ldr	r3, [pc, #408]	; (8008ba0 <DMA_List_BuildNode+0x2a8>)
 8008a06:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da06      	bge.n	8008a24 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	609a      	str	r2, [r3, #8]
 8008a22:	e005      	b.n	8008a30 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da06      	bge.n	8008a46 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	e005      	b.n	8008a52 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da06      	bge.n	8008a68 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	609a      	str	r2, [r3, #8]
 8008a66:	e005      	b.n	8008a74 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da06      	bge.n	8008a8a <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	609a      	str	r2, [r3, #8]
 8008a88:	e005      	b.n	8008a96 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d059      	beq.n	8008b66 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da09      	bge.n	8008ace <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abe:	425b      	negs	r3, r3
 8008ac0:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	615a      	str	r2, [r3, #20]
 8008acc:	e005      	b.n	8008ada <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad2:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da0d      	bge.n	8008afe <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	425b      	negs	r3, r3
 8008ae8:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695a      	ldr	r2, [r3, #20]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	0419      	lsls	r1, r3, #16
 8008af2:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <DMA_List_BuildNode+0x2ac>)
 8008af4:	400b      	ands	r3, r1
 8008af6:	431a      	orrs	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	615a      	str	r2, [r3, #20]
 8008afc:	e009      	b.n	8008b12 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	0419      	lsls	r1, r3, #16
 8008b08:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <DMA_List_BuildNode+0x2ac>)
 8008b0a:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da08      	bge.n	8008b2c <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	425b      	negs	r3, r3
 8008b20:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	619a      	str	r2, [r3, #24]
 8008b2a:	e004      	b.n	8008b36 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da0b      	bge.n	8008b56 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b42:	425b      	negs	r3, r3
 8008b44:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	619a      	str	r2, [r3, #24]
 8008b54:	e007      	b.n	8008b66 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008b60:	431a      	orrs	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d006      	beq.n	8008b88 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8008b86:	e005      	b.n	8008b94 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	621a      	str	r2, [r3, #32]
}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	07ff0000 	.word	0x07ff0000
 8008ba4:	1fff0000 	.word	0x1fff0000

08008ba8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	0c1b      	lsrs	r3, r3, #16
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e00a      	b.n	8008bea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e004      	b.n	8008bea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	0c1b      	lsrs	r3, r3, #16
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d001      	beq.n	8008bfa <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e00e      	b.n	8008c46 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e006      	b.n	8008c46 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d001      	beq.n	8008c5c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e00b      	b.n	8008c74 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d001      	beq.n	8008c72 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e000      	b.n	8008c74 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00c      	beq.n	8008cb2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4a0d      	ldr	r2, [pc, #52]	; (8008cd8 <DMA_List_GetCLLRNodeInfo+0x58>)
 8008ca2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00f      	beq.n	8008cca <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2207      	movs	r2, #7
 8008cae:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8008cb0:	e00b      	b.n	8008cca <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <DMA_List_GetCLLRNodeInfo+0x5c>)
 8008cbc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	601a      	str	r2, [r3, #0]
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	fe010000 	.word	0xfe010000
 8008cdc:	f8010000 	.word	0xf8010000

08008ce0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b089      	sub	sp, #36	; 0x24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d142      	bne.n	8008d8a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8008d04:	e01d      	b.n	8008d42 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d107      	bne.n	8008d1c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008d16:	4013      	ands	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	e00f      	b.n	8008d3c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	0c1b      	lsrs	r3, r3, #16
 8008d26:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008d34:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008d38:	4013      	ands	r3, r2
 8008d3a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d3dc      	bcc.n	8008d06 <DMA_List_FindNode+0x26>
 8008d4c:	e029      	b.n	8008da2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d107      	bne.n	8008d64 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	e00f      	b.n	8008d84 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	0c1b      	lsrs	r3, r3, #16
 8008d6e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	4413      	add	r3, r2
 8008d74:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008d7c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008d80:	4013      	ands	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	3301      	adds	r3, #1
 8008d88:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d206      	bcs.n	8008da2 <DMA_List_FindNode+0xc2>
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d1d5      	bne.n	8008d4e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008dae:	4013      	ands	r3, r2
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d001      	beq.n	8008dba <DMA_List_FindNode+0xda>
    {
      return 1U;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e02b      	b.n	8008e12 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	0c1b      	lsrs	r3, r3, #16
 8008dd6:	041b      	lsls	r3, r3, #16
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	461a      	mov	r2, r3
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00f      	beq.n	8008e10 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	461a      	mov	r2, r3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008e00:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	0c1b      	lsrs	r3, r3, #16
 8008e08:	041b      	lsls	r3, r3, #16
 8008e0a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3724      	adds	r7, #36	; 0x24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	460b      	mov	r3, r1
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d011      	beq.n	8008e5a <HAL_EXTI_RegisterCallback+0x3c>
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	dc13      	bgt.n	8008e62 <HAL_EXTI_RegisterCallback+0x44>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_EXTI_RegisterCallback+0x26>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d007      	beq.n	8008e52 <HAL_EXTI_RegisterCallback+0x34>
 8008e42:	e00e      	b.n	8008e62 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	609a      	str	r2, [r3, #8]
      break;
 8008e50:	e00a      	b.n	8008e68 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
      break;
 8008e58:	e006      	b.n	8008e68 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	609a      	str	r2, [r3, #8]
      break;
 8008e60:	e002      	b.n	8008e68 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
      break;
 8008e66:	bf00      	nop
  }

  return status;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e003      	b.n	8008e92 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008e90:	2300      	movs	r3, #0
  }
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008eae:	e136      	b.n	800911e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8128 	beq.w	8009118 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d003      	beq.n	8008ed8 <HAL_GPIO_Init+0x38>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	2b12      	cmp	r3, #18
 8008ed6:	d125      	bne.n	8008f24 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	08da      	lsrs	r2, r3, #3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3208      	adds	r2, #8
 8008ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	220f      	movs	r2, #15
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f003 020f 	and.w	r2, r3, #15
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	08da      	lsrs	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3208      	adds	r2, #8
 8008f1e:	6979      	ldr	r1, [r7, #20]
 8008f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	2203      	movs	r2, #3
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	43db      	mvns	r3, r3
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f003 0203 	and.w	r2, r3, #3
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d00b      	beq.n	8008f78 <HAL_GPIO_Init+0xd8>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d007      	beq.n	8008f78 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f6c:	2b11      	cmp	r3, #17
 8008f6e:	d003      	beq.n	8008f78 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b12      	cmp	r3, #18
 8008f76:	d130      	bne.n	8008fda <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	2203      	movs	r2, #3
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fae:	2201      	movs	r2, #1
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb6:	43db      	mvns	r3, r3
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	f003 0201 	and.w	r2, r3, #1
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d017      	beq.n	8009012 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	2203      	movs	r2, #3
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d07c      	beq.n	8009118 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800901e:	4a47      	ldr	r2, [pc, #284]	; (800913c <HAL_GPIO_Init+0x29c>)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	089b      	lsrs	r3, r3, #2
 8009024:	3318      	adds	r3, #24
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f003 0303 	and.w	r3, r3, #3
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	220f      	movs	r2, #15
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4013      	ands	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	0a9a      	lsrs	r2, r3, #10
 8009046:	4b3e      	ldr	r3, [pc, #248]	; (8009140 <HAL_GPIO_Init+0x2a0>)
 8009048:	4013      	ands	r3, r2
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	f002 0203 	and.w	r2, r2, #3
 8009050:	00d2      	lsls	r2, r2, #3
 8009052:	4093      	lsls	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800905a:	4938      	ldr	r1, [pc, #224]	; (800913c <HAL_GPIO_Init+0x29c>)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	089b      	lsrs	r3, r3, #2
 8009060:	3318      	adds	r3, #24
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009068:	4b34      	ldr	r3, [pc, #208]	; (800913c <HAL_GPIO_Init+0x29c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	43db      	mvns	r3, r3
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4013      	ands	r3, r2
 8009076:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800908c:	4a2b      	ldr	r2, [pc, #172]	; (800913c <HAL_GPIO_Init+0x29c>)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <HAL_GPIO_Init+0x29c>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	43db      	mvns	r3, r3
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4013      	ands	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80090b6:	4a21      	ldr	r2, [pc, #132]	; (800913c <HAL_GPIO_Init+0x29c>)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80090bc:	4b1f      	ldr	r3, [pc, #124]	; (800913c <HAL_GPIO_Init+0x29c>)
 80090be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	43db      	mvns	r3, r3
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4013      	ands	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80090e2:	4a16      	ldr	r2, [pc, #88]	; (800913c <HAL_GPIO_Init+0x29c>)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <HAL_GPIO_Init+0x29c>)
 80090ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4013      	ands	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <HAL_GPIO_Init+0x29c>)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	3301      	adds	r3, #1
 800911c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f aec1 	bne.w	8008eb0 <HAL_GPIO_Init+0x10>
  }
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	44022000 	.word	0x44022000
 8009140:	002f7f7f 	.word	0x002f7f7f

08009144 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009152:	e0a0      	b.n	8009296 <HAL_GPIO_DeInit+0x152>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009154:	2201      	movs	r2, #1
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	4013      	ands	r3, r2
 8009160:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8093 	beq.w	8009290 <HAL_GPIO_DeInit+0x14c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 800916a:	4a52      	ldr	r2, [pc, #328]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	3318      	adds	r3, #24
 8009172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009176:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	220f      	movs	r2, #15
 8009182:	fa02 f303 	lsl.w	r3, r2, r3
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4013      	ands	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	0a9a      	lsrs	r2, r3, #10
 8009190:	4b49      	ldr	r3, [pc, #292]	; (80092b8 <HAL_GPIO_DeInit+0x174>)
 8009192:	4013      	ands	r3, r2
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	f002 0203 	and.w	r2, r2, #3
 800919a:	00d2      	lsls	r2, r2, #3
 800919c:	4093      	lsls	r3, r2
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d136      	bne.n	8009212 <HAL_GPIO_DeInit+0xce>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80091a4:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	43db      	mvns	r3, r3
 80091ae:	4941      	ldr	r1, [pc, #260]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80091b6:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	43db      	mvns	r3, r3
 80091c0:	493c      	ldr	r1, [pc, #240]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80091c8:	4b3a      	ldr	r3, [pc, #232]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	43db      	mvns	r3, r3
 80091d0:	4938      	ldr	r1, [pc, #224]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80091d6:	4b37      	ldr	r3, [pc, #220]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	43db      	mvns	r3, r3
 80091de:	4935      	ldr	r1, [pc, #212]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	604b      	str	r3, [r1, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	220f      	movs	r2, #15
 80091ee:	fa02 f303 	lsl.w	r3, r2, r3
 80091f2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80091f4:	4a2f      	ldr	r2, [pc, #188]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	089b      	lsrs	r3, r3, #2
 80091fa:	3318      	adds	r3, #24
 80091fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	43da      	mvns	r2, r3
 8009204:	482b      	ldr	r0, [pc, #172]	; (80092b4 <HAL_GPIO_DeInit+0x170>)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	089b      	lsrs	r3, r3, #2
 800920a:	400a      	ands	r2, r1
 800920c:	3318      	adds	r3, #24
 800920e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	2103      	movs	r1, #3
 800921c:	fa01 f303 	lsl.w	r3, r1, r3
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	08da      	lsrs	r2, r3, #3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3208      	adds	r2, #8
 800922e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	220f      	movs	r2, #15
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	43db      	mvns	r3, r3
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	08d2      	lsrs	r2, r2, #3
 8009246:	4019      	ands	r1, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3208      	adds	r2, #8
 800924c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	2103      	movs	r1, #3
 800925a:	fa01 f303 	lsl.w	r3, r1, r3
 800925e:	43db      	mvns	r3, r3
 8009260:	401a      	ands	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	2101      	movs	r1, #1
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	fa01 f303 	lsl.w	r3, r1, r3
 8009272:	43db      	mvns	r3, r3
 8009274:	401a      	ands	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	2103      	movs	r1, #3
 8009284:	fa01 f303 	lsl.w	r3, r1, r3
 8009288:	43db      	mvns	r3, r3
 800928a:	401a      	ands	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3301      	adds	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af58 	bne.w	8009154 <HAL_GPIO_DeInit+0x10>
  }
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	44022000 	.word	0x44022000
 80092b8:	002f7f7f 	.word	0x002f7f7f

080092bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	887b      	ldrh	r3, [r7, #2]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e001      	b.n	80092de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	807b      	strh	r3, [r7, #2]
 80092f8:	4613      	mov	r3, r2
 80092fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092fc:	787b      	ldrb	r3, [r7, #1]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009302:	887a      	ldrh	r2, [r7, #2]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009308:	e002      	b.n	8009310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800930a:	887a      	ldrh	r2, [r7, #2]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e08d      	b.n	800944a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8b4 	bl	80094b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2224      	movs	r2, #36	; 0x24
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800936c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800937c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d107      	bne.n	8009396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009392:	609a      	str	r2, [r3, #8]
 8009394:	e006      	b.n	80093a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d108      	bne.n	80093be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	e007      	b.n	80093ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80093dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	69d9      	ldr	r1, [r3, #28]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a1a      	ldr	r2, [r3, #32]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0201 	orr.w	r2, r2, #1
 800942a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e021      	b.n	80094a8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	; 0x24
 8009468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f821 	bl	80094c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	461a      	mov	r2, r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	817b      	strh	r3, [r7, #10]
 80094ea:	460b      	mov	r3, r1
 80094ec:	813b      	strh	r3, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	f040 80f9 	bne.w	80096f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <HAL_I2C_Mem_Write+0x34>
 8009506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009512:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0ed      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_I2C_Mem_Write+0x4e>
 8009522:	2302      	movs	r3, #2
 8009524:	e0e6      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800952e:	f7fd f9a9 	bl	8006884 <HAL_GetTick>
 8009532:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2319      	movs	r3, #25
 800953a:	2201      	movs	r2, #1
 800953c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 fadd 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e0d1      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2221      	movs	r2, #33	; 0x21
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2240      	movs	r2, #64	; 0x40
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009578:	88f8      	ldrh	r0, [r7, #6]
 800957a:	893a      	ldrh	r2, [r7, #8]
 800957c:	8979      	ldrh	r1, [r7, #10]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	4603      	mov	r3, r0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 f9ed 	bl	8009968 <I2C_RequestMemoryWrite>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0a9      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2bff      	cmp	r3, #255	; 0xff
 80095a8:	d90e      	bls.n	80095c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	22ff      	movs	r2, #255	; 0xff
 80095ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	8979      	ldrh	r1, [r7, #10]
 80095b8:	2300      	movs	r3, #0
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fc57 	bl	8009e74 <I2C_TransferConfig>
 80095c6:	e00f      	b.n	80095e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	8979      	ldrh	r1, [r7, #10]
 80095da:	2300      	movs	r3, #0
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 fc46 	bl	8009e74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fad6 	bl	8009b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e07b      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	781a      	ldrb	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d034      	beq.n	80096a0 <HAL_I2C_Mem_Write+0x1c8>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963a:	2b00      	cmp	r3, #0
 800963c:	d130      	bne.n	80096a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	2200      	movs	r2, #0
 8009646:	2180      	movs	r1, #128	; 0x80
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fa59 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e04d      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965c:	b29b      	uxth	r3, r3
 800965e:	2bff      	cmp	r3, #255	; 0xff
 8009660:	d90e      	bls.n	8009680 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966c:	b2da      	uxtb	r2, r3
 800966e:	8979      	ldrh	r1, [r7, #10]
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fbfb 	bl	8009e74 <I2C_TransferConfig>
 800967e:	e00f      	b.n	80096a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968e:	b2da      	uxtb	r2, r3
 8009690:	8979      	ldrh	r1, [r7, #10]
 8009692:	2300      	movs	r3, #0
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fbea 	bl	8009e74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d19e      	bne.n	80095e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fabc 	bl	8009c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e01a      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2220      	movs	r2, #32
 80096c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6859      	ldr	r1, [r3, #4]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <HAL_I2C_Mem_Write+0x224>)
 80096d2:	400b      	ands	r3, r1
 80096d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2220      	movs	r2, #32
 80096da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e000      	b.n	80096f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80096f2:	2302      	movs	r3, #2
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	fe00e800 	.word	0xfe00e800

08009700 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	4608      	mov	r0, r1
 800970a:	4611      	mov	r1, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4603      	mov	r3, r0
 8009710:	817b      	strh	r3, [r7, #10]
 8009712:	460b      	mov	r3, r1
 8009714:	813b      	strh	r3, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b20      	cmp	r3, #32
 8009724:	f040 80fd 	bne.w	8009922 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_I2C_Mem_Read+0x34>
 800972e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800973a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e0f1      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_I2C_Mem_Read+0x4e>
 800974a:	2302      	movs	r3, #2
 800974c:	e0ea      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009756:	f7fd f895 	bl	8006884 <HAL_GetTick>
 800975a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2319      	movs	r3, #25
 8009762:	2201      	movs	r2, #1
 8009764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f9c9 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e0d5      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2222      	movs	r2, #34	; 0x22
 800977c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2240      	movs	r2, #64	; 0x40
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80097a0:	88f8      	ldrh	r0, [r7, #6]
 80097a2:	893a      	ldrh	r2, [r7, #8]
 80097a4:	8979      	ldrh	r1, [r7, #10]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4603      	mov	r3, r0
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f92d 	bl	8009a10 <I2C_RequestMemoryRead>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e0ad      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2bff      	cmp	r3, #255	; 0xff
 80097d0:	d90e      	bls.n	80097f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	22ff      	movs	r2, #255	; 0xff
 80097d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	8979      	ldrh	r1, [r7, #10]
 80097e0:	4b52      	ldr	r3, [pc, #328]	; (800992c <HAL_I2C_Mem_Read+0x22c>)
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 fb43 	bl	8009e74 <I2C_TransferConfig>
 80097ee:	e00f      	b.n	8009810 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	8979      	ldrh	r1, [r7, #10]
 8009802:	4b4a      	ldr	r3, [pc, #296]	; (800992c <HAL_I2C_Mem_Read+0x22c>)
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 fb32 	bl	8009e74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2200      	movs	r2, #0
 8009818:	2104      	movs	r1, #4
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f970 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e07c      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d034      	beq.n	80098d0 <HAL_I2C_Mem_Read+0x1d0>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	d130      	bne.n	80098d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	2200      	movs	r2, #0
 8009876:	2180      	movs	r1, #128	; 0x80
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f941 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e04d      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988c:	b29b      	uxth	r3, r3
 800988e:	2bff      	cmp	r3, #255	; 0xff
 8009890:	d90e      	bls.n	80098b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	b2da      	uxtb	r2, r3
 800989e:	8979      	ldrh	r1, [r7, #10]
 80098a0:	2300      	movs	r3, #0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fae3 	bl	8009e74 <I2C_TransferConfig>
 80098ae:	e00f      	b.n	80098d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	8979      	ldrh	r1, [r7, #10]
 80098c2:	2300      	movs	r3, #0
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fad2 	bl	8009e74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d19a      	bne.n	8009810 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 f9a4 	bl	8009c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e01a      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2220      	movs	r2, #32
 80098f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6859      	ldr	r1, [r3, #4]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <HAL_I2C_Mem_Read+0x230>)
 8009902:	400b      	ands	r3, r1
 8009904:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	e000      	b.n	8009924 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009922:	2302      	movs	r3, #2
  }
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	80002400 	.word	0x80002400
 8009930:	fe00e800 	.word	0xfe00e800

08009934 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009942:	b2db      	uxtb	r3, r3
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	4608      	mov	r0, r1
 8009972:	4611      	mov	r1, r2
 8009974:	461a      	mov	r2, r3
 8009976:	4603      	mov	r3, r0
 8009978:	817b      	strh	r3, [r7, #10]
 800997a:	460b      	mov	r3, r1
 800997c:	813b      	strh	r3, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	8979      	ldrh	r1, [r7, #10]
 8009988:	4b20      	ldr	r3, [pc, #128]	; (8009a0c <I2C_RequestMemoryWrite+0xa4>)
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fa6f 	bl	8009e74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	69b9      	ldr	r1, [r7, #24]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 f8ff 	bl	8009b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e02c      	b.n	8009a04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d105      	bne.n	80099bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099b0:	893b      	ldrh	r3, [r7, #8]
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	629a      	str	r2, [r3, #40]	; 0x28
 80099ba:	e015      	b.n	80099e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099bc:	893b      	ldrh	r3, [r7, #8]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	69b9      	ldr	r1, [r7, #24]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f8e5 	bl	8009b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e012      	b.n	8009a04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099de:	893b      	ldrh	r3, [r7, #8]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	2200      	movs	r2, #0
 80099f0:	2180      	movs	r1, #128	; 0x80
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 f884 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	80002000 	.word	0x80002000

08009a10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	817b      	strh	r3, [r7, #10]
 8009a22:	460b      	mov	r3, r1
 8009a24:	813b      	strh	r3, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009a2a:	88fb      	ldrh	r3, [r7, #6]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	8979      	ldrh	r1, [r7, #10]
 8009a30:	4b20      	ldr	r3, [pc, #128]	; (8009ab4 <I2C_RequestMemoryRead+0xa4>)
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fa1c 	bl	8009e74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	69b9      	ldr	r1, [r7, #24]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f8ac 	bl	8009b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e02c      	b.n	8009aaa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d105      	bne.n	8009a62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a56:	893b      	ldrh	r3, [r7, #8]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8009a60:	e015      	b.n	8009a8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a62:	893b      	ldrh	r3, [r7, #8]
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	69b9      	ldr	r1, [r7, #24]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f892 	bl	8009b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e012      	b.n	8009aaa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a84:	893b      	ldrh	r3, [r7, #8]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2140      	movs	r1, #64	; 0x40
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f831 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	80002000 	.word	0x80002000

08009ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d103      	bne.n	8009ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d007      	beq.n	8009af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	619a      	str	r2, [r3, #24]
  }
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b10:	e031      	b.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b18:	d02d      	beq.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1a:	f7fc feb3 	bl	8006884 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d302      	bcc.n	8009b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d122      	bne.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	bf0c      	ite	eq
 8009b40:	2301      	moveq	r3, #1
 8009b42:	2300      	movne	r3, #0
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d113      	bne.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	f043 0220 	orr.w	r2, r3, #32
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e00f      	b.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	bf0c      	ite	eq
 8009b86:	2301      	moveq	r3, #1
 8009b88:	2300      	movne	r3, #0
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d0be      	beq.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009baa:	e033      	b.n	8009c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	68b9      	ldr	r1, [r7, #8]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f87f 	bl	8009cb4 <I2C_IsErrorOccurred>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e031      	b.n	8009c24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc6:	d025      	beq.n	8009c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc8:	f7fc fe5c 	bl	8006884 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d11a      	bne.n	8009c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d013      	beq.n	8009c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf0:	f043 0220 	orr.w	r2, r3, #32
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e007      	b.n	8009c24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d1c4      	bne.n	8009bac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c38:	e02f      	b.n	8009c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f838 	bl	8009cb4 <I2C_IsErrorOccurred>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e02d      	b.n	8009caa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4e:	f7fc fe19 	bl	8006884 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11a      	bne.n	8009c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d013      	beq.n	8009c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c76:	f043 0220 	orr.w	r2, r3, #32
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e007      	b.n	8009caa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b20      	cmp	r3, #32
 8009ca6:	d1c8      	bne.n	8009c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	; 0x28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d068      	beq.n	8009db2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ce8:	e049      	b.n	8009d7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d045      	beq.n	8009d7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cf2:	f7fc fdc7 	bl	8006884 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d302      	bcc.n	8009d08 <I2C_IsErrorOccurred+0x54>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d13a      	bne.n	8009d7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d2a:	d121      	bne.n	8009d70 <I2C_IsErrorOccurred+0xbc>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d32:	d01d      	beq.n	8009d70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d34:	7cfb      	ldrb	r3, [r7, #19]
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	d01a      	beq.n	8009d70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d4a:	f7fc fd9b 	bl	8006884 <HAL_GetTick>
 8009d4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d50:	e00e      	b.n	8009d70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d52:	f7fc fd97 	bl	8006884 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b19      	cmp	r3, #25
 8009d5e:	d907      	bls.n	8009d70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	f043 0320 	orr.w	r3, r3, #32
 8009d66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009d6e:	e006      	b.n	8009d7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d1e9      	bne.n	8009d52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d003      	beq.n	8009d94 <I2C_IsErrorOccurred+0xe0>
 8009d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0aa      	beq.n	8009cea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2220      	movs	r2, #32
 8009da2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	f043 0304 	orr.w	r3, r3, #4
 8009daa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00b      	beq.n	8009ddc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f043 0308 	orr.w	r3, r3, #8
 8009dec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009df6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00b      	beq.n	8009e20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	f043 0302 	orr.w	r3, r3, #2
 8009e0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01c      	beq.n	8009e62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff fe45 	bl	8009ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6859      	ldr	r1, [r3, #4]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <I2C_IsErrorOccurred+0x1bc>)
 8009e3a:	400b      	ands	r3, r1
 8009e3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	431a      	orrs	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3728      	adds	r7, #40	; 0x28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	fe00e800 	.word	0xfe00e800

08009e74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	817b      	strh	r3, [r7, #10]
 8009e82:	4613      	mov	r3, r2
 8009e84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e86:	897b      	ldrh	r3, [r7, #10]
 8009e88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e8c:	7a7b      	ldrb	r3, [r7, #9]
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ea2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	0d5b      	lsrs	r3, r3, #21
 8009eae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <I2C_TransferConfig+0x60>)
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	43db      	mvns	r3, r3
 8009eb8:	ea02 0103 	and.w	r1, r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	03ff63ff 	.word	0x03ff63ff

08009ed8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d138      	bne.n	8009f60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e032      	b.n	8009f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2224      	movs	r2, #36	; 0x24
 8009f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0201 	bic.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6819      	ldr	r1, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0201 	orr.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e000      	b.n	8009f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f60:	2302      	movs	r3, #2
  }
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b085      	sub	sp, #20
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b20      	cmp	r3, #32
 8009f82:	d139      	bne.n	8009ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e033      	b.n	8009ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2224      	movs	r2, #36	; 0x24
 8009f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800a014:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
 800a024:	e007      	b.n	800a036 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800a026:	4b07      	ldr	r3, [pc, #28]	; (800a044 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f023 0204 	bic.w	r2, r3, #4
 800a02e:	4905      	ldr	r1, [pc, #20]	; (800a044 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4313      	orrs	r3, r2
 800a034:	600b      	str	r3, [r1, #0]
  }

  return status;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	40030400 	.word	0x40030400

0800a048 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <HAL_ICACHE_Enable+0x1c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a04      	ldr	r2, [pc, #16]	; (800a064 <HAL_ICACHE_Enable+0x1c>)
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	40030400 	.word	0x40030400

0800a068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d102      	bne.n	800a07c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f000 bc28 	b.w	800a8cc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a07c:	4b94      	ldr	r3, [pc, #592]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f003 0318 	and.w	r3, r3, #24
 800a084:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800a086:	4b92      	ldr	r3, [pc, #584]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	f003 0303 	and.w	r3, r3, #3
 800a08e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0310 	and.w	r3, r3, #16
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d05b      	beq.n	800a154 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	d005      	beq.n	800a0ae <HAL_RCC_OscConfig+0x46>
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	2b18      	cmp	r3, #24
 800a0a6:	d114      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d111      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f000 bc08 	b.w	800a8cc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800a0bc:	4b84      	ldr	r3, [pc, #528]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4981      	ldr	r1, [pc, #516]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800a0d0:	e040      	b.n	800a154 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d023      	beq.n	800a122 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a0da:	4b7d      	ldr	r3, [pc, #500]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a7c      	ldr	r2, [pc, #496]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e6:	f7fc fbcd 	bl	8006884 <HAL_GetTick>
 800a0ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800a0ec:	e008      	b.n	800a100 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800a0ee:	f7fc fbc9 	bl	8006884 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d901      	bls.n	800a100 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e3e5      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800a100:	4b73      	ldr	r3, [pc, #460]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0f0      	beq.n	800a0ee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800a10c:	4b70      	ldr	r3, [pc, #448]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	496d      	ldr	r1, [pc, #436]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	618b      	str	r3, [r1, #24]
 800a120:	e018      	b.n	800a154 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a122:	4b6b      	ldr	r3, [pc, #428]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a6a      	ldr	r2, [pc, #424]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a12c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12e:	f7fc fba9 	bl	8006884 <HAL_GetTick>
 800a132:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800a134:	e008      	b.n	800a148 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800a136:	f7fc fba5 	bl	8006884 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e3c1      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800a148:	4b61      	ldr	r3, [pc, #388]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1f0      	bne.n	800a136 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 80a0 	beq.w	800a2a2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b10      	cmp	r3, #16
 800a166:	d005      	beq.n	800a174 <HAL_RCC_OscConfig+0x10c>
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b18      	cmp	r3, #24
 800a16c:	d109      	bne.n	800a182 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d106      	bne.n	800a182 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f040 8092 	bne.w	800a2a2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e3a4      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18a:	d106      	bne.n	800a19a <HAL_RCC_OscConfig+0x132>
 800a18c:	4b50      	ldr	r3, [pc, #320]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a4f      	ldr	r2, [pc, #316]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	e058      	b.n	800a24c <HAL_RCC_OscConfig+0x1e4>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d112      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x160>
 800a1a2:	4b4b      	ldr	r3, [pc, #300]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a4a      	ldr	r2, [pc, #296]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	4b48      	ldr	r3, [pc, #288]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a47      	ldr	r2, [pc, #284]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a44      	ldr	r2, [pc, #272]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	e041      	b.n	800a24c <HAL_RCC_OscConfig+0x1e4>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1d0:	d112      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x190>
 800a1d2:	4b3f      	ldr	r3, [pc, #252]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a3e      	ldr	r2, [pc, #248]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a3b      	ldr	r2, [pc, #236]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	4b39      	ldr	r3, [pc, #228]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a38      	ldr	r2, [pc, #224]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a1f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	e029      	b.n	800a24c <HAL_RCC_OscConfig+0x1e4>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a200:	d112      	bne.n	800a228 <HAL_RCC_OscConfig+0x1c0>
 800a202:	4b33      	ldr	r3, [pc, #204]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a32      	ldr	r2, [pc, #200]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	4b30      	ldr	r3, [pc, #192]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a2f      	ldr	r2, [pc, #188]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	4b2d      	ldr	r3, [pc, #180]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a2c      	ldr	r2, [pc, #176]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e011      	b.n	800a24c <HAL_RCC_OscConfig+0x1e4>
 800a228:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a28      	ldr	r2, [pc, #160]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	4b26      	ldr	r3, [pc, #152]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a25      	ldr	r2, [pc, #148]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a23a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	4b23      	ldr	r3, [pc, #140]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a246:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a24a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d013      	beq.n	800a27c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a254:	f7fc fb16 	bl	8006884 <HAL_GetTick>
 800a258:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800a25c:	f7fc fb12 	bl	8006884 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b64      	cmp	r3, #100	; 0x64
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e32e      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a26e:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f0      	beq.n	800a25c <HAL_RCC_OscConfig+0x1f4>
 800a27a:	e012      	b.n	800a2a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fc fb02 	bl	8006884 <HAL_GetTick>
 800a280:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800a284:	f7fc fafe 	bl	8006884 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b64      	cmp	r3, #100	; 0x64
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e31a      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a296:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <HAL_RCC_OscConfig+0x268>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 809a 	beq.w	800a3e4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x25a>
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	2b18      	cmp	r3, #24
 800a2ba:	d149      	bne.n	800a350 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d146      	bne.n	800a350 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d104      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e2fe      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
 800a2ce:	bf00      	nop
 800a2d0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d11c      	bne.n	800a314 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800a2da:	4b9a      	ldr	r3, [pc, #616]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0218 	and.w	r2, r3, #24
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d014      	beq.n	800a314 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800a2ea:	4b96      	ldr	r3, [pc, #600]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f023 0218 	bic.w	r2, r3, #24
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	4993      	ldr	r1, [pc, #588]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800a2fc:	f000 fdd0 	bl	800aea0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a300:	4b91      	ldr	r3, [pc, #580]	; (800a548 <HAL_RCC_OscConfig+0x4e0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f7fc fa73 	bl	80067f0 <HAL_InitTick>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e2db      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a314:	f7fc fab6 	bl	8006884 <HAL_GetTick>
 800a318:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a31a:	e008      	b.n	800a32e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800a31c:	f7fc fab2 	bl	8006884 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e2ce      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a32e:	4b85      	ldr	r3, [pc, #532]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0f0      	beq.n	800a31c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800a33a:	4b82      	ldr	r3, [pc, #520]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	497e      	ldr	r1, [pc, #504]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800a34e:	e049      	b.n	800a3e4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02c      	beq.n	800a3b2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800a358:	4b7a      	ldr	r3, [pc, #488]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f023 0218 	bic.w	r2, r3, #24
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	4977      	ldr	r1, [pc, #476]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a366:	4313      	orrs	r3, r2
 800a368:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800a36a:	4b76      	ldr	r3, [pc, #472]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a75      	ldr	r2, [pc, #468]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a370:	f043 0301 	orr.w	r3, r3, #1
 800a374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a376:	f7fc fa85 	bl	8006884 <HAL_GetTick>
 800a37a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a37c:	e008      	b.n	800a390 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800a37e:	f7fc fa81 	bl	8006884 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d901      	bls.n	800a390 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e29d      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a390:	4b6c      	ldr	r3, [pc, #432]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0f0      	beq.n	800a37e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800a39c:	4b69      	ldr	r3, [pc, #420]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	041b      	lsls	r3, r3, #16
 800a3aa:	4966      	ldr	r1, [pc, #408]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	610b      	str	r3, [r1, #16]
 800a3b0:	e018      	b.n	800a3e4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3b2:	4b64      	ldr	r3, [pc, #400]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a63      	ldr	r2, [pc, #396]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3be:	f7fc fa61 	bl	8006884 <HAL_GetTick>
 800a3c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3c4:	e008      	b.n	800a3d8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800a3c6:	f7fc fa5d 	bl	8006884 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e279      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3d8:	4b5a      	ldr	r3, [pc, #360]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1f0      	bne.n	800a3c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d03c      	beq.n	800a46a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01c      	beq.n	800a432 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3f8:	4b52      	ldr	r3, [pc, #328]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a3fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3fe:	4a51      	ldr	r2, [pc, #324]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a404:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a408:	f7fc fa3c 	bl	8006884 <HAL_GetTick>
 800a40c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800a410:	f7fc fa38 	bl	8006884 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e254      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a422:	4b48      	ldr	r3, [pc, #288]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0ef      	beq.n	800a410 <HAL_RCC_OscConfig+0x3a8>
 800a430:	e01b      	b.n	800a46a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a432:	4b44      	ldr	r3, [pc, #272]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a438:	4a42      	ldr	r2, [pc, #264]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a43a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a43e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a442:	f7fc fa1f 	bl	8006884 <HAL_GetTick>
 800a446:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a448:	e008      	b.n	800a45c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800a44a:	f7fc fa1b 	bl	8006884 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b02      	cmp	r3, #2
 800a456:	d901      	bls.n	800a45c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e237      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a45c:	4b39      	ldr	r3, [pc, #228]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a45e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1ef      	bne.n	800a44a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80d2 	beq.w	800a61c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800a478:	4b34      	ldr	r3, [pc, #208]	; (800a54c <HAL_RCC_OscConfig+0x4e4>)
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d118      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800a484:	4b31      	ldr	r3, [pc, #196]	; (800a54c <HAL_RCC_OscConfig+0x4e4>)
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	4a30      	ldr	r2, [pc, #192]	; (800a54c <HAL_RCC_OscConfig+0x4e4>)
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a490:	f7fc f9f8 	bl	8006884 <HAL_GetTick>
 800a494:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800a496:	e008      	b.n	800a4aa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a498:	f7fc f9f4 	bl	8006884 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d901      	bls.n	800a4aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e210      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800a4aa:	4b28      	ldr	r3, [pc, #160]	; (800a54c <HAL_RCC_OscConfig+0x4e4>)
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0f0      	beq.n	800a498 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d108      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x468>
 800a4be:	4b21      	ldr	r3, [pc, #132]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4c4:	4a1f      	ldr	r2, [pc, #124]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4c6:	f043 0301 	orr.w	r3, r3, #1
 800a4ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a4ce:	e074      	b.n	800a5ba <HAL_RCC_OscConfig+0x552>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d118      	bne.n	800a50a <HAL_RCC_OscConfig+0x4a2>
 800a4d8:	4b1a      	ldr	r3, [pc, #104]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4de:	4a19      	ldr	r2, [pc, #100]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4ee:	4a15      	ldr	r2, [pc, #84]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a4f8:	4b12      	ldr	r3, [pc, #72]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a4fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4fe:	4a11      	ldr	r2, [pc, #68]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a500:	f023 0304 	bic.w	r3, r3, #4
 800a504:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a508:	e057      	b.n	800a5ba <HAL_RCC_OscConfig+0x552>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	2b05      	cmp	r3, #5
 800a510:	d11e      	bne.n	800a550 <HAL_RCC_OscConfig+0x4e8>
 800a512:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a518:	4a0a      	ldr	r2, [pc, #40]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a51a:	f043 0304 	orr.w	r3, r3, #4
 800a51e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a522:	4b08      	ldr	r3, [pc, #32]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a528:	4a06      	ldr	r2, [pc, #24]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a52e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a532:	4b04      	ldr	r3, [pc, #16]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a538:	4a02      	ldr	r2, [pc, #8]	; (800a544 <HAL_RCC_OscConfig+0x4dc>)
 800a53a:	f043 0301 	orr.w	r3, r3, #1
 800a53e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a542:	e03a      	b.n	800a5ba <HAL_RCC_OscConfig+0x552>
 800a544:	44020c00 	.word	0x44020c00
 800a548:	200000ec 	.word	0x200000ec
 800a54c:	44020800 	.word	0x44020800
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	2b85      	cmp	r3, #133	; 0x85
 800a556:	d118      	bne.n	800a58a <HAL_RCC_OscConfig+0x522>
 800a558:	4ba2      	ldr	r3, [pc, #648]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a55a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a55e:	4aa1      	ldr	r2, [pc, #644]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a560:	f043 0304 	orr.w	r3, r3, #4
 800a564:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a568:	4b9e      	ldr	r3, [pc, #632]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a56a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a56e:	4a9d      	ldr	r2, [pc, #628]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a574:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a578:	4b9a      	ldr	r3, [pc, #616]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a57a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a57e:	4a99      	ldr	r2, [pc, #612]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a588:	e017      	b.n	800a5ba <HAL_RCC_OscConfig+0x552>
 800a58a:	4b96      	ldr	r3, [pc, #600]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a58c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a590:	4a94      	ldr	r2, [pc, #592]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a592:	f023 0301 	bic.w	r3, r3, #1
 800a596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a59a:	4b92      	ldr	r3, [pc, #584]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a59c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5a0:	4a90      	ldr	r2, [pc, #576]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a5a2:	f023 0304 	bic.w	r3, r3, #4
 800a5a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a5aa:	4b8e      	ldr	r3, [pc, #568]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a5ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5b0:	4a8c      	ldr	r2, [pc, #560]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a5b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d016      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c2:	f7fc f95f 	bl	8006884 <HAL_GetTick>
 800a5c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5c8:	e00a      	b.n	800a5e0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ca:	f7fc f95b 	bl	8006884 <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d901      	bls.n	800a5e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e175      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5e0:	4b80      	ldr	r3, [pc, #512]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a5e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0ed      	beq.n	800a5ca <HAL_RCC_OscConfig+0x562>
 800a5ee:	e015      	b.n	800a61c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5f0:	f7fc f948 	bl	8006884 <HAL_GetTick>
 800a5f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5f6:	e00a      	b.n	800a60e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f8:	f7fc f944 	bl	8006884 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	f241 3288 	movw	r2, #5000	; 0x1388
 800a606:	4293      	cmp	r3, r2
 800a608:	d901      	bls.n	800a60e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e15e      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a60e:	4b75      	ldr	r3, [pc, #468]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1ed      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0320 	and.w	r3, r3, #32
 800a624:	2b00      	cmp	r3, #0
 800a626:	d036      	beq.n	800a696 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d019      	beq.n	800a664 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a630:	4b6c      	ldr	r3, [pc, #432]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a6b      	ldr	r2, [pc, #428]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a63a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a63c:	f7fc f922 	bl	8006884 <HAL_GetTick>
 800a640:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a642:	e008      	b.n	800a656 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800a644:	f7fc f91e 	bl	8006884 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e13a      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a656:	4b63      	ldr	r3, [pc, #396]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0f0      	beq.n	800a644 <HAL_RCC_OscConfig+0x5dc>
 800a662:	e018      	b.n	800a696 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a664:	4b5f      	ldr	r3, [pc, #380]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a5e      	ldr	r2, [pc, #376]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a66e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a670:	f7fc f908 	bl	8006884 <HAL_GetTick>
 800a674:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800a678:	f7fc f904 	bl	8006884 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e120      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a68a:	4b56      	ldr	r3, [pc, #344]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 8115 	beq.w	800a8ca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b18      	cmp	r3, #24
 800a6a4:	f000 80af 	beq.w	800a806 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	f040 8086 	bne.w	800a7be <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800a6b2:	4b4c      	ldr	r3, [pc, #304]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a4b      	ldr	r2, [pc, #300]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a6b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6be:	f7fc f8e1 	bl	8006884 <HAL_GetTick>
 800a6c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a6c4:	e008      	b.n	800a6d8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800a6c6:	f7fc f8dd 	bl	8006884 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d901      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e0f9      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a6d8:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f0      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800a6e4:	4b3f      	ldr	r3, [pc, #252]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6f8:	0212      	lsls	r2, r2, #8
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	4939      	ldr	r1, [pc, #228]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	628b      	str	r3, [r1, #40]	; 0x28
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a706:	3b01      	subs	r3, #1
 800a708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	3b01      	subs	r3, #1
 800a712:	025b      	lsls	r3, r3, #9
 800a714:	b29b      	uxth	r3, r3
 800a716:	431a      	orrs	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71c:	3b01      	subs	r3, #1
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a724:	431a      	orrs	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	3b01      	subs	r3, #1
 800a72c:	061b      	lsls	r3, r3, #24
 800a72e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a732:	492c      	ldr	r1, [pc, #176]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a734:	4313      	orrs	r3, r2
 800a736:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800a738:	4b2a      	ldr	r3, [pc, #168]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	4a29      	ldr	r2, [pc, #164]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a73e:	f023 0310 	bic.w	r3, r3, #16
 800a742:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a748:	4a26      	ldr	r2, [pc, #152]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a74a:	00db      	lsls	r3, r3, #3
 800a74c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800a74e:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	4a24      	ldr	r2, [pc, #144]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a754:	f043 0310 	orr.w	r3, r3, #16
 800a758:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800a75a:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75e:	f023 020c 	bic.w	r2, r3, #12
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a766:	491f      	ldr	r1, [pc, #124]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a770:	f023 0220 	bic.w	r2, r3, #32
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a778:	491a      	ldr	r1, [pc, #104]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a77e:	4b19      	ldr	r3, [pc, #100]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	4a18      	ldr	r2, [pc, #96]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a788:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800a78a:	4b16      	ldr	r3, [pc, #88]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a796:	f7fc f875 	bl	8006884 <HAL_GetTick>
 800a79a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a79c:	e008      	b.n	800a7b0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800a79e:	f7fc f871 	bl	8006884 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d901      	bls.n	800a7b0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e08d      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d0f0      	beq.n	800a79e <HAL_RCC_OscConfig+0x736>
 800a7bc:	e085      	b.n	800a8ca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <HAL_RCC_OscConfig+0x77c>)
 800a7c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ca:	f7fc f85b 	bl	8006884 <HAL_GetTick>
 800a7ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a7d0:	e00a      	b.n	800a7e8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800a7d2:	f7fc f857 	bl	8006884 <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d903      	bls.n	800a7e8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e073      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
 800a7e4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a7e8:	4b3a      	ldr	r3, [pc, #232]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1ee      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a7f4:	4b37      	ldr	r3, [pc, #220]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	4a36      	ldr	r2, [pc, #216]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a7fa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a7fe:	f023 0303 	bic.w	r3, r3, #3
 800a802:	6293      	str	r3, [r2, #40]	; 0x28
 800a804:	e061      	b.n	800a8ca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a806:	4b33      	ldr	r3, [pc, #204]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a80c:	4b31      	ldr	r3, [pc, #196]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a810:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a816:	2b01      	cmp	r3, #1
 800a818:	d031      	beq.n	800a87e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f003 0203 	and.w	r2, r3, #3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a824:	429a      	cmp	r2, r3
 800a826:	d12a      	bne.n	800a87e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800a834:	429a      	cmp	r2, r3
 800a836:	d122      	bne.n	800a87e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a842:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800a844:	429a      	cmp	r2, r3
 800a846:	d11a      	bne.n	800a87e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	0a5b      	lsrs	r3, r3, #9
 800a84c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800a856:	429a      	cmp	r2, r3
 800a858:	d111      	bne.n	800a87e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	0c1b      	lsrs	r3, r3, #16
 800a85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a866:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800a868:	429a      	cmp	r2, r3
 800a86a:	d108      	bne.n	800a87e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	0e1b      	lsrs	r3, r3, #24
 800a870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d001      	beq.n	800a882 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e024      	b.n	800a8cc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a882:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a886:	08db      	lsrs	r3, r3, #3
 800a888:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a890:	429a      	cmp	r2, r3
 800a892:	d01a      	beq.n	800a8ca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800a894:	4b0f      	ldr	r3, [pc, #60]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	4a0e      	ldr	r2, [pc, #56]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a89a:	f023 0310 	bic.w	r3, r3, #16
 800a89e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a0:	f7fb fff0 	bl	8006884 <HAL_GetTick>
 800a8a4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800a8a6:	bf00      	nop
 800a8a8:	f7fb ffec 	bl	8006884 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d0f9      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b8:	4a06      	ldr	r2, [pc, #24]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c2:	4a04      	ldr	r2, [pc, #16]	; (800a8d4 <HAL_RCC_OscConfig+0x86c>)
 800a8c4:	f043 0310 	orr.w	r3, r3, #16
 800a8c8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3720      	adds	r7, #32
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	44020c00 	.word	0x44020c00

0800a8d8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e19e      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8ec:	4b83      	ldr	r3, [pc, #524]	; (800aafc <HAL_RCC_ClockConfig+0x224>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d910      	bls.n	800a91c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8fa:	4b80      	ldr	r3, [pc, #512]	; (800aafc <HAL_RCC_ClockConfig+0x224>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f023 020f 	bic.w	r2, r3, #15
 800a902:	497e      	ldr	r1, [pc, #504]	; (800aafc <HAL_RCC_ClockConfig+0x224>)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4313      	orrs	r3, r2
 800a908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a90a:	4b7c      	ldr	r3, [pc, #496]	; (800aafc <HAL_RCC_ClockConfig+0x224>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d001      	beq.n	800a91c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e186      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0310 	and.w	r3, r3, #16
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	695a      	ldr	r2, [r3, #20]
 800a92c:	4b74      	ldr	r3, [pc, #464]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	0a1b      	lsrs	r3, r3, #8
 800a932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a936:	429a      	cmp	r2, r3
 800a938:	d909      	bls.n	800a94e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800a93a:	4b71      	ldr	r3, [pc, #452]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	496d      	ldr	r1, [pc, #436]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b00      	cmp	r3, #0
 800a958:	d012      	beq.n	800a980 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691a      	ldr	r2, [r3, #16]
 800a95e:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	091b      	lsrs	r3, r3, #4
 800a964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a968:	429a      	cmp	r2, r3
 800a96a:	d909      	bls.n	800a980 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800a96c:	4b64      	ldr	r3, [pc, #400]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	4961      	ldr	r1, [pc, #388]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d010      	beq.n	800a9ae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	4b5b      	ldr	r3, [pc, #364]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a998:	429a      	cmp	r2, r3
 800a99a:	d908      	bls.n	800a9ae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800a99c:	4b58      	ldr	r3, [pc, #352]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4955      	ldr	r1, [pc, #340]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d010      	beq.n	800a9dc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	4b50      	ldr	r3, [pc, #320]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d908      	bls.n	800a9dc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800a9ca:	4b4d      	ldr	r3, [pc, #308]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 020f 	bic.w	r2, r3, #15
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	494a      	ldr	r1, [pc, #296]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8093 	beq.w	800ab10 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d107      	bne.n	800aa02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a9f2:	4b43      	ldr	r3, [pc, #268]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d121      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e113      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d107      	bne.n	800aa1a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa0a:	4b3d      	ldr	r3, [pc, #244]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d115      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e107      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d107      	bne.n	800aa32 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800aa22:	4b37      	ldr	r3, [pc, #220]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e0fb      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa32:	4b33      	ldr	r3, [pc, #204]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e0f3      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800aa42:	4b2f      	ldr	r3, [pc, #188]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f023 0203 	bic.w	r2, r3, #3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	492c      	ldr	r1, [pc, #176]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa54:	f7fb ff16 	bl	8006884 <HAL_GetTick>
 800aa58:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d112      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa62:	e00a      	b.n	800aa7a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800aa64:	f7fb ff0e 	bl	8006884 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e0d7      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa7a:	4b21      	ldr	r3, [pc, #132]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	f003 0318 	and.w	r3, r3, #24
 800aa82:	2b18      	cmp	r3, #24
 800aa84:	d1ee      	bne.n	800aa64 <HAL_RCC_ClockConfig+0x18c>
 800aa86:	e043      	b.n	800ab10 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d112      	bne.n	800aab6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa90:	e00a      	b.n	800aaa8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800aa92:	f7fb fef7 	bl	8006884 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e0c0      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aaa8:	4b15      	ldr	r3, [pc, #84]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f003 0318 	and.w	r3, r3, #24
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d1ee      	bne.n	800aa92 <HAL_RCC_ClockConfig+0x1ba>
 800aab4:	e02c      	b.n	800ab10 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d122      	bne.n	800ab04 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800aabe:	e00a      	b.n	800aad6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800aac0:	f7fb fee0 	bl	8006884 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	f241 3288 	movw	r2, #5000	; 0x1388
 800aace:	4293      	cmp	r3, r2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e0a9      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800aad6:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <HAL_RCC_ClockConfig+0x228>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 0318 	and.w	r3, r3, #24
 800aade:	2b08      	cmp	r3, #8
 800aae0:	d1ee      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x1e8>
 800aae2:	e015      	b.n	800ab10 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800aae4:	f7fb fece 	bl	8006884 <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d906      	bls.n	800ab04 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e097      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
 800aafa:	bf00      	nop
 800aafc:	40022000 	.word	0x40022000
 800ab00:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab04:	4b4b      	ldr	r3, [pc, #300]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	f003 0318 	and.w	r3, r3, #24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e9      	bne.n	800aae4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689a      	ldr	r2, [r3, #8]
 800ab20:	4b44      	ldr	r3, [pc, #272]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	f003 030f 	and.w	r3, r3, #15
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d208      	bcs.n	800ab3e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800ab2c:	4b41      	ldr	r3, [pc, #260]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	f023 020f 	bic.w	r2, r3, #15
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	493e      	ldr	r1, [pc, #248]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab3e:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <HAL_RCC_ClockConfig+0x360>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d210      	bcs.n	800ab6e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab4c:	4b3a      	ldr	r3, [pc, #232]	; (800ac38 <HAL_RCC_ClockConfig+0x360>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f023 020f 	bic.w	r2, r3, #15
 800ab54:	4938      	ldr	r1, [pc, #224]	; (800ac38 <HAL_RCC_ClockConfig+0x360>)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab5c:	4b36      	ldr	r3, [pc, #216]	; (800ac38 <HAL_RCC_ClockConfig+0x360>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 030f 	and.w	r3, r3, #15
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d001      	beq.n	800ab6e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e05d      	b.n	800ac2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d010      	beq.n	800ab9c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	4b2d      	ldr	r3, [pc, #180]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d208      	bcs.n	800ab9c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800ab8a:	4b2a      	ldr	r3, [pc, #168]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	4927      	ldr	r1, [pc, #156]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d012      	beq.n	800abce <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691a      	ldr	r2, [r3, #16]
 800abac:	4b21      	ldr	r3, [pc, #132]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	091b      	lsrs	r3, r3, #4
 800abb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d209      	bcs.n	800abce <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800abba:	4b1e      	ldr	r3, [pc, #120]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	491a      	ldr	r1, [pc, #104]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d012      	beq.n	800ac00 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	695a      	ldr	r2, [r3, #20]
 800abde:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	0a1b      	lsrs	r3, r3, #8
 800abe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abe8:	429a      	cmp	r2, r3
 800abea:	d209      	bcs.n	800ac00 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800abec:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	490e      	ldr	r1, [pc, #56]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ac00:	f000 f822 	bl	800ac48 <HAL_RCC_GetSysClockFreq>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <HAL_RCC_ClockConfig+0x35c>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f003 030f 	and.w	r3, r3, #15
 800ac0e:	490b      	ldr	r1, [pc, #44]	; (800ac3c <HAL_RCC_ClockConfig+0x364>)
 800ac10:	5ccb      	ldrb	r3, [r1, r3]
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	4a0a      	ldr	r2, [pc, #40]	; (800ac40 <HAL_RCC_ClockConfig+0x368>)
 800ac18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <HAL_RCC_ClockConfig+0x36c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fb fde6 	bl	80067f0 <HAL_InitTick>
 800ac24:	4603      	mov	r3, r0
 800ac26:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	44020c00 	.word	0x44020c00
 800ac38:	40022000 	.word	0x40022000
 800ac3c:	08014780 	.word	0x08014780
 800ac40:	20000000 	.word	0x20000000
 800ac44:	200000ec 	.word	0x200000ec

0800ac48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b089      	sub	sp, #36	; 0x24
 800ac4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800ac4e:	4b8c      	ldr	r3, [pc, #560]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	f003 0318 	and.w	r3, r3, #24
 800ac56:	2b08      	cmp	r3, #8
 800ac58:	d102      	bne.n	800ac60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ac5a:	4b8a      	ldr	r3, [pc, #552]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x23c>)
 800ac5c:	61fb      	str	r3, [r7, #28]
 800ac5e:	e107      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac60:	4b87      	ldr	r3, [pc, #540]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	f003 0318 	and.w	r3, r3, #24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d112      	bne.n	800ac92 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800ac6c:	4b84      	ldr	r3, [pc, #528]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d009      	beq.n	800ac8c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac78:	4b81      	ldr	r3, [pc, #516]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	08db      	lsrs	r3, r3, #3
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	4a81      	ldr	r2, [pc, #516]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x240>)
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	e0f1      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800ac8c:	4b7e      	ldr	r3, [pc, #504]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x240>)
 800ac8e:	61fb      	str	r3, [r7, #28]
 800ac90:	e0ee      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac92:	4b7b      	ldr	r3, [pc, #492]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	f003 0318 	and.w	r3, r3, #24
 800ac9a:	2b10      	cmp	r3, #16
 800ac9c:	d102      	bne.n	800aca4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac9e:	4b7b      	ldr	r3, [pc, #492]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x244>)
 800aca0:	61fb      	str	r3, [r7, #28]
 800aca2:	e0e5      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aca4:	4b76      	ldr	r3, [pc, #472]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	f003 0318 	and.w	r3, r3, #24
 800acac:	2b18      	cmp	r3, #24
 800acae:	f040 80dd 	bne.w	800ae6c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800acb2:	4b73      	ldr	r3, [pc, #460]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800acb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800acbc:	4b70      	ldr	r3, [pc, #448]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	0a1b      	lsrs	r3, r3, #8
 800acc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800acc8:	4b6d      	ldr	r3, [pc, #436]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800acca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800accc:	091b      	lsrs	r3, r3, #4
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800acd4:	4b6a      	ldr	r3, [pc, #424]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800acd8:	08db      	lsrs	r3, r3, #3
 800acda:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	fb02 f303 	mul.w	r3, r2, r3
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 80b7 	beq.w	800ae66 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d003      	beq.n	800ad06 <HAL_RCC_GetSysClockFreq+0xbe>
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d056      	beq.n	800adb2 <HAL_RCC_GetSysClockFreq+0x16a>
 800ad04:	e077      	b.n	800adf6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800ad06:	4b5e      	ldr	r3, [pc, #376]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d02d      	beq.n	800ad6e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad12:	4b5b      	ldr	r3, [pc, #364]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	4a5a      	ldr	r2, [pc, #360]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x240>)
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3c:	4b50      	ldr	r3, [pc, #320]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad50:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800ae90 <HAL_RCC_GetSysClockFreq+0x248>
 800ad54:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad60:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800ad6c:	e065      	b.n	800ae3a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	ee07 3a90 	vmov	s15, r3
 800ad74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad78:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x24c>
 800ad7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad80:	4b3f      	ldr	r3, [pc, #252]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ad82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad88:	ee07 3a90 	vmov	s15, r3
 800ad8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad90:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad94:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ae90 <HAL_RCC_GetSysClockFreq+0x248>
 800ad98:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800ada0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ada8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800adb0:	e043      	b.n	800ae3a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	ee07 3a90 	vmov	s15, r3
 800adb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbc:	eddf 6a36 	vldr	s13, [pc, #216]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x250>
 800adc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc4:	4b2e      	ldr	r3, [pc, #184]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800adc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800add4:	ed97 6a02 	vldr	s12, [r7, #8]
 800add8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ae90 <HAL_RCC_GetSysClockFreq+0x248>
 800addc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ade0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ade4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800adf4:	e021      	b.n	800ae3a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae00:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x254>
 800ae04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ae0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae18:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800ae90 <HAL_RCC_GetSysClockFreq+0x248>
 800ae20:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae34:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800ae38:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800ae3a:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <HAL_RCC_GetSysClockFreq+0x238>)
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3e:	0a5b      	lsrs	r3, r3, #9
 800ae40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae44:	3301      	adds	r3, #1
 800ae46:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae52:	edd7 6a06 	vldr	s13, [r7, #24]
 800ae56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae5e:	ee17 3a90 	vmov	r3, s15
 800ae62:	61fb      	str	r3, [r7, #28]
 800ae64:	e004      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
 800ae6a:	e001      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x240>)
 800ae6e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800ae70:	69fb      	ldr	r3, [r7, #28]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3724      	adds	r7, #36	; 0x24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	44020c00 	.word	0x44020c00
 800ae84:	003d0900 	.word	0x003d0900
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	007a1200 	.word	0x007a1200
 800ae90:	46000000 	.word	0x46000000
 800ae94:	4c742400 	.word	0x4c742400
 800ae98:	4af42400 	.word	0x4af42400
 800ae9c:	4a742400 	.word	0x4a742400

0800aea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800aea4:	f7ff fed0 	bl	800ac48 <HAL_RCC_GetSysClockFreq>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	4b08      	ldr	r3, [pc, #32]	; (800aecc <HAL_RCC_GetHCLKFreq+0x2c>)
 800aeac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800aeae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800aeb2:	4907      	ldr	r1, [pc, #28]	; (800aed0 <HAL_RCC_GetHCLKFreq+0x30>)
 800aeb4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800aeb6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800aeba:	fa22 f303 	lsr.w	r3, r2, r3
 800aebe:	4a05      	ldr	r2, [pc, #20]	; (800aed4 <HAL_RCC_GetHCLKFreq+0x34>)
 800aec0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800aec2:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <HAL_RCC_GetHCLKFreq+0x34>)
 800aec4:	681b      	ldr	r3, [r3, #0]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	44020c00 	.word	0x44020c00
 800aed0:	08014780 	.word	0x08014780
 800aed4:	20000000 	.word	0x20000000

0800aed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800aedc:	f7ff ffe0 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800aee0:	4602      	mov	r2, r0
 800aee2:	4b06      	ldr	r3, [pc, #24]	; (800aefc <HAL_RCC_GetPCLK1Freq+0x24>)
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	091b      	lsrs	r3, r3, #4
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	4904      	ldr	r1, [pc, #16]	; (800af00 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aeee:	5ccb      	ldrb	r3, [r1, r3]
 800aef0:	f003 031f 	and.w	r3, r3, #31
 800aef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	44020c00 	.word	0x44020c00
 800af00:	08014790 	.word	0x08014790

0800af04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800af08:	f7ff ffca 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800af0c:	4602      	mov	r2, r0
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	0a1b      	lsrs	r3, r3, #8
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	4904      	ldr	r1, [pc, #16]	; (800af2c <HAL_RCC_GetPCLK2Freq+0x28>)
 800af1a:	5ccb      	ldrb	r3, [r1, r3]
 800af1c:	f003 031f 	and.w	r3, r3, #31
 800af20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af24:	4618      	mov	r0, r3
 800af26:	bd80      	pop	{r7, pc}
 800af28:	44020c00 	.word	0x44020c00
 800af2c:	08014790 	.word	0x08014790

0800af30 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800af34:	f7ff ffb4 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <HAL_RCC_GetPCLK3Freq+0x24>)
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	0b1b      	lsrs	r3, r3, #12
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	4904      	ldr	r1, [pc, #16]	; (800af58 <HAL_RCC_GetPCLK3Freq+0x28>)
 800af46:	5ccb      	ldrb	r3, [r1, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af50:	4618      	mov	r0, r3
 800af52:	bd80      	pop	{r7, pc}
 800af54:	44020c00 	.word	0x44020c00
 800af58:	08014790 	.word	0x08014790

0800af5c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800af5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af60:	b0d8      	sub	sp, #352	; 0x160
 800af62:	af00      	add	r7, sp, #0
 800af64:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800af80:	2500      	movs	r5, #0
 800af82:	ea54 0305 	orrs.w	r3, r4, r5
 800af86:	d00b      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800af88:	4bcd      	ldr	r3, [pc, #820]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800af8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af8e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800af92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800af96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af98:	4ac9      	ldr	r2, [pc, #804]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800af9a:	430b      	orrs	r3, r1
 800af9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f002 0801 	and.w	r8, r2, #1
 800afac:	f04f 0900 	mov.w	r9, #0
 800afb0:	ea58 0309 	orrs.w	r3, r8, r9
 800afb4:	d042      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800afb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800afba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afbc:	2b05      	cmp	r3, #5
 800afbe:	d823      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800b011 	.word	0x0800b011
 800afcc:	0800afe1 	.word	0x0800afe1
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800b011 	.word	0x0800b011
 800afd8:	0800b011 	.word	0x0800b011
 800afdc:	0800b011 	.word	0x0800b011
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800afe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800afe4:	3308      	adds	r3, #8
 800afe6:	4618      	mov	r0, r3
 800afe8:	f004 feda 	bl	800fda0 <RCCEx_PLL2_Config>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800aff2:	e00e      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aff8:	3330      	adds	r3, #48	; 0x30
 800affa:	4618      	mov	r0, r3
 800affc:	f004 ff68 	bl	800fed0 <RCCEx_PLL3_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800b006:	e004      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b00e:	e000      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800b010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b012:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10c      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b01a:	4ba9      	ldr	r3, [pc, #676]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b01c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b020:	f023 0107 	bic.w	r1, r3, #7
 800b024:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b02a:	4aa5      	ldr	r2, [pc, #660]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b02c:	430b      	orrs	r3, r1
 800b02e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b032:	e003      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b038:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b03c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f002 0a02 	and.w	sl, r2, #2
 800b048:	f04f 0b00 	mov.w	fp, #0
 800b04c:	ea5a 030b 	orrs.w	r3, sl, fp
 800b050:	f000 8088 	beq.w	800b164 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800b054:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b05a:	2b28      	cmp	r3, #40	; 0x28
 800b05c:	d868      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b05e:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b139 	.word	0x0800b139
 800b068:	0800b131 	.word	0x0800b131
 800b06c:	0800b131 	.word	0x0800b131
 800b070:	0800b131 	.word	0x0800b131
 800b074:	0800b131 	.word	0x0800b131
 800b078:	0800b131 	.word	0x0800b131
 800b07c:	0800b131 	.word	0x0800b131
 800b080:	0800b131 	.word	0x0800b131
 800b084:	0800b109 	.word	0x0800b109
 800b088:	0800b131 	.word	0x0800b131
 800b08c:	0800b131 	.word	0x0800b131
 800b090:	0800b131 	.word	0x0800b131
 800b094:	0800b131 	.word	0x0800b131
 800b098:	0800b131 	.word	0x0800b131
 800b09c:	0800b131 	.word	0x0800b131
 800b0a0:	0800b131 	.word	0x0800b131
 800b0a4:	0800b11d 	.word	0x0800b11d
 800b0a8:	0800b131 	.word	0x0800b131
 800b0ac:	0800b131 	.word	0x0800b131
 800b0b0:	0800b131 	.word	0x0800b131
 800b0b4:	0800b131 	.word	0x0800b131
 800b0b8:	0800b131 	.word	0x0800b131
 800b0bc:	0800b131 	.word	0x0800b131
 800b0c0:	0800b131 	.word	0x0800b131
 800b0c4:	0800b139 	.word	0x0800b139
 800b0c8:	0800b131 	.word	0x0800b131
 800b0cc:	0800b131 	.word	0x0800b131
 800b0d0:	0800b131 	.word	0x0800b131
 800b0d4:	0800b131 	.word	0x0800b131
 800b0d8:	0800b131 	.word	0x0800b131
 800b0dc:	0800b131 	.word	0x0800b131
 800b0e0:	0800b131 	.word	0x0800b131
 800b0e4:	0800b139 	.word	0x0800b139
 800b0e8:	0800b131 	.word	0x0800b131
 800b0ec:	0800b131 	.word	0x0800b131
 800b0f0:	0800b131 	.word	0x0800b131
 800b0f4:	0800b131 	.word	0x0800b131
 800b0f8:	0800b131 	.word	0x0800b131
 800b0fc:	0800b131 	.word	0x0800b131
 800b100:	0800b131 	.word	0x0800b131
 800b104:	0800b139 	.word	0x0800b139
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b108:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b10c:	3308      	adds	r3, #8
 800b10e:	4618      	mov	r0, r3
 800b110:	f004 fe46 	bl	800fda0 <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800b11a:	e00e      	b.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b11c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b120:	3330      	adds	r3, #48	; 0x30
 800b122:	4618      	mov	r0, r3
 800b124:	f004 fed4 	bl	800fed0 <RCCEx_PLL3_Config>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800b12e:	e004      	b.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b136:	e000      	b.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800b138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b13a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10c      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b142:	4b5f      	ldr	r3, [pc, #380]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b148:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b14c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b152:	4a5b      	ldr	r2, [pc, #364]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b154:	430b      	orrs	r3, r1
 800b156:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b15a:	e003      	b.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b160:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f002 0304 	and.w	r3, r2, #4
 800b170:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b174:	2300      	movs	r3, #0
 800b176:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800b17a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800b17e:	460b      	mov	r3, r1
 800b180:	4313      	orrs	r3, r2
 800b182:	d04e      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800b184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b18a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b18e:	d02c      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800b190:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b194:	d825      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19a:	d028      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a0:	d81f      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b1a2:	2bc0      	cmp	r3, #192	; 0xc0
 800b1a4:	d025      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b1a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b1a8:	d81b      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d00f      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 800b1ae:	2b80      	cmp	r3, #128	; 0x80
 800b1b0:	d817      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01f      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800b1b6:	2b40      	cmp	r3, #64	; 0x40
 800b1b8:	d113      	bne.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b1be:	3308      	adds	r3, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f004 fded 	bl	800fda0 <RCCEx_PLL2_Config>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800b1cc:	e014      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b1d2:	3330      	adds	r3, #48	; 0x30
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f004 fe7b 	bl	800fed0 <RCCEx_PLL3_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800b1e0:	e00a      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800b1ea:	bf00      	nop
 800b1ec:	e004      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800b1ee:	bf00      	nop
 800b1f0:	e002      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800b1f2:	bf00      	nop
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800b1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10c      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b200:	4b2f      	ldr	r3, [pc, #188]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b206:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b210:	4a2b      	ldr	r2, [pc, #172]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800b212:	430b      	orrs	r3, r1
 800b214:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b218:	e003      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b21e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f002 0308 	and.w	r3, r2, #8
 800b22e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800b232:	2300      	movs	r3, #0
 800b234:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800b238:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 800b23c:	460b      	mov	r3, r1
 800b23e:	4313      	orrs	r3, r2
 800b240:	d056      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800b242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b248:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b24c:	d031      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800b24e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b252:	d82a      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b258:	d02d      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800b25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b25e:	d824      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b260:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b264:	d029      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800b266:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b26a:	d81e      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b270:	d011      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800b272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b276:	d818      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d023      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800b27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b280:	d113      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b282:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b286:	3308      	adds	r3, #8
 800b288:	4618      	mov	r0, r3
 800b28a:	f004 fd89 	bl	800fda0 <RCCEx_PLL2_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800b294:	e017      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b29a:	3330      	adds	r3, #48	; 0x30
 800b29c:	4618      	mov	r0, r3
 800b29e:	f004 fe17 	bl	800fed0 <RCCEx_PLL3_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800b2a8:	e00d      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b2b0:	e009      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800b2b2:	bf00      	nop
 800b2b4:	e007      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800b2b6:	bf00      	nop
 800b2b8:	e005      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800b2ba:	bf00      	nop
 800b2bc:	e003      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b2be:	bf00      	nop
 800b2c0:	44020c00 	.word	0x44020c00
        break;
 800b2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10c      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b2ce:	4bbb      	ldr	r3, [pc, #748]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b2d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2d4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b2d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b2dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2de:	4ab7      	ldr	r2, [pc, #732]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b2e6:	e003      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b2ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f002 0310 	and.w	r3, r2, #16
 800b2fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b300:	2300      	movs	r3, #0
 800b302:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800b306:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800b30a:	460b      	mov	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d053      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800b310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b316:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b31a:	d031      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800b31c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b320:	d82a      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b326:	d02d      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b32c:	d824      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b32e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b332:	d029      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800b334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b338:	d81e      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b33a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b33e:	d011      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b344:	d818      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d020      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34e:	d113      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b354:	3308      	adds	r3, #8
 800b356:	4618      	mov	r0, r3
 800b358:	f004 fd22 	bl	800fda0 <RCCEx_PLL2_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800b362:	e014      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b368:	3330      	adds	r3, #48	; 0x30
 800b36a:	4618      	mov	r0, r3
 800b36c:	f004 fdb0 	bl	800fed0 <RCCEx_PLL3_Config>
 800b370:	4603      	mov	r3, r0
 800b372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800b376:	e00a      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b37e:	e006      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800b380:	bf00      	nop
 800b382:	e004      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800b384:	bf00      	nop
 800b386:	e002      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800b388:	bf00      	nop
 800b38a:	e000      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800b38c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b38e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10c      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b396:	4b89      	ldr	r3, [pc, #548]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b39c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b3a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3a6:	4a85      	ldr	r2, [pc, #532]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b3ae:	e003      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b3b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b3b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f002 0320 	and.w	r3, r2, #32
 800b3c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b3ce:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	d053      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800b3d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3de:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b3e2:	d031      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800b3e4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b3e8:	d82a      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800b3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3ee:	d02d      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800b3f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f4:	d824      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800b3f6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b3fa:	d029      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800b3fc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b400:	d81e      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800b402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b406:	d011      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b40c:	d818      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d020      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800b412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b416:	d113      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b41c:	3308      	adds	r3, #8
 800b41e:	4618      	mov	r0, r3
 800b420:	f004 fcbe 	bl	800fda0 <RCCEx_PLL2_Config>
 800b424:	4603      	mov	r3, r0
 800b426:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800b42a:	e014      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b42c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b430:	3330      	adds	r3, #48	; 0x30
 800b432:	4618      	mov	r0, r3
 800b434:	f004 fd4c 	bl	800fed0 <RCCEx_PLL3_Config>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800b43e:	e00a      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b446:	e006      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800b448:	bf00      	nop
 800b44a:	e004      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800b44c:	bf00      	nop
 800b44e:	e002      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800b450:	bf00      	nop
 800b452:	e000      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800b454:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b456:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10c      	bne.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b45e:	4b57      	ldr	r3, [pc, #348]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b464:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800b468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46e:	4a53      	ldr	r2, [pc, #332]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b470:	430b      	orrs	r3, r1
 800b472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b476:	e003      	b.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b478:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b47c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b48c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b490:	2300      	movs	r3, #0
 800b492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b496:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800b49a:	460b      	mov	r3, r1
 800b49c:	4313      	orrs	r3, r2
 800b49e:	d053      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800b4a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b4aa:	d031      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800b4ac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b4b0:	d82a      	bhi.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800b4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4b6:	d02d      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800b4b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4bc:	d824      	bhi.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800b4be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b4c2:	d029      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b4c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b4c8:	d81e      	bhi.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800b4ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b4ce:	d011      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b4d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b4d4:	d818      	bhi.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d020      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b4da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4de:	d113      	bne.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f004 fc5a 	bl	800fda0 <RCCEx_PLL2_Config>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800b4f2:	e014      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b4f8:	3330      	adds	r3, #48	; 0x30
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f004 fce8 	bl	800fed0 <RCCEx_PLL3_Config>
 800b500:	4603      	mov	r3, r0
 800b502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800b506:	e00a      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b50e:	e006      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800b510:	bf00      	nop
 800b512:	e004      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800b514:	bf00      	nop
 800b516:	e002      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800b518:	bf00      	nop
 800b51a:	e000      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800b51c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10c      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800b526:	4b25      	ldr	r3, [pc, #148]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b52c:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800b530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b536:	4a21      	ldr	r2, [pc, #132]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800b538:	430b      	orrs	r3, r1
 800b53a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b53e:	e003      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b544:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b554:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b55e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d055      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800b568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b56e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b572:	d033      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x680>
 800b574:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b578:	d82c      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800b57a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b57e:	d02f      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800b580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b584:	d826      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800b586:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b58a:	d02b      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800b58c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b590:	d820      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800b592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b596:	d013      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b59c:	d81a      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d022      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800b5a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5a6:	d115      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f004 fbf6 	bl	800fda0 <RCCEx_PLL2_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800b5ba:	e016      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800b5bc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b5c4:	3330      	adds	r3, #48	; 0x30
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f004 fc82 	bl	800fed0 <RCCEx_PLL3_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800b5d2:	e00a      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b5da:	e006      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800b5dc:	bf00      	nop
 800b5de:	e004      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800b5e0:	bf00      	nop
 800b5e2:	e002      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800b5e4:	bf00      	nop
 800b5e6:	e000      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800b5e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10c      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800b5f2:	4bbb      	ldr	r3, [pc, #748]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b5f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5f8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b5fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b602:	4ab7      	ldr	r2, [pc, #732]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b604:	430b      	orrs	r3, r1
 800b606:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b60a:	e003      	b.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b610:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800b614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800b620:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b624:	2300      	movs	r3, #0
 800b626:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b62a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800b62e:	460b      	mov	r3, r1
 800b630:	4313      	orrs	r3, r2
 800b632:	d053      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800b634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b63a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b63e:	d031      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800b640:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b644:	d82a      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800b646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b64a:	d02d      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800b64c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b650:	d824      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800b652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b656:	d029      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x750>
 800b658:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b65c:	d81e      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800b65e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b662:	d011      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800b664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b668:	d818      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d020      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800b66e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b672:	d113      	bne.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b678:	3308      	adds	r3, #8
 800b67a:	4618      	mov	r0, r3
 800b67c:	f004 fb90 	bl	800fda0 <RCCEx_PLL2_Config>
 800b680:	4603      	mov	r3, r0
 800b682:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800b686:	e014      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b68c:	3330      	adds	r3, #48	; 0x30
 800b68e:	4618      	mov	r0, r3
 800b690:	f004 fc1e 	bl	800fed0 <RCCEx_PLL3_Config>
 800b694:	4603      	mov	r3, r0
 800b696:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800b69a:	e00a      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b6a2:	e006      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800b6a4:	bf00      	nop
 800b6a6:	e004      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800b6a8:	bf00      	nop
 800b6aa:	e002      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800b6ac:	bf00      	nop
 800b6ae:	e000      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800b6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10c      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800b6ba:	4b89      	ldr	r3, [pc, #548]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b6bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b6c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ca:	4a85      	ldr	r2, [pc, #532]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b6d2:	e003      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b6d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800b6dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800b6e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b6f2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	d055      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800b6fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b704:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800b708:	d031      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800b70a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800b70e:	d82a      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800b710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b714:	d02d      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800b716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b71a:	d824      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800b71c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b720:	d029      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800b722:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b726:	d81e      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800b728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b72c:	d011      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800b72e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b732:	d818      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800b734:	2b00      	cmp	r3, #0
 800b736:	d020      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800b738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b73c:	d113      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b73e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b742:	3308      	adds	r3, #8
 800b744:	4618      	mov	r0, r3
 800b746:	f004 fb2b 	bl	800fda0 <RCCEx_PLL2_Config>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800b750:	e014      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b756:	3330      	adds	r3, #48	; 0x30
 800b758:	4618      	mov	r0, r3
 800b75a:	f004 fbb9 	bl	800fed0 <RCCEx_PLL3_Config>
 800b75e:	4603      	mov	r3, r0
 800b760:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800b764:	e00a      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b76c:	e006      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800b76e:	bf00      	nop
 800b770:	e004      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800b772:	bf00      	nop
 800b774:	e002      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800b776:	bf00      	nop
 800b778:	e000      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800b77a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10d      	bne.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800b784:	4b56      	ldr	r3, [pc, #344]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b78a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800b78e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b796:	4a52      	ldr	r2, [pc, #328]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b798:	430b      	orrs	r3, r1
 800b79a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b79e:	e003      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b7a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800b7a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b7b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b7be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	d044      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800b7c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	d823      	bhi.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b7d4:	a201      	add	r2, pc, #4	; (adr r2, 800b7dc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b825 	.word	0x0800b825
 800b7e0:	0800b7f5 	.word	0x0800b7f5
 800b7e4:	0800b809 	.word	0x0800b809
 800b7e8:	0800b825 	.word	0x0800b825
 800b7ec:	0800b825 	.word	0x0800b825
 800b7f0:	0800b825 	.word	0x0800b825
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f004 fad0 	bl	800fda0 <RCCEx_PLL2_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800b806:	e00e      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b808:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b80c:	3330      	adds	r3, #48	; 0x30
 800b80e:	4618      	mov	r0, r3
 800b810:	f004 fb5e 	bl	800fed0 <RCCEx_PLL3_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800b81a:	e004      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b822:	e000      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800b824:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b826:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10d      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800b82e:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b830:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b834:	f023 0107 	bic.w	r1, r3, #7
 800b838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b840:	4a27      	ldr	r2, [pc, #156]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800b842:	430b      	orrs	r3, r1
 800b844:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800b848:	e003      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b84e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800b852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b85e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b862:	2300      	movs	r3, #0
 800b864:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b868:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b86c:	460b      	mov	r3, r1
 800b86e:	4313      	orrs	r3, r2
 800b870:	d04f      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800b872:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b87a:	2b50      	cmp	r3, #80	; 0x50
 800b87c:	d029      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b87e:	2b50      	cmp	r3, #80	; 0x50
 800b880:	d823      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b882:	2b40      	cmp	r3, #64	; 0x40
 800b884:	d027      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	d81f      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b88a:	2b30      	cmp	r3, #48	; 0x30
 800b88c:	d025      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d81b      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b892:	2b20      	cmp	r3, #32
 800b894:	d00f      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800b896:	2b20      	cmp	r3, #32
 800b898:	d817      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d022      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b89e:	2b10      	cmp	r3, #16
 800b8a0:	d113      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b8a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f004 fa79 	bl	800fda0 <RCCEx_PLL2_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800b8b4:	e017      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b8b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b8ba:	3330      	adds	r3, #48	; 0x30
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f004 fb07 	bl	800fed0 <RCCEx_PLL3_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800b8c8:	e00d      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b8d0:	e009      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800b8d2:	bf00      	nop
 800b8d4:	e007      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800b8d6:	bf00      	nop
 800b8d8:	e005      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800b8da:	bf00      	nop
 800b8dc:	e003      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800b8de:	bf00      	nop
 800b8e0:	44020c00 	.word	0x44020c00
        break;
 800b8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10d      	bne.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800b8ee:	4baf      	ldr	r3, [pc, #700]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b8f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b8f4:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800b8f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b900:	4aaa      	ldr	r2, [pc, #680]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b902:	430b      	orrs	r3, r1
 800b904:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800b908:	e003      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b90e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b91e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b922:	2300      	movs	r3, #0
 800b924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b92c:	460b      	mov	r3, r1
 800b92e:	4313      	orrs	r3, r2
 800b930:	d055      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800b932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b93a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b93e:	d031      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800b940:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b944:	d82a      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b94a:	d02d      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800b94c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b950:	d824      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b952:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b956:	d029      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800b958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b95c:	d81e      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b962:	d011      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800b964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b968:	d818      	bhi.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d020      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800b96e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b972:	d113      	bne.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b974:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b978:	3308      	adds	r3, #8
 800b97a:	4618      	mov	r0, r3
 800b97c:	f004 fa10 	bl	800fda0 <RCCEx_PLL2_Config>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800b986:	e014      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b98c:	3330      	adds	r3, #48	; 0x30
 800b98e:	4618      	mov	r0, r3
 800b990:	f004 fa9e 	bl	800fed0 <RCCEx_PLL3_Config>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800b99a:	e00a      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800b9a2:	e006      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b9a4:	bf00      	nop
 800b9a6:	e004      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b9a8:	bf00      	nop
 800b9aa:	e002      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b9ac:	bf00      	nop
 800b9ae:	e000      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10d      	bne.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b9ba:	4b7c      	ldr	r3, [pc, #496]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b9c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9cc:	4a77      	ldr	r2, [pc, #476]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b9d4:	e003      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800b9da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b9ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	d03d      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800b9fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba0a:	d01b      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800ba0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba10:	d814      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ba12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba16:	d017      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800ba18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba1c:	d80e      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d014      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800ba22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba26:	d109      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba2c:	3330      	adds	r3, #48	; 0x30
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f004 fa4e 	bl	800fed0 <RCCEx_PLL3_Config>
 800ba34:	4603      	mov	r3, r0
 800ba36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800ba3a:	e008      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ba42:	e004      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ba44:	bf00      	nop
 800ba46:	e002      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ba48:	bf00      	nop
 800ba4a:	e000      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ba4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10d      	bne.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800ba56:	4b55      	ldr	r3, [pc, #340]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ba58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ba5c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ba60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba68:	4a50      	ldr	r2, [pc, #320]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ba70:	e003      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ba76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ba7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ba86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4313      	orrs	r3, r2
 800ba98:	d03d      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800ba9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baa2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800baa6:	d01b      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800baa8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800baac:	d814      	bhi.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800baae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bab2:	d017      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800bab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bab8:	d80e      	bhi.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d014      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800babe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bac2:	d109      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bac8:	3330      	adds	r3, #48	; 0x30
 800baca:	4618      	mov	r0, r3
 800bacc:	f004 fa00 	bl	800fed0 <RCCEx_PLL3_Config>
 800bad0:	4603      	mov	r3, r0
 800bad2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800bad6:	e008      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bade:	e004      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800bae0:	bf00      	nop
 800bae2:	e002      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800bae4:	bf00      	nop
 800bae6:	e000      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800bae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10d      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800baf2:	4b2e      	ldr	r3, [pc, #184]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800baf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800baf8:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800bafc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb04:	4a29      	ldr	r2, [pc, #164]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800bb06:	430b      	orrs	r3, r1
 800bb08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bb0c:	e003      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bb12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bb22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb26:	2300      	movs	r3, #0
 800bb28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb30:	460b      	mov	r3, r1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	d040      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800bb36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb42:	d01b      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800bb44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb48:	d814      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800bb4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb4e:	d017      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bb50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb54:	d80e      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d014      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800bb5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb5e:	d109      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb64:	3330      	adds	r3, #48	; 0x30
 800bb66:	4618      	mov	r0, r3
 800bb68:	f004 f9b2 	bl	800fed0 <RCCEx_PLL3_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800bb72:	e008      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bb7a:	e004      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800bb7c:	bf00      	nop
 800bb7e:	e002      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800bb80:	bf00      	nop
 800bb82:	e000      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800bb84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d110      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800bb8e:	4b07      	ldr	r3, [pc, #28]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800bb90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bb94:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bb98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bba0:	4a02      	ldr	r2, [pc, #8]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800bba2:	430b      	orrs	r3, r1
 800bba4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bba8:	e006      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bbaa:	bf00      	nop
 800bbac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bbb4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bbb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800bbc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d03d      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800bbd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bbdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbe4:	d01b      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800bbe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbea:	d814      	bhi.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800bbec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbf0:	d017      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800bbf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbf6:	d80e      	bhi.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d014      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800bbfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc00:	d109      	bne.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc06:	3330      	adds	r3, #48	; 0x30
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f004 f961 	bl	800fed0 <RCCEx_PLL3_Config>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800bc14:	e008      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bc1c:	e004      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800bc1e:	bf00      	nop
 800bc20:	e002      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800bc22:	bf00      	nop
 800bc24:	e000      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800bc26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10d      	bne.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800bc30:	4bbe      	ldr	r3, [pc, #760]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bc32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc36:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bc3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc42:	4aba      	ldr	r2, [pc, #744]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bc44:	430b      	orrs	r3, r1
 800bc46:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bc4a:	e003      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bc50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800bc54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bc60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc64:	2300      	movs	r3, #0
 800bc66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4313      	orrs	r3, r2
 800bc72:	d035      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800bc74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc80:	d015      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800bc82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc86:	d80e      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d012      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800bc8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc90:	d109      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc96:	3330      	adds	r3, #48	; 0x30
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f004 f919 	bl	800fed0 <RCCEx_PLL3_Config>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800bca4:	e006      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bcac:	e002      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800bcae:	bf00      	nop
 800bcb0:	e000      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800bcb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10d      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800bcbc:	4b9b      	ldr	r3, [pc, #620]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bcbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcc2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800bcc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bcca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcce:	4a97      	ldr	r2, [pc, #604]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bcd6:	e003      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bcdc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	2100      	movs	r1, #0
 800bcea:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800bcee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bcf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	d00e      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800bd00:	4b8a      	ldr	r3, [pc, #552]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	4a89      	ldr	r2, [pc, #548]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bd06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd0a:	61d3      	str	r3, [r2, #28]
 800bd0c:	4b87      	ldr	r3, [pc, #540]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bd14:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bd18:	4a84      	ldr	r2, [pc, #528]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bd1a:	430b      	orrs	r3, r1
 800bd1c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bd2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd34:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	d055      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800bd3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bd42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bd4a:	d031      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800bd4c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bd50:	d82a      	bhi.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800bd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd56:	d02d      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800bd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd5c:	d824      	bhi.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800bd5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd62:	d029      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800bd64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd68:	d81e      	bhi.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800bd6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd6e:	d011      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800bd70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd74:	d818      	bhi.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d020      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800bd7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd7e:	d113      	bne.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bd84:	3308      	adds	r3, #8
 800bd86:	4618      	mov	r0, r3
 800bd88:	f004 f80a 	bl	800fda0 <RCCEx_PLL2_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800bd92:	e014      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bd98:	3330      	adds	r3, #48	; 0x30
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f004 f898 	bl	800fed0 <RCCEx_PLL3_Config>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800bda6:	e00a      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bdae:	e006      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800bdb0:	bf00      	nop
 800bdb2:	e004      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800bdb4:	bf00      	nop
 800bdb6:	e002      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800bdb8:	bf00      	nop
 800bdba:	e000      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800bdbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10d      	bne.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800bdc6:	4b59      	ldr	r3, [pc, #356]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bdc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bdcc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800bdd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bdd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdd8:	4a54      	ldr	r2, [pc, #336]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bdda:	430b      	orrs	r3, r1
 800bddc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800bde0:	e003      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bde6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bdea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bdf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800be04:	460b      	mov	r3, r1
 800be06:	4313      	orrs	r3, r2
 800be08:	d055      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800be0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800be0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be12:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800be16:	d031      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800be18:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800be1c:	d82a      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800be1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be22:	d02d      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800be24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be28:	d824      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800be2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be2e:	d029      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800be30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be34:	d81e      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800be36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be3a:	d011      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800be3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be40:	d818      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d020      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800be46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be4a:	d113      	bne.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800be50:	3308      	adds	r3, #8
 800be52:	4618      	mov	r0, r3
 800be54:	f003 ffa4 	bl	800fda0 <RCCEx_PLL2_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800be5e:	e014      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800be60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800be64:	3330      	adds	r3, #48	; 0x30
 800be66:	4618      	mov	r0, r3
 800be68:	f004 f832 	bl	800fed0 <RCCEx_PLL3_Config>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800be72:	e00a      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800be7a:	e006      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800be7c:	bf00      	nop
 800be7e:	e004      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800be80:	bf00      	nop
 800be82:	e002      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800be84:	bf00      	nop
 800be86:	e000      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800be88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10d      	bne.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800be92:	4b26      	ldr	r3, [pc, #152]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800be94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800be98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800be9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bea4:	4a21      	ldr	r2, [pc, #132]	; (800bf2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800bea6:	430b      	orrs	r3, r1
 800bea8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800beac:	e003      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800beb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800beb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	2100      	movs	r1, #0
 800bec0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800becc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bed0:	460b      	mov	r3, r1
 800bed2:	4313      	orrs	r3, r2
 800bed4:	d057      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800bed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800beda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bee2:	d033      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800bee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bee8:	d82c      	bhi.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800beea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800beee:	d02f      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800bef0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bef4:	d826      	bhi.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800bef6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800befa:	d02b      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800befc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf00:	d820      	bhi.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800bf02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf06:	d013      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf0c:	d81a      	bhi.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d022      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800bf12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf16:	d115      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bf18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f003 ff3e 	bl	800fda0 <RCCEx_PLL2_Config>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800bf2a:	e016      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800bf2c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf34:	3330      	adds	r3, #48	; 0x30
 800bf36:	4618      	mov	r0, r3
 800bf38:	f003 ffca 	bl	800fed0 <RCCEx_PLL3_Config>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800bf42:	e00a      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800bf4a:	e006      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800bf4c:	bf00      	nop
 800bf4e:	e004      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800bf50:	bf00      	nop
 800bf52:	e002      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800bf54:	bf00      	nop
 800bf56:	e000      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800bf58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800bf62:	4bbb      	ldr	r3, [pc, #748]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800bf64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bf68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bf6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf74:	4ab6      	ldr	r2, [pc, #728]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800bf76:	430b      	orrs	r3, r1
 800bf78:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800bf7c:	e003      	b.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800bf82:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800bf86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	2100      	movs	r1, #0
 800bf90:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800bf94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	d055      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800bfa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bfaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfae:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800bfb2:	d031      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800bfb4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800bfb8:	d82a      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800bfba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfbe:	d02d      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800bfc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfc4:	d824      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800bfc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfca:	d029      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800bfcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfd0:	d81e      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800bfd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd6:	d011      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800bfd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfdc:	d818      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d020      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800bfe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfe6:	d113      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bfe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bfec:	3308      	adds	r3, #8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f003 fed6 	bl	800fda0 <RCCEx_PLL2_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800bffa:	e014      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c000:	3330      	adds	r3, #48	; 0x30
 800c002:	4618      	mov	r0, r3
 800c004:	f003 ff64 	bl	800fed0 <RCCEx_PLL3_Config>
 800c008:	4603      	mov	r3, r0
 800c00a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800c00e:	e00a      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c016:	e006      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800c018:	bf00      	nop
 800c01a:	e004      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800c01c:	bf00      	nop
 800c01e:	e002      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800c024:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c026:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800c02e:	4b88      	ldr	r3, [pc, #544]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c030:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c034:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 800c038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c03c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c040:	4a83      	ldr	r2, [pc, #524]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c042:	430b      	orrs	r3, r1
 800c044:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800c048:	e003      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c04e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800c052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	2100      	movs	r1, #0
 800c05c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800c060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c068:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c06c:	460b      	mov	r3, r1
 800c06e:	4313      	orrs	r3, r2
 800c070:	d055      	beq.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800c072:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c07a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c07e:	d031      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800c080:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c084:	d82a      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800c086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c08a:	d02d      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800c08c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c090:	d824      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800c092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c096:	d029      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800c098:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c09c:	d81e      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800c09e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a2:	d011      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800c0a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a8:	d818      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d020      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800c0ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0b2:	d113      	bne.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c0b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f003 fe70 	bl	800fda0 <RCCEx_PLL2_Config>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800c0c6:	e014      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c0c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c0cc:	3330      	adds	r3, #48	; 0x30
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f003 fefe 	bl	800fed0 <RCCEx_PLL3_Config>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800c0da:	e00a      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c0e2:	e006      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800c0e4:	bf00      	nop
 800c0e6:	e004      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800c0e8:	bf00      	nop
 800c0ea:	e002      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800c0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10d      	bne.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800c0fa:	4b55      	ldr	r3, [pc, #340]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c0fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c100:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c10c:	4a50      	ldr	r2, [pc, #320]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c10e:	430b      	orrs	r3, r1
 800c110:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800c114:	e003      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c116:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c11a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800c11e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	2100      	movs	r1, #0
 800c128:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800c12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c134:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c138:	460b      	mov	r3, r1
 800c13a:	4313      	orrs	r3, r2
 800c13c:	d055      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800c13e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c14a:	d031      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800c14c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c150:	d82a      	bhi.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c156:	d02d      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800c158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c15c:	d824      	bhi.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800c15e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c162:	d029      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800c164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c168:	d81e      	bhi.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800c16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c16e:	d011      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800c170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c174:	d818      	bhi.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d020      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800c17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c17e:	d113      	bne.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c180:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c184:	3308      	adds	r3, #8
 800c186:	4618      	mov	r0, r3
 800c188:	f003 fe0a 	bl	800fda0 <RCCEx_PLL2_Config>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800c192:	e014      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c198:	3330      	adds	r3, #48	; 0x30
 800c19a:	4618      	mov	r0, r3
 800c19c:	f003 fe98 	bl	800fed0 <RCCEx_PLL3_Config>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800c1a6:	e00a      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c1ae:	e006      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800c1b0:	bf00      	nop
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800c1b4:	bf00      	nop
 800c1b6:	e002      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800c1b8:	bf00      	nop
 800c1ba:	e000      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800c1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10d      	bne.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800c1c6:	4b22      	ldr	r3, [pc, #136]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c1c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c1cc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c1d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c1d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1d8:	4a1d      	ldr	r2, [pc, #116]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800c1e0:	e003      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c1e6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c1ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c1f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c200:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c204:	460b      	mov	r3, r1
 800c206:	4313      	orrs	r3, r2
 800c208:	d055      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800c20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c20e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c216:	d035      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800c218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c21c:	d82e      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800c21e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c222:	d031      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800c224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c228:	d828      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800c22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c22e:	d01b      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800c230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c234:	d822      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800c23a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23e:	d009      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800c240:	e01c      	b.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c242:	4b03      	ldr	r3, [pc, #12]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c246:	4a02      	ldr	r2, [pc, #8]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800c248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c24c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c24e:	e01c      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800c250:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c258:	3308      	adds	r3, #8
 800c25a:	4618      	mov	r0, r3
 800c25c:	f003 fda0 	bl	800fda0 <RCCEx_PLL2_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c266:	e010      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c26c:	3330      	adds	r3, #48	; 0x30
 800c26e:	4618      	mov	r0, r3
 800c270:	f003 fe2e 	bl	800fed0 <RCCEx_PLL3_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c27a:	e006      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c282:	e002      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800c284:	bf00      	nop
 800c286:	e000      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800c288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c28a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800c292:	4bc3      	ldr	r3, [pc, #780]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c298:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c29c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c2a4:	4abe      	ldr	r2, [pc, #760]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c2b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800c2b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c2c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	d051      	beq.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800c2d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c2de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e2:	d033      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800c2e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e8:	d82c      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800c2ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800c2ee:	d02d      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800c2f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800c2f4:	d826      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800c2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2fa:	d019      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800c2fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c300:	d820      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800c306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c30a:	d007      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800c30c:	e01a      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c30e:	4ba4      	ldr	r3, [pc, #656]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	4aa3      	ldr	r2, [pc, #652]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c318:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c31a:	e018      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c31c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c320:	3308      	adds	r3, #8
 800c322:	4618      	mov	r0, r3
 800c324:	f003 fd3c 	bl	800fda0 <RCCEx_PLL2_Config>
 800c328:	4603      	mov	r3, r0
 800c32a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c32e:	e00e      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c334:	3330      	adds	r3, #48	; 0x30
 800c336:	4618      	mov	r0, r3
 800c338:	f003 fdca 	bl	800fed0 <RCCEx_PLL3_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c34a:	e000      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800c34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10d      	bne.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800c356:	4b92      	ldr	r3, [pc, #584]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c35c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800c360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c364:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c368:	4a8d      	ldr	r2, [pc, #564]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c36a:	430b      	orrs	r3, r1
 800c36c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c370:	e003      	b.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c372:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c376:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800c37a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c386:	67bb      	str	r3, [r7, #120]	; 0x78
 800c388:	2300      	movs	r3, #0
 800c38a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c38c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c390:	460b      	mov	r3, r1
 800c392:	4313      	orrs	r3, r2
 800c394:	d032      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800c396:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c39a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d80f      	bhi.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d211      	bcs.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d911      	bls.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d109      	bne.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c3ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f003 fcf3 	bl	800fda0 <RCCEx_PLL2_Config>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c3c0:	e006      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c3c8:	e002      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800c3ca:	bf00      	nop
 800c3cc:	e000      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800c3ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10d      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800c3d8:	4b71      	ldr	r3, [pc, #452]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c3da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c3de:	f023 0107 	bic.w	r1, r3, #7
 800c3e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3ea:	4a6d      	ldr	r2, [pc, #436]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c3f2:	e003      	b.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c3f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800c3fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	2100      	movs	r1, #0
 800c406:	6739      	str	r1, [r7, #112]	; 0x70
 800c408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c40c:	677b      	str	r3, [r7, #116]	; 0x74
 800c40e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c412:	460b      	mov	r3, r1
 800c414:	4313      	orrs	r3, r2
 800c416:	d024      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800c418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c41c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800c424:	2b08      	cmp	r3, #8
 800c426:	d005      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c42e:	e002      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800c430:	bf00      	nop
 800c432:	e000      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800c434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c436:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10d      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800c43e:	4b58      	ldr	r3, [pc, #352]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c444:	f023 0108 	bic.w	r1, r3, #8
 800c448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c44c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c450:	4a53      	ldr	r2, [pc, #332]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c452:	430b      	orrs	r3, r1
 800c454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c458:	e003      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c45e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c462:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c46e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c470:	2300      	movs	r3, #0
 800c472:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c474:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c478:	460b      	mov	r3, r1
 800c47a:	4313      	orrs	r3, r2
 800c47c:	f000 80b9 	beq.w	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800c480:	4b48      	ldr	r3, [pc, #288]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	4a47      	ldr	r2, [pc, #284]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800c486:	f043 0301 	orr.w	r3, r3, #1
 800c48a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c48c:	f7fa f9fa 	bl	8006884 <HAL_GetTick>
 800c490:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800c494:	e00b      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c496:	f7fa f9f5 	bl	8006884 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d903      	bls.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c4ac:	e005      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800c4ae:	4b3d      	ldr	r3, [pc, #244]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0ed      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800c4ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 8093 	bne.w	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c4c4:	4b36      	ldr	r3, [pc, #216]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c4c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c4d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d023      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800c4da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c4de:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800c4e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d01b      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c4ea:	4b2d      	ldr	r3, [pc, #180]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c4ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c4f8:	4b29      	ldr	r3, [pc, #164]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c4fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4fe:	4a28      	ldr	r2, [pc, #160]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c504:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c508:	4b25      	ldr	r3, [pc, #148]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c50a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c50e:	4a24      	ldr	r2, [pc, #144]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c514:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c518:	4a21      	ldr	r2, [pc, #132]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c51a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c51e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c522:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d019      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c52e:	f7fa f9a9 	bl	8006884 <HAL_GetTick>
 800c532:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c536:	e00d      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c538:	f7fa f9a4 	bl	8006884 <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c542:	1ad2      	subs	r2, r2, r3
 800c544:	f241 3388 	movw	r3, #5000	; 0x1388
 800c548:	429a      	cmp	r2, r3
 800c54a:	d903      	bls.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800c552:	e006      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d0ea      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800c562:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c566:	2b00      	cmp	r3, #0
 800c568:	d13a      	bne.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c56a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c56e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c57a:	d115      	bne.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800c57c:	4b08      	ldr	r3, [pc, #32]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c588:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c58c:	091b      	lsrs	r3, r3, #4
 800c58e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c592:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c596:	4a02      	ldr	r2, [pc, #8]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800c598:	430b      	orrs	r3, r1
 800c59a:	61d3      	str	r3, [r2, #28]
 800c59c:	e00a      	b.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800c59e:	bf00      	nop
 800c5a0:	44020c00 	.word	0x44020c00
 800c5a4:	44020800 	.word	0x44020800
 800c5a8:	4b9f      	ldr	r3, [pc, #636]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	4a9e      	ldr	r2, [pc, #632]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5b2:	61d3      	str	r3, [r2, #28]
 800c5b4:	4b9c      	ldr	r3, [pc, #624]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5ba:	4a9b      	ldr	r2, [pc, #620]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c5c4:	4b98      	ldr	r3, [pc, #608]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5c6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800c5ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c5ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c5d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5d6:	4a94      	ldr	r2, [pc, #592]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c5de:	e008      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c5e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c5e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800c5e8:	e003      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c5ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800c5fe:	663b      	str	r3, [r7, #96]	; 0x60
 800c600:	2300      	movs	r3, #0
 800c602:	667b      	str	r3, [r7, #100]	; 0x64
 800c604:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c608:	460b      	mov	r3, r1
 800c60a:	4313      	orrs	r3, r2
 800c60c:	d035      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c60e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c612:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c616:	2b30      	cmp	r3, #48	; 0x30
 800c618:	d014      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800c61a:	2b30      	cmp	r3, #48	; 0x30
 800c61c:	d80e      	bhi.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800c61e:	2b20      	cmp	r3, #32
 800c620:	d012      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800c622:	2b20      	cmp	r3, #32
 800c624:	d80a      	bhi.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d010      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800c62a:	2b10      	cmp	r3, #16
 800c62c:	d106      	bne.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c62e:	4b7e      	ldr	r3, [pc, #504]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	4a7d      	ldr	r2, [pc, #500]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c638:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800c63a:	e008      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c642:	e004      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800c644:	bf00      	nop
 800c646:	e002      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800c648:	bf00      	nop
 800c64a:	e000      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800c64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c64e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10d      	bne.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c65c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c664:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c668:	4a6f      	ldr	r2, [pc, #444]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c66a:	430b      	orrs	r3, r1
 800c66c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c670:	e003      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c672:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c676:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c67a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c686:	65bb      	str	r3, [r7, #88]	; 0x58
 800c688:	2300      	movs	r3, #0
 800c68a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c68c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c690:	460b      	mov	r3, r1
 800c692:	4313      	orrs	r3, r2
 800c694:	d033      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800c696:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c69a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800c6a2:	2b40      	cmp	r3, #64	; 0x40
 800c6a4:	d007      	beq.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800c6a6:	e010      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6a8:	4b5f      	ldr	r3, [pc, #380]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ac:	4a5e      	ldr	r2, [pc, #376]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c6ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6b2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800c6b4:	e00d      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c6b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f003 fb6f 	bl	800fda0 <RCCEx_PLL2_Config>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800c6c8:	e003      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c6d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10d      	bne.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800c6da:	4b53      	ldr	r3, [pc, #332]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c6dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c6e0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800c6e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c6e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c6ec:	4a4e      	ldr	r2, [pc, #312]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800c6f4:	e003      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c6fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c6fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c70a:	653b      	str	r3, [r7, #80]	; 0x50
 800c70c:	2300      	movs	r3, #0
 800c70e:	657b      	str	r3, [r7, #84]	; 0x54
 800c710:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c714:	460b      	mov	r3, r1
 800c716:	4313      	orrs	r3, r2
 800c718:	d033      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800c71a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c71e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800c726:	2b80      	cmp	r3, #128	; 0x80
 800c728:	d007      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800c72a:	e010      	b.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c72c:	4b3e      	ldr	r3, [pc, #248]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c730:	4a3d      	ldr	r2, [pc, #244]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c736:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800c738:	e00d      	b.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c73a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c73e:	3308      	adds	r3, #8
 800c740:	4618      	mov	r0, r3
 800c742:	f003 fb2d 	bl	800fda0 <RCCEx_PLL2_Config>
 800c746:	4603      	mov	r3, r0
 800c748:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800c74c:	e003      	b.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c754:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10d      	bne.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800c75e:	4b32      	ldr	r3, [pc, #200]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c764:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c768:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c76c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c770:	4a2d      	ldr	r2, [pc, #180]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c772:	430b      	orrs	r3, r1
 800c774:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800c778:	e003      	b.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c77e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800c78e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c790:	2300      	movs	r3, #0
 800c792:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c794:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c798:	460b      	mov	r3, r1
 800c79a:	4313      	orrs	r3, r2
 800c79c:	d04a      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800c79e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d827      	bhi.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c7c5 	.word	0x0800c7c5
 800c7b4:	0800c7d3 	.word	0x0800c7d3
 800c7b8:	0800c7e7 	.word	0x0800c7e7
 800c7bc:	0800c803 	.word	0x0800c803
 800c7c0:	0800c803 	.word	0x0800c803
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7c4:	4b18      	ldr	r3, [pc, #96]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c8:	4a17      	ldr	r2, [pc, #92]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c7ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ce:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800c7d0:	e018      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c7d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7d6:	3308      	adds	r3, #8
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f003 fae1 	bl	800fda0 <RCCEx_PLL2_Config>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800c7e4:	e00e      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c7e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7ea:	3330      	adds	r3, #48	; 0x30
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f003 fb6f 	bl	800fed0 <RCCEx_PLL3_Config>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800c7f8:	e004      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c800:	e000      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800c802:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c804:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10f      	bne.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c80c:	4b06      	ldr	r3, [pc, #24]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c812:	f023 0107 	bic.w	r1, r3, #7
 800c816:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c81a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c81e:	4a02      	ldr	r2, [pc, #8]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800c820:	430b      	orrs	r3, r1
 800c822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c826:	e005      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800c828:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c830:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c834:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c840:	643b      	str	r3, [r7, #64]	; 0x40
 800c842:	2300      	movs	r3, #0
 800c844:	647b      	str	r3, [r7, #68]	; 0x44
 800c846:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c84a:	460b      	mov	r3, r1
 800c84c:	4313      	orrs	r3, r2
 800c84e:	f000 8081 	beq.w	800c954 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800c852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c856:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c85a:	2b20      	cmp	r3, #32
 800c85c:	d85f      	bhi.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800c85e:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c8e9 	.word	0x0800c8e9
 800c868:	0800c91f 	.word	0x0800c91f
 800c86c:	0800c91f 	.word	0x0800c91f
 800c870:	0800c91f 	.word	0x0800c91f
 800c874:	0800c91f 	.word	0x0800c91f
 800c878:	0800c91f 	.word	0x0800c91f
 800c87c:	0800c91f 	.word	0x0800c91f
 800c880:	0800c91f 	.word	0x0800c91f
 800c884:	0800c8f7 	.word	0x0800c8f7
 800c888:	0800c91f 	.word	0x0800c91f
 800c88c:	0800c91f 	.word	0x0800c91f
 800c890:	0800c91f 	.word	0x0800c91f
 800c894:	0800c91f 	.word	0x0800c91f
 800c898:	0800c91f 	.word	0x0800c91f
 800c89c:	0800c91f 	.word	0x0800c91f
 800c8a0:	0800c91f 	.word	0x0800c91f
 800c8a4:	0800c90b 	.word	0x0800c90b
 800c8a8:	0800c91f 	.word	0x0800c91f
 800c8ac:	0800c91f 	.word	0x0800c91f
 800c8b0:	0800c91f 	.word	0x0800c91f
 800c8b4:	0800c91f 	.word	0x0800c91f
 800c8b8:	0800c91f 	.word	0x0800c91f
 800c8bc:	0800c91f 	.word	0x0800c91f
 800c8c0:	0800c91f 	.word	0x0800c91f
 800c8c4:	0800c927 	.word	0x0800c927
 800c8c8:	0800c91f 	.word	0x0800c91f
 800c8cc:	0800c91f 	.word	0x0800c91f
 800c8d0:	0800c91f 	.word	0x0800c91f
 800c8d4:	0800c91f 	.word	0x0800c91f
 800c8d8:	0800c91f 	.word	0x0800c91f
 800c8dc:	0800c91f 	.word	0x0800c91f
 800c8e0:	0800c91f 	.word	0x0800c91f
 800c8e4:	0800c927 	.word	0x0800c927
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e8:	4bab      	ldr	r3, [pc, #684]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ec:	4aaa      	ldr	r2, [pc, #680]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800c8f4:	e018      	b.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c8f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c8fa:	3308      	adds	r3, #8
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f003 fa4f 	bl	800fda0 <RCCEx_PLL2_Config>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800c908:	e00e      	b.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c90a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c90e:	3330      	adds	r3, #48	; 0x30
 800c910:	4618      	mov	r0, r3
 800c912:	f003 fadd 	bl	800fed0 <RCCEx_PLL3_Config>
 800c916:	4603      	mov	r3, r0
 800c918:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800c91c:	e004      	b.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c924:	e000      	b.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800c926:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c928:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10d      	bne.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c930:	4b99      	ldr	r3, [pc, #612]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c936:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c93a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c93e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c942:	4a95      	ldr	r2, [pc, #596]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c944:	430b      	orrs	r3, r1
 800c946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c94a:	e003      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c950:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c960:	63bb      	str	r3, [r7, #56]	; 0x38
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c966:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c96a:	460b      	mov	r3, r1
 800c96c:	4313      	orrs	r3, r2
 800c96e:	d04e      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800c970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97c:	d02e      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800c97e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c982:	d827      	bhi.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c984:	2bc0      	cmp	r3, #192	; 0xc0
 800c986:	d02b      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800c988:	2bc0      	cmp	r3, #192	; 0xc0
 800c98a:	d823      	bhi.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c98c:	2b80      	cmp	r3, #128	; 0x80
 800c98e:	d017      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800c990:	2b80      	cmp	r3, #128	; 0x80
 800c992:	d81f      	bhi.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d007      	beq.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800c99c:	e01a      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c99e:	4b7e      	ldr	r3, [pc, #504]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a2:	4a7d      	ldr	r2, [pc, #500]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9a8:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c9aa:	e01a      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c9ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f003 f9f4 	bl	800fda0 <RCCEx_PLL2_Config>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c9be:	e010      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c9c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9c4:	3330      	adds	r3, #48	; 0x30
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f003 fa82 	bl	800fed0 <RCCEx_PLL3_Config>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c9d2:	e006      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800c9da:	e002      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800c9dc:	bf00      	nop
 800c9de:	e000      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800c9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10d      	bne.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c9ea:	4b6b      	ldr	r3, [pc, #428]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c9ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c9f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c9fc:	4a66      	ldr	r2, [pc, #408]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c9fe:	430b      	orrs	r3, r1
 800ca00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ca04:	e003      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ca0a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800ca0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ca1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ca24:	460b      	mov	r3, r1
 800ca26:	4313      	orrs	r3, r2
 800ca28:	d055      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800ca2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ca32:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ca36:	d031      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800ca38:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ca3c:	d82a      	bhi.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800ca3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca42:	d02d      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800ca44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca48:	d824      	bhi.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800ca4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca4e:	d029      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800ca50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca54:	d81e      	bhi.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800ca56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca5a:	d011      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800ca5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca60:	d818      	bhi.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d020      	beq.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800ca66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6a:	d113      	bne.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ca6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca70:	3308      	adds	r3, #8
 800ca72:	4618      	mov	r0, r3
 800ca74:	f003 f994 	bl	800fda0 <RCCEx_PLL2_Config>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800ca7e:	e014      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ca80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca84:	3330      	adds	r3, #48	; 0x30
 800ca86:	4618      	mov	r0, r3
 800ca88:	f003 fa22 	bl	800fed0 <RCCEx_PLL3_Config>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800ca92:	e00a      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ca9a:	e006      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800ca9c:	bf00      	nop
 800ca9e:	e004      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800caa0:	bf00      	nop
 800caa2:	e002      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800caa4:	bf00      	nop
 800caa6:	e000      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800caa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800cab2:	4b39      	ldr	r3, [pc, #228]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800cab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cab8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800cabc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cac0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800cac4:	4a34      	ldr	r2, [pc, #208]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800cac6:	430b      	orrs	r3, r1
 800cac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cacc:	e003      	b.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cad2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800cad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cae2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cae4:	2300      	movs	r3, #0
 800cae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cae8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800caec:	460b      	mov	r3, r1
 800caee:	4313      	orrs	r3, r2
 800caf0:	d058      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800caf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cafa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cafe:	d031      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800cb00:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cb04:	d82a      	bhi.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800cb06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb0a:	d02d      	beq.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800cb0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb10:	d824      	bhi.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800cb12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb16:	d029      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800cb18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb1c:	d81e      	bhi.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800cb1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb22:	d011      	beq.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800cb24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb28:	d818      	bhi.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d020      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800cb2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb32:	d113      	bne.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cb34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb38:	3308      	adds	r3, #8
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f003 f930 	bl	800fda0 <RCCEx_PLL2_Config>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800cb46:	e014      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cb48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb4c:	3330      	adds	r3, #48	; 0x30
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f003 f9be 	bl	800fed0 <RCCEx_PLL3_Config>
 800cb54:	4603      	mov	r3, r0
 800cb56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800cb5a:	e00a      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800cb62:	e006      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800cb64:	bf00      	nop
 800cb66:	e004      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800cb68:	bf00      	nop
 800cb6a:	e002      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800cb6c:	bf00      	nop
 800cb6e:	e000      	b.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800cb70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d110      	bne.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800cb7a:	4b07      	ldr	r3, [pc, #28]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800cb7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800cb84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb8c:	4902      	ldr	r1, [pc, #8]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800cb94:	e006      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800cb96:	bf00      	nop
 800cb98:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cba0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	2100      	movs	r1, #0
 800cbae:	6239      	str	r1, [r7, #32]
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	d055      	beq.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800cbc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cbc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cbc8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800cbcc:	d031      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800cbce:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800cbd2:	d82a      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800cbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd8:	d02d      	beq.n	800cc36 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800cbda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbde:	d824      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800cbe0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800cbe4:	d029      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800cbe6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800cbea:	d81e      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800cbec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbf0:	d011      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800cbf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbf6:	d818      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d020      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800cbfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc00:	d113      	bne.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cc02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc06:	3308      	adds	r3, #8
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f003 f8c9 	bl	800fda0 <RCCEx_PLL2_Config>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc14:	e014      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cc16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc1a:	3330      	adds	r3, #48	; 0x30
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f003 f957 	bl	800fed0 <RCCEx_PLL3_Config>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc28:	e00a      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800cc30:	e006      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800cc32:	bf00      	nop
 800cc34:	e004      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800cc36:	bf00      	nop
 800cc38:	e002      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800cc3a:	bf00      	nop
 800cc3c:	e000      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800cc3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10d      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800cc48:	4b88      	ldr	r3, [pc, #544]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cc4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc4e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800cc52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc5a:	4984      	ldr	r1, [pc, #528]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800cc62:	e003      	b.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cc68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cc6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	2100      	movs	r1, #0
 800cc76:	61b9      	str	r1, [r7, #24]
 800cc78:	f003 0302 	and.w	r3, r3, #2
 800cc7c:	61fb      	str	r3, [r7, #28]
 800cc7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cc82:	460b      	mov	r3, r1
 800cc84:	4313      	orrs	r3, r2
 800cc86:	d03d      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800cc88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d81c      	bhi.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800cc94:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9a:	bf00      	nop
 800cc9c:	0800ccd7 	.word	0x0800ccd7
 800cca0:	0800ccad 	.word	0x0800ccad
 800cca4:	0800ccbb 	.word	0x0800ccbb
 800cca8:	0800ccd7 	.word	0x0800ccd7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccac:	4b6f      	ldr	r3, [pc, #444]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb0:	4a6e      	ldr	r2, [pc, #440]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ccb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccb6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800ccb8:	e00e      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ccba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f003 f86d 	bl	800fda0 <RCCEx_PLL2_Config>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800cccc:	e004      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800ccd4:	e000      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800ccd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccd8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10d      	bne.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800cce0:	4b62      	ldr	r3, [pc, #392]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cce6:	f023 0203 	bic.w	r2, r3, #3
 800ccea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ccf2:	495e      	ldr	r1, [pc, #376]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ccfa:	e003      	b.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cd00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cd04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	6139      	str	r1, [r7, #16]
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	d03a      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800cd20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cd28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd2c:	d00e      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800cd2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd32:	d815      	bhi.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d017      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800cd38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd3c:	d110      	bne.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd3e:	4b4b      	ldr	r3, [pc, #300]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	4a4a      	ldr	r2, [pc, #296]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cd44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd48:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800cd4a:	e00e      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cd4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd50:	3308      	adds	r3, #8
 800cd52:	4618      	mov	r0, r3
 800cd54:	f003 f824 	bl	800fda0 <RCCEx_PLL2_Config>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800cd5e:	e004      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800cd66:	e000      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800cd68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10d      	bne.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800cd72:	4b3e      	ldr	r3, [pc, #248]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cd74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cd84:	4939      	ldr	r1, [pc, #228]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800cd8c:	e003      	b.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cd92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cd96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	2100      	movs	r1, #0
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	f003 0310 	and.w	r3, r3, #16
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d038      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800cdb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cdba:	2b30      	cmp	r3, #48	; 0x30
 800cdbc:	d01b      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800cdbe:	2b30      	cmp	r3, #48	; 0x30
 800cdc0:	d815      	bhi.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800cdc2:	2b10      	cmp	r3, #16
 800cdc4:	d002      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d007      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800cdca:	e010      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdcc:	4b27      	ldr	r3, [pc, #156]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd0:	4a26      	ldr	r2, [pc, #152]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800cdd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdd6:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800cdd8:	e00e      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cdda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdde:	3330      	adds	r3, #48	; 0x30
 800cde0:	4618      	mov	r0, r3
 800cde2:	f003 f875 	bl	800fed0 <RCCEx_PLL3_Config>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800cdec:	e004      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800cdf4:	e000      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800cdf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdf8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10d      	bne.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800ce00:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ce02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ce06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ce12:	4916      	ldr	r1, [pc, #88]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ce14:	4313      	orrs	r3, r2
 800ce16:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ce1a:	e003      	b.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800ce20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ce24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6039      	str	r1, [r7, #0]
 800ce30:	f003 0308 	and.w	r3, r3, #8
 800ce34:	607b      	str	r3, [r7, #4]
 800ce36:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	d00c      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ce42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce4e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ce52:	4906      	ldr	r1, [pc, #24]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800ce5a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800ce64:	46bd      	mov	sp, r7
 800ce66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce6a:	bf00      	nop
 800ce6c:	44020c00 	.word	0x44020c00

0800ce70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b08b      	sub	sp, #44	; 0x2c
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800ce78:	4bad      	ldr	r3, [pc, #692]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ce7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce80:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ce82:	4bab      	ldr	r3, [pc, #684]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ce84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800ce8c:	4ba8      	ldr	r3, [pc, #672]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ce8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce90:	0a1b      	lsrs	r3, r3, #8
 800ce92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce96:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800ce98:	4ba5      	ldr	r3, [pc, #660]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9c:	f003 0310 	and.w	r3, r3, #16
 800cea0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800cea2:	4ba3      	ldr	r3, [pc, #652]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800cea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea6:	08db      	lsrs	r3, r3, #3
 800cea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	fb02 f303 	mul.w	r3, r2, r3
 800ceb2:	ee07 3a90 	vmov	s15, r3
 800ceb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f000 8126 	beq.w	800d112 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d053      	beq.n	800cf74 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d86f      	bhi.n	800cfb2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d003      	beq.n	800cee0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d02b      	beq.n	800cf36 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800cede:	e068      	b.n	800cfb2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cee0:	4b93      	ldr	r3, [pc, #588]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	08db      	lsrs	r3, r3, #3
 800cee6:	f003 0303 	and.w	r3, r3, #3
 800ceea:	4a92      	ldr	r2, [pc, #584]	; (800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800ceec:	fa22 f303 	lsr.w	r3, r2, r3
 800cef0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	ee07 3a90 	vmov	s15, r3
 800cef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf14:	ed97 6a04 	vldr	s12, [r7, #16]
 800cf18:	eddf 5a87 	vldr	s11, [pc, #540]	; 800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800cf1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800cf34:	e068      	b.n	800d008 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	ee07 3a90 	vmov	s15, r3
 800cf3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf40:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800cf44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf52:	ed97 6a04 	vldr	s12, [r7, #16]
 800cf56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800cf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800cf72:	e049      	b.n	800d008 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7e:	eddf 6a70 	vldr	s13, [pc, #448]	; 800d140 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800cf82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf86:	6a3b      	ldr	r3, [r7, #32]
 800cf88:	ee07 3a90 	vmov	s15, r3
 800cf8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf90:	ed97 6a04 	vldr	s12, [r7, #16]
 800cf94:	eddf 5a68 	vldr	s11, [pc, #416]	; 800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800cf98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800cfb0:	e02a      	b.n	800d008 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cfb2:	4b5f      	ldr	r3, [pc, #380]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	08db      	lsrs	r3, r3, #3
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	4a5d      	ldr	r2, [pc, #372]	; (800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800cfbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cfc2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe6:	ed97 6a04 	vldr	s12, [r7, #16]
 800cfea:	eddf 5a53 	vldr	s11, [pc, #332]	; 800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800cfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d002:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800d006:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d008:	4b49      	ldr	r3, [pc, #292]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d014:	d121      	bne.n	800d05a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800d016:	4b46      	ldr	r3, [pc, #280]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d017      	beq.n	800d052 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d022:	4b43      	ldr	r3, [pc, #268]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d026:	0a5b      	lsrs	r3, r3, #9
 800d028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800d034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d038:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800d03c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d048:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	e006      	b.n	800d060 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	e002      	b.n	800d060 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d060:	4b33      	ldr	r3, [pc, #204]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d06c:	d121      	bne.n	800d0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800d06e:	4b30      	ldr	r3, [pc, #192]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d017      	beq.n	800d0aa <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d07a:	4b2d      	ldr	r3, [pc, #180]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	0c1b      	lsrs	r3, r3, #16
 800d080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800d08c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d090:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800d094:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0a0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	605a      	str	r2, [r3, #4]
 800d0a8:	e006      	b.n	800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	605a      	str	r2, [r3, #4]
 800d0b0:	e002      	b.n	800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0b8:	4b1d      	ldr	r3, [pc, #116]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0c4:	d121      	bne.n	800d10a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800d0c6:	4b1a      	ldr	r3, [pc, #104]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d017      	beq.n	800d102 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d0d2:	4b17      	ldr	r3, [pc, #92]	; (800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d6:	0e1b      	lsrs	r3, r3, #24
 800d0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800d0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800d0ec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d100:	e010      	b.n	800d124 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	609a      	str	r2, [r3, #8]
}
 800d108:	e00c      	b.n	800d124 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	609a      	str	r2, [r3, #8]
}
 800d110:	e008      	b.n	800d124 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	609a      	str	r2, [r3, #8]
}
 800d124:	bf00      	nop
 800d126:	372c      	adds	r7, #44	; 0x2c
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	44020c00 	.word	0x44020c00
 800d134:	03d09000 	.word	0x03d09000
 800d138:	46000000 	.word	0x46000000
 800d13c:	4a742400 	.word	0x4a742400
 800d140:	4af42400 	.word	0x4af42400

0800d144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800d144:	b480      	push	{r7}
 800d146:	b08b      	sub	sp, #44	; 0x2c
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800d14c:	4bad      	ldr	r3, [pc, #692]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d154:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800d156:	4bab      	ldr	r3, [pc, #684]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	f003 0303 	and.w	r3, r3, #3
 800d15e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800d160:	4ba8      	ldr	r3, [pc, #672]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	0a1b      	lsrs	r3, r3, #8
 800d166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d16a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800d16c:	4ba5      	ldr	r3, [pc, #660]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d170:	f003 0310 	and.w	r3, r3, #16
 800d174:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800d176:	4ba3      	ldr	r3, [pc, #652]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17a:	08db      	lsrs	r3, r3, #3
 800d17c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 8126 	beq.w	800d3e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d053      	beq.n	800d248 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d86f      	bhi.n	800d286 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d003      	beq.n	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d02b      	beq.n	800d20a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800d1b2:	e068      	b.n	800d286 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d1b4:	4b93      	ldr	r3, [pc, #588]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	08db      	lsrs	r3, r3, #3
 800d1ba:	f003 0303 	and.w	r3, r3, #3
 800d1be:	4a92      	ldr	r2, [pc, #584]	; (800d408 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800d1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	ee07 3a90 	vmov	s15, r3
 800d1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	ee07 3a90 	vmov	s15, r3
 800d1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e8:	ed97 6a04 	vldr	s12, [r7, #16]
 800d1ec:	eddf 5a87 	vldr	s11, [pc, #540]	; 800d40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800d1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d204:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800d208:	e068      	b.n	800d2dc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	ee07 3a90 	vmov	s15, r3
 800d210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d214:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800d410 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800d218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d226:	ed97 6a04 	vldr	s12, [r7, #16]
 800d22a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800d22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d242:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800d246:	e049      	b.n	800d2dc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eddf 6a70 	vldr	s13, [pc, #448]	; 800d414 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800d256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	ee07 3a90 	vmov	s15, r3
 800d260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d264:	ed97 6a04 	vldr	s12, [r7, #16]
 800d268:	eddf 5a68 	vldr	s11, [pc, #416]	; 800d40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800d26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d280:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800d284:	e02a      	b.n	800d2dc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d286:	4b5f      	ldr	r3, [pc, #380]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	08db      	lsrs	r3, r3, #3
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	4a5d      	ldr	r2, [pc, #372]	; (800d408 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800d292:	fa22 f303 	lsr.w	r3, r2, r3
 800d296:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	ee07 3a90 	vmov	s15, r3
 800d29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	ee07 3a90 	vmov	s15, r3
 800d2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ba:	ed97 6a04 	vldr	s12, [r7, #16]
 800d2be:	eddf 5a53 	vldr	s11, [pc, #332]	; 800d40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800d2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800d2da:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2dc:	4b49      	ldr	r3, [pc, #292]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2e8:	d121      	bne.n	800d32e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800d2ea:	4b46      	ldr	r3, [pc, #280]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d017      	beq.n	800d326 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d2f6:	4b43      	ldr	r3, [pc, #268]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	0a5b      	lsrs	r3, r3, #9
 800d2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d300:	ee07 3a90 	vmov	s15, r3
 800d304:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800d308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d30c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800d310:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d31c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e006      	b.n	800d334 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	e002      	b.n	800d334 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d334:	4b33      	ldr	r3, [pc, #204]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d33c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d340:	d121      	bne.n	800d386 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800d342:	4b30      	ldr	r3, [pc, #192]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d017      	beq.n	800d37e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d34e:	4b2d      	ldr	r3, [pc, #180]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d352:	0c1b      	lsrs	r3, r3, #16
 800d354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d358:	ee07 3a90 	vmov	s15, r3
 800d35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800d360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d364:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800d368:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d36c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d374:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	605a      	str	r2, [r3, #4]
 800d37c:	e006      	b.n	800d38c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	605a      	str	r2, [r3, #4]
 800d384:	e002      	b.n	800d38c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d398:	d121      	bne.n	800d3de <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800d39a:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d017      	beq.n	800d3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d3a6:	4b17      	ldr	r3, [pc, #92]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800d3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3aa:	0e1b      	lsrs	r3, r3, #24
 800d3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b0:	ee07 3a90 	vmov	s15, r3
 800d3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800d3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800d3c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3cc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3d4:	e010      	b.n	800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	609a      	str	r2, [r3, #8]
}
 800d3dc:	e00c      	b.n	800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	609a      	str	r2, [r3, #8]
}
 800d3e4:	e008      	b.n	800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	609a      	str	r2, [r3, #8]
}
 800d3f8:	bf00      	nop
 800d3fa:	372c      	adds	r7, #44	; 0x2c
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	44020c00 	.word	0x44020c00
 800d408:	03d09000 	.word	0x03d09000
 800d40c:	46000000 	.word	0x46000000
 800d410:	4a742400 	.word	0x4a742400
 800d414:	4af42400 	.word	0x4af42400

0800d418 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800d418:	b480      	push	{r7}
 800d41a:	b08b      	sub	sp, #44	; 0x2c
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800d420:	4bad      	ldr	r3, [pc, #692]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d428:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800d42a:	4bab      	ldr	r3, [pc, #684]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800d434:	4ba8      	ldr	r3, [pc, #672]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d438:	0a1b      	lsrs	r3, r3, #8
 800d43a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d43e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800d440:	4ba5      	ldr	r3, [pc, #660]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800d44a:	4ba3      	ldr	r3, [pc, #652]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d44e:	08db      	lsrs	r3, r3, #3
 800d450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d462:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 8126 	beq.w	800d6ba <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	2b03      	cmp	r3, #3
 800d472:	d053      	beq.n	800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	2b03      	cmp	r3, #3
 800d478:	d86f      	bhi.n	800d55a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d003      	beq.n	800d488 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	2b02      	cmp	r3, #2
 800d484:	d02b      	beq.n	800d4de <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800d486:	e068      	b.n	800d55a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d488:	4b93      	ldr	r3, [pc, #588]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	08db      	lsrs	r3, r3, #3
 800d48e:	f003 0303 	and.w	r3, r3, #3
 800d492:	4a92      	ldr	r2, [pc, #584]	; (800d6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800d494:	fa22 f303 	lsr.w	r3, r2, r3
 800d498:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	ee07 3a90 	vmov	s15, r3
 800d4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	ee07 3a90 	vmov	s15, r3
 800d4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4bc:	ed97 6a04 	vldr	s12, [r7, #16]
 800d4c0:	eddf 5a87 	vldr	s11, [pc, #540]	; 800d6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800d4c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800d4dc:	e068      	b.n	800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	ee07 3a90 	vmov	s15, r3
 800d4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800d6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800d4ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4fa:	ed97 6a04 	vldr	s12, [r7, #16]
 800d4fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800d502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d516:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800d51a:	e049      	b.n	800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	ee07 3a90 	vmov	s15, r3
 800d522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d526:	eddf 6a70 	vldr	s13, [pc, #448]	; 800d6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800d52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	ee07 3a90 	vmov	s15, r3
 800d534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d538:	ed97 6a04 	vldr	s12, [r7, #16]
 800d53c:	eddf 5a68 	vldr	s11, [pc, #416]	; 800d6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800d540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d554:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800d558:	e02a      	b.n	800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d55a:	4b5f      	ldr	r3, [pc, #380]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	08db      	lsrs	r3, r3, #3
 800d560:	f003 0303 	and.w	r3, r3, #3
 800d564:	4a5d      	ldr	r2, [pc, #372]	; (800d6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800d566:	fa22 f303 	lsr.w	r3, r2, r3
 800d56a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	ee07 3a90 	vmov	s15, r3
 800d57c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d58e:	ed97 6a04 	vldr	s12, [r7, #16]
 800d592:	eddf 5a53 	vldr	s11, [pc, #332]	; 800d6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800d596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d59e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800d5ae:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d5b0:	4b49      	ldr	r3, [pc, #292]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5bc:	d121      	bne.n	800d602 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800d5be:	4b46      	ldr	r3, [pc, #280]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d017      	beq.n	800d5fa <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d5ca:	4b43      	ldr	r3, [pc, #268]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ce:	0a5b      	lsrs	r3, r3, #9
 800d5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800d5dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5e0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800d5e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d5e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5f0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	e006      	b.n	800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	e002      	b.n	800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d608:	4b33      	ldr	r3, [pc, #204]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d614:	d121      	bne.n	800d65a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800d616:	4b30      	ldr	r3, [pc, #192]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d017      	beq.n	800d652 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d622:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d626:	0c1b      	lsrs	r3, r3, #16
 800d628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d62c:	ee07 3a90 	vmov	s15, r3
 800d630:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800d634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d638:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800d63c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d648:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	605a      	str	r2, [r3, #4]
 800d650:	e006      	b.n	800d660 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	605a      	str	r2, [r3, #4]
 800d658:	e002      	b.n	800d660 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d660:	4b1d      	ldr	r3, [pc, #116]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d66c:	d121      	bne.n	800d6b2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d017      	beq.n	800d6aa <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d67a:	4b17      	ldr	r3, [pc, #92]	; (800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800d67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d67e:	0e1b      	lsrs	r3, r3, #24
 800d680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d684:	ee07 3a90 	vmov	s15, r3
 800d688:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800d68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d690:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800d694:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6a0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800d6a8:	e010      	b.n	800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	609a      	str	r2, [r3, #8]
}
 800d6b0:	e00c      	b.n	800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	609a      	str	r2, [r3, #8]
}
 800d6b8:	e008      	b.n	800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	609a      	str	r2, [r3, #8]
}
 800d6cc:	bf00      	nop
 800d6ce:	372c      	adds	r7, #44	; 0x2c
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	44020c00 	.word	0x44020c00
 800d6dc:	03d09000 	.word	0x03d09000
 800d6e0:	46000000 	.word	0x46000000
 800d6e4:	4a742400 	.word	0x4a742400
 800d6e8:	4af42400 	.word	0x4af42400

0800d6ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b08f      	sub	sp, #60	; 0x3c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800d6f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6fa:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800d6fe:	4321      	orrs	r1, r4
 800d700:	d150      	bne.n	800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d702:	4b26      	ldr	r3, [pc, #152]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d70c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800d70e:	4b23      	ldr	r3, [pc, #140]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d714:	f003 0302 	and.w	r3, r3, #2
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d108      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d722:	d104      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d728:	637b      	str	r3, [r7, #52]	; 0x34
 800d72a:	f002 bb2a 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d72e:	4b1b      	ldr	r3, [pc, #108]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d73c:	d108      	bne.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d744:	d104      	bne.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800d746:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34
 800d74c:	f002 bb19 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800d750:	4b12      	ldr	r3, [pc, #72]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d75c:	d119      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d764:	d115      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800d766:	4b0d      	ldr	r3, [pc, #52]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800d76e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d772:	d30a      	bcc.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800d774:	4b09      	ldr	r3, [pc, #36]	; (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800d776:	69db      	ldr	r3, [r3, #28]
 800d778:	0a1b      	lsrs	r3, r3, #8
 800d77a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d77e:	4a08      	ldr	r2, [pc, #32]	; (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800d780:	fbb2 f3f3 	udiv	r3, r2, r3
 800d784:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800d786:	f002 bafc 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800d78e:	f002 baf8 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	637b      	str	r3, [r7, #52]	; 0x34
 800d796:	f002 baf4 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d79a:	bf00      	nop
 800d79c:	44020c00 	.word	0x44020c00
 800d7a0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800d7a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7a8:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800d7ac:	ea50 0104 	orrs.w	r1, r0, r4
 800d7b0:	f001 8275 	beq.w	800ec9e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800d7b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7b8:	2801      	cmp	r0, #1
 800d7ba:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800d7be:	f082 82dd 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d7c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7c6:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800d7ca:	ea50 0104 	orrs.w	r1, r0, r4
 800d7ce:	f001 816c 	beq.w	800eaaa <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800d7d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7d6:	2801      	cmp	r0, #1
 800d7d8:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800d7dc:	f082 82ce 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d7e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7e4:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800d7e8:	ea50 0104 	orrs.w	r1, r0, r4
 800d7ec:	f001 8602 	beq.w	800f3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800d7f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7f4:	2801      	cmp	r0, #1
 800d7f6:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800d7fa:	f082 82bf 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d7fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d802:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800d806:	ea50 0104 	orrs.w	r1, r0, r4
 800d80a:	f001 854c 	beq.w	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800d80e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d812:	2801      	cmp	r0, #1
 800d814:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800d818:	f082 82b0 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d81c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d820:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800d824:	ea50 0104 	orrs.w	r1, r0, r4
 800d828:	f001 849e 	beq.w	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800d82c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d830:	2801      	cmp	r0, #1
 800d832:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800d836:	f082 82a1 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d83a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d83e:	f1a1 0420 	sub.w	r4, r1, #32
 800d842:	ea50 0104 	orrs.w	r1, r0, r4
 800d846:	f001 83e8 	beq.w	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800d84a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d84e:	2801      	cmp	r0, #1
 800d850:	f171 0120 	sbcs.w	r1, r1, #32
 800d854:	f082 8292 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d85c:	f1a1 0410 	sub.w	r4, r1, #16
 800d860:	ea50 0104 	orrs.w	r1, r0, r4
 800d864:	f002 8256 	beq.w	800fd14 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800d868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d86c:	2801      	cmp	r0, #1
 800d86e:	f171 0110 	sbcs.w	r1, r1, #16
 800d872:	f082 8283 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d87a:	f1a1 0408 	sub.w	r4, r1, #8
 800d87e:	ea50 0104 	orrs.w	r1, r0, r4
 800d882:	f002 81cc 	beq.w	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800d886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d88a:	2801      	cmp	r0, #1
 800d88c:	f171 0108 	sbcs.w	r1, r1, #8
 800d890:	f082 8274 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d894:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d898:	1f0c      	subs	r4, r1, #4
 800d89a:	ea50 0104 	orrs.w	r1, r0, r4
 800d89e:	f001 8648 	beq.w	800f532 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800d8a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8a6:	2801      	cmp	r0, #1
 800d8a8:	f171 0104 	sbcs.w	r1, r1, #4
 800d8ac:	f082 8266 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d8b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8b4:	1e8c      	subs	r4, r1, #2
 800d8b6:	ea50 0104 	orrs.w	r1, r0, r4
 800d8ba:	f002 8143 	beq.w	800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800d8be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8c2:	2801      	cmp	r0, #1
 800d8c4:	f171 0102 	sbcs.w	r1, r1, #2
 800d8c8:	f082 8258 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d8cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8d0:	1e4c      	subs	r4, r1, #1
 800d8d2:	ea50 0104 	orrs.w	r1, r0, r4
 800d8d6:	f002 80ce 	beq.w	800fa76 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800d8da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8de:	2801      	cmp	r0, #1
 800d8e0:	f171 0101 	sbcs.w	r1, r1, #1
 800d8e4:	f082 824a 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d8e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ec:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800d8f0:	4321      	orrs	r1, r4
 800d8f2:	f002 8059 	beq.w	800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800d8f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8fa:	4cd9      	ldr	r4, [pc, #868]	; (800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800d8fc:	42a0      	cmp	r0, r4
 800d8fe:	f171 0100 	sbcs.w	r1, r1, #0
 800d902:	f082 823b 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d90a:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800d90e:	4321      	orrs	r1, r4
 800d910:	f001 87d9 	beq.w	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800d914:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d918:	4cd2      	ldr	r4, [pc, #840]	; (800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800d91a:	42a0      	cmp	r0, r4
 800d91c:	f171 0100 	sbcs.w	r1, r1, #0
 800d920:	f082 822c 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d924:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d928:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800d92c:	4321      	orrs	r1, r4
 800d92e:	f001 8751 	beq.w	800f7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800d932:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d936:	4ccc      	ldr	r4, [pc, #816]	; (800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800d938:	42a0      	cmp	r0, r4
 800d93a:	f171 0100 	sbcs.w	r1, r1, #0
 800d93e:	f082 821d 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d942:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d946:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800d94a:	4321      	orrs	r1, r4
 800d94c:	f001 869a 	beq.w	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800d950:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d954:	4cc5      	ldr	r4, [pc, #788]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800d956:	42a0      	cmp	r0, r4
 800d958:	f171 0100 	sbcs.w	r1, r1, #0
 800d95c:	f082 820e 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d960:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d964:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800d968:	4321      	orrs	r1, r4
 800d96a:	f001 8612 	beq.w	800f592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800d96e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d972:	4cbf      	ldr	r4, [pc, #764]	; (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800d974:	42a0      	cmp	r0, r4
 800d976:	f171 0100 	sbcs.w	r1, r1, #0
 800d97a:	f082 81ff 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d97e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d982:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800d986:	4321      	orrs	r1, r4
 800d988:	f002 817e 	beq.w	800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800d98c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d990:	4cb8      	ldr	r4, [pc, #736]	; (800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d992:	42a0      	cmp	r0, r4
 800d994:	f171 0100 	sbcs.w	r1, r1, #0
 800d998:	f082 81f0 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d99c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9a0:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800d9a4:	4321      	orrs	r1, r4
 800d9a6:	f000 829e 	beq.w	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800d9aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9ae:	4cb2      	ldr	r4, [pc, #712]	; (800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d9b0:	42a0      	cmp	r0, r4
 800d9b2:	f171 0100 	sbcs.w	r1, r1, #0
 800d9b6:	f082 81e1 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d9ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9be:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800d9c2:	4321      	orrs	r1, r4
 800d9c4:	f000 826d 	beq.w	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800d9c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9cc:	4cab      	ldr	r4, [pc, #684]	; (800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d9ce:	42a0      	cmp	r0, r4
 800d9d0:	f171 0100 	sbcs.w	r1, r1, #0
 800d9d4:	f082 81d2 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d9d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9dc:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800d9e0:	4321      	orrs	r1, r4
 800d9e2:	f001 800d 	beq.w	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800d9e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9ea:	4ca5      	ldr	r4, [pc, #660]	; (800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d9ec:	42a0      	cmp	r0, r4
 800d9ee:	f171 0100 	sbcs.w	r1, r1, #0
 800d9f2:	f082 81c3 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d9f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9fa:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800d9fe:	4321      	orrs	r1, r4
 800da00:	f000 81d0 	beq.w	800dda4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800da04:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da08:	4c9e      	ldr	r4, [pc, #632]	; (800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800da0a:	42a0      	cmp	r0, r4
 800da0c:	f171 0100 	sbcs.w	r1, r1, #0
 800da10:	f082 81b4 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800da14:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da18:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800da1c:	4321      	orrs	r1, r4
 800da1e:	f000 8142 	beq.w	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800da22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da26:	4c98      	ldr	r4, [pc, #608]	; (800dc88 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800da28:	42a0      	cmp	r0, r4
 800da2a:	f171 0100 	sbcs.w	r1, r1, #0
 800da2e:	f082 81a5 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800da32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da36:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800da3a:	4321      	orrs	r1, r4
 800da3c:	f001 824e 	beq.w	800eedc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800da40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da44:	4c91      	ldr	r4, [pc, #580]	; (800dc8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800da46:	42a0      	cmp	r0, r4
 800da48:	f171 0100 	sbcs.w	r1, r1, #0
 800da4c:	f082 8196 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800da50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da54:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800da58:	4321      	orrs	r1, r4
 800da5a:	f001 8197 	beq.w	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800da5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da62:	4c8b      	ldr	r4, [pc, #556]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800da64:	42a0      	cmp	r0, r4
 800da66:	f171 0100 	sbcs.w	r1, r1, #0
 800da6a:	f082 8187 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800da6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da72:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800da76:	4321      	orrs	r1, r4
 800da78:	f001 8154 	beq.w	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800da7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da80:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800da84:	f171 0100 	sbcs.w	r1, r1, #0
 800da88:	f082 8178 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800da8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da90:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800da94:	4321      	orrs	r1, r4
 800da96:	f001 80b7 	beq.w	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800da9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da9e:	f248 0401 	movw	r4, #32769	; 0x8001
 800daa2:	42a0      	cmp	r0, r4
 800daa4:	f171 0100 	sbcs.w	r1, r1, #0
 800daa8:	f082 8168 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800daac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dab0:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800dab4:	4321      	orrs	r1, r4
 800dab6:	f001 8064 	beq.w	800eb82 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800daba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dabe:	f244 0401 	movw	r4, #16385	; 0x4001
 800dac2:	42a0      	cmp	r0, r4
 800dac4:	f171 0100 	sbcs.w	r1, r1, #0
 800dac8:	f082 8158 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800dacc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dad0:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800dad4:	4321      	orrs	r1, r4
 800dad6:	f001 8011 	beq.w	800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800dada:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dade:	f242 0401 	movw	r4, #8193	; 0x2001
 800dae2:	42a0      	cmp	r0, r4
 800dae4:	f171 0100 	sbcs.w	r1, r1, #0
 800dae8:	f082 8148 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800daec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daf0:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800daf4:	4321      	orrs	r1, r4
 800daf6:	f000 871e 	beq.w	800e936 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800dafa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dafe:	f241 0401 	movw	r4, #4097	; 0x1001
 800db02:	42a0      	cmp	r0, r4
 800db04:	f171 0100 	sbcs.w	r1, r1, #0
 800db08:	f082 8138 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800db0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db10:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800db14:	4321      	orrs	r1, r4
 800db16:	f000 86a8 	beq.w	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800db1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db1e:	f640 0401 	movw	r4, #2049	; 0x801
 800db22:	42a0      	cmp	r0, r4
 800db24:	f171 0100 	sbcs.w	r1, r1, #0
 800db28:	f082 8128 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800db2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db30:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800db34:	4321      	orrs	r1, r4
 800db36:	f000 8632 	beq.w	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800db3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db3e:	f240 4401 	movw	r4, #1025	; 0x401
 800db42:	42a0      	cmp	r0, r4
 800db44:	f171 0100 	sbcs.w	r1, r1, #0
 800db48:	f082 8118 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800db4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db50:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800db54:	4321      	orrs	r1, r4
 800db56:	f000 85b0 	beq.w	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800db5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db5e:	f240 2401 	movw	r4, #513	; 0x201
 800db62:	42a0      	cmp	r0, r4
 800db64:	f171 0100 	sbcs.w	r1, r1, #0
 800db68:	f082 8108 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800db6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db70:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800db74:	4321      	orrs	r1, r4
 800db76:	f000 8535 	beq.w	800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800db7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db7e:	f240 1401 	movw	r4, #257	; 0x101
 800db82:	42a0      	cmp	r0, r4
 800db84:	f171 0100 	sbcs.w	r1, r1, #0
 800db88:	f082 80f8 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800db8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db90:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800db94:	4321      	orrs	r1, r4
 800db96:	f000 84ba 	beq.w	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800db9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db9e:	2881      	cmp	r0, #129	; 0x81
 800dba0:	f171 0100 	sbcs.w	r1, r1, #0
 800dba4:	f082 80ea 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800dba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbac:	2821      	cmp	r0, #33	; 0x21
 800dbae:	f171 0100 	sbcs.w	r1, r1, #0
 800dbb2:	d26f      	bcs.n	800dc94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800dbb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbb8:	4301      	orrs	r1, r0
 800dbba:	f002 80df 	beq.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800dbbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbc2:	1e42      	subs	r2, r0, #1
 800dbc4:	f141 33ff 	adc.w	r3, r1, #4294967295
 800dbc8:	2a20      	cmp	r2, #32
 800dbca:	f173 0100 	sbcs.w	r1, r3, #0
 800dbce:	f082 80d5 	bcs.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800dbd2:	2a1f      	cmp	r2, #31
 800dbd4:	f202 80d2 	bhi.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800dbd8:	a101      	add	r1, pc, #4	; (adr r1, 800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800dbda:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dbde:	bf00      	nop
 800dbe0:	0800df41 	.word	0x0800df41
 800dbe4:	0800e00d 	.word	0x0800e00d
 800dbe8:	0800fd7d 	.word	0x0800fd7d
 800dbec:	0800e0cd 	.word	0x0800e0cd
 800dbf0:	0800fd7d 	.word	0x0800fd7d
 800dbf4:	0800fd7d 	.word	0x0800fd7d
 800dbf8:	0800fd7d 	.word	0x0800fd7d
 800dbfc:	0800e19d 	.word	0x0800e19d
 800dc00:	0800fd7d 	.word	0x0800fd7d
 800dc04:	0800fd7d 	.word	0x0800fd7d
 800dc08:	0800fd7d 	.word	0x0800fd7d
 800dc0c:	0800fd7d 	.word	0x0800fd7d
 800dc10:	0800fd7d 	.word	0x0800fd7d
 800dc14:	0800fd7d 	.word	0x0800fd7d
 800dc18:	0800fd7d 	.word	0x0800fd7d
 800dc1c:	0800e27f 	.word	0x0800e27f
 800dc20:	0800fd7d 	.word	0x0800fd7d
 800dc24:	0800fd7d 	.word	0x0800fd7d
 800dc28:	0800fd7d 	.word	0x0800fd7d
 800dc2c:	0800fd7d 	.word	0x0800fd7d
 800dc30:	0800fd7d 	.word	0x0800fd7d
 800dc34:	0800fd7d 	.word	0x0800fd7d
 800dc38:	0800fd7d 	.word	0x0800fd7d
 800dc3c:	0800fd7d 	.word	0x0800fd7d
 800dc40:	0800fd7d 	.word	0x0800fd7d
 800dc44:	0800fd7d 	.word	0x0800fd7d
 800dc48:	0800fd7d 	.word	0x0800fd7d
 800dc4c:	0800fd7d 	.word	0x0800fd7d
 800dc50:	0800fd7d 	.word	0x0800fd7d
 800dc54:	0800fd7d 	.word	0x0800fd7d
 800dc58:	0800fd7d 	.word	0x0800fd7d
 800dc5c:	0800e355 	.word	0x0800e355
 800dc60:	80000001 	.word	0x80000001
 800dc64:	40000001 	.word	0x40000001
 800dc68:	20000001 	.word	0x20000001
 800dc6c:	10000001 	.word	0x10000001
 800dc70:	08000001 	.word	0x08000001
 800dc74:	04000001 	.word	0x04000001
 800dc78:	00800001 	.word	0x00800001
 800dc7c:	00400001 	.word	0x00400001
 800dc80:	00200001 	.word	0x00200001
 800dc84:	00100001 	.word	0x00100001
 800dc88:	00080001 	.word	0x00080001
 800dc8c:	00040001 	.word	0x00040001
 800dc90:	00020001 	.word	0x00020001
 800dc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc98:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800dc9c:	430b      	orrs	r3, r1
 800dc9e:	f000 83c4 	beq.w	800e42a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800dca2:	f002 b86b 	b.w	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800dca6:	4ba1      	ldr	r3, [pc, #644]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dcac:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dcb0:	633b      	str	r3, [r7, #48]	; 0x30
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dcb8:	d036      	beq.n	800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dcc0:	d86b      	bhi.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dcc8:	d02b      	beq.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dcd0:	d863      	bhi.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dcd8:	d01b      	beq.n	800dd12 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800dcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dce0:	d85b      	bhi.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcee:	d008      	beq.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800dcf0:	e053      	b.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcf2:	f107 0320 	add.w	r3, r7, #32
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff f8ba 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dd00:	e04e      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd02:	f107 0314 	add.w	r3, r7, #20
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff fa1c 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dd10:	e046      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd12:	f107 0308 	add.w	r3, r7, #8
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7ff fb7e 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dd20:	e03e      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800dd22:	4b83      	ldr	r3, [pc, #524]	; (800df30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800dd24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dd26:	e03b      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd28:	4b80      	ldr	r3, [pc, #512]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800dd32:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd34:	4b7d      	ldr	r3, [pc, #500]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0302 	and.w	r3, r3, #2
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d10c      	bne.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800dd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d109      	bne.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dd46:	4b79      	ldr	r3, [pc, #484]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	08db      	lsrs	r3, r3, #3
 800dd4c:	f003 0303 	and.w	r3, r3, #3
 800dd50:	4a78      	ldr	r2, [pc, #480]	; (800df34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800dd52:	fa22 f303 	lsr.w	r3, r2, r3
 800dd56:	637b      	str	r3, [r7, #52]	; 0x34
 800dd58:	e01e      	b.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd5a:	4b74      	ldr	r3, [pc, #464]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd66:	d106      	bne.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd6e:	d102      	bne.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800dd70:	4b71      	ldr	r3, [pc, #452]	; (800df38 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800dd72:	637b      	str	r3, [r7, #52]	; 0x34
 800dd74:	e010      	b.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd76:	4b6d      	ldr	r3, [pc, #436]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd82:	d106      	bne.n	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800dd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd8a:	d102      	bne.n	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800dd8c:	4b6b      	ldr	r3, [pc, #428]	; (800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800dd8e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd90:	e002      	b.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800dd96:	e003      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800dd98:	e002      	b.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dd9e:	bf00      	nop
          }
        }
        break;
 800dda0:	f001 bfef 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800dda4:	4b61      	ldr	r3, [pc, #388]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dda6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ddaa:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800ddae:	633b      	str	r3, [r7, #48]	; 0x30
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddb6:	d036      	beq.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddbe:	d86b      	bhi.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ddc6:	d02b      	beq.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ddce:	d863      	bhi.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddd6:	d01b      	beq.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddde:	d85b      	bhi.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d004      	beq.n	800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ddec:	d008      	beq.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800ddee:	e053      	b.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddf0:	f107 0320 	add.w	r3, r7, #32
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff f83b 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ddfe:	e04e      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de00:	f107 0314 	add.w	r3, r7, #20
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff f99d 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800de0e:	e046      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de10:	f107 0308 	add.w	r3, r7, #8
 800de14:	4618      	mov	r0, r3
 800de16:	f7ff faff 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800de1e:	e03e      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800de20:	4b43      	ldr	r3, [pc, #268]	; (800df30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800de22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800de24:	e03b      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de26:	4b41      	ldr	r3, [pc, #260]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800de28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800de2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800de30:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de32:	4b3e      	ldr	r3, [pc, #248]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d10c      	bne.n	800de58 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800de3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d109      	bne.n	800de58 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800de44:	4b39      	ldr	r3, [pc, #228]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	08db      	lsrs	r3, r3, #3
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	4a39      	ldr	r2, [pc, #228]	; (800df34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800de50:	fa22 f303 	lsr.w	r3, r2, r3
 800de54:	637b      	str	r3, [r7, #52]	; 0x34
 800de56:	e01e      	b.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de58:	4b34      	ldr	r3, [pc, #208]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de64:	d106      	bne.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de6c:	d102      	bne.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800de6e:	4b32      	ldr	r3, [pc, #200]	; (800df38 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
 800de72:	e010      	b.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de74:	4b2d      	ldr	r3, [pc, #180]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de80:	d106      	bne.n	800de90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de88:	d102      	bne.n	800de90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800de8a:	4b2c      	ldr	r3, [pc, #176]	; (800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34
 800de8e:	e002      	b.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800de94:	e003      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800de96:	e002      	b.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800de98:	2300      	movs	r3, #0
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800de9c:	bf00      	nop
          }
        }
        break;
 800de9e:	f001 bf70 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800dea2:	4b22      	ldr	r3, [pc, #136]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dea4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deac:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800deb4:	f107 0320 	add.w	r3, r7, #32
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe ffd9 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dec2:	f001 bf5e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800dec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec8:	2b40      	cmp	r3, #64	; 0x40
 800deca:	d108      	bne.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800decc:	f107 0314 	add.w	r3, r7, #20
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7ff f937 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800deda:	f001 bf52 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dee2:	f001 bf4e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800dee6:	4b11      	ldr	r3, [pc, #68]	; (800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dee8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800deec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800def0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800def8:	f107 0320 	add.w	r3, r7, #32
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe ffb7 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800df06:	f001 bf3c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800df0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0c:	2b80      	cmp	r3, #128	; 0x80
 800df0e:	d108      	bne.n	800df22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df10:	f107 0314 	add.w	r3, r7, #20
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff f915 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df1e:	f001 bf30 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800df22:	2300      	movs	r3, #0
 800df24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df26:	f001 bf2c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800df2a:	bf00      	nop
 800df2c:	44020c00 	.word	0x44020c00
 800df30:	00bb8000 	.word	0x00bb8000
 800df34:	03d09000 	.word	0x03d09000
 800df38:	003d0900 	.word	0x003d0900
 800df3c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800df40:	4b9d      	ldr	r3, [pc, #628]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800df42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df46:	f003 0307 	and.w	r3, r3, #7
 800df4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800df4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d104      	bne.n	800df5c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800df52:	f7fc ffd7 	bl	800af04 <HAL_RCC_GetPCLK2Freq>
 800df56:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800df58:	f001 bf13 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800df5c:	4b96      	ldr	r3, [pc, #600]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df68:	d10a      	bne.n	800df80 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d107      	bne.n	800df80 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df70:	f107 0314 	add.w	r3, r7, #20
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff f8e5 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
 800df7e:	e043      	b.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800df80:	4b8d      	ldr	r3, [pc, #564]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df8c:	d10a      	bne.n	800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	2b02      	cmp	r3, #2
 800df92:	d107      	bne.n	800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df94:	f107 0308 	add.w	r3, r7, #8
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff fa3d 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa2:	e031      	b.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800dfa4:	4b84      	ldr	r3, [pc, #528]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f003 0302 	and.w	r3, r3, #2
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d10c      	bne.n	800dfca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	d109      	bne.n	800dfca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dfb6:	4b80      	ldr	r3, [pc, #512]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	08db      	lsrs	r3, r3, #3
 800dfbc:	f003 0303 	and.w	r3, r3, #3
 800dfc0:	4a7e      	ldr	r2, [pc, #504]	; (800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800dfc2:	fa22 f303 	lsr.w	r3, r2, r3
 800dfc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc8:	e01e      	b.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800dfca:	4b7b      	ldr	r3, [pc, #492]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfd6:	d105      	bne.n	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	2b04      	cmp	r3, #4
 800dfdc:	d102      	bne.n	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800dfde:	4b78      	ldr	r3, [pc, #480]	; (800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800dfe0:	637b      	str	r3, [r7, #52]	; 0x34
 800dfe2:	e011      	b.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800dfe4:	4b74      	ldr	r3, [pc, #464]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800dfe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d106      	bne.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	2b05      	cmp	r3, #5
 800dff6:	d103      	bne.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800dff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dffc:	637b      	str	r3, [r7, #52]	; 0x34
 800dffe:	e003      	b.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800e000:	2300      	movs	r3, #0
 800e002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e004:	f001 bebd 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e008:	f001 bebb 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e00c:	4b6a      	ldr	r3, [pc, #424]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e00e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e016:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d104      	bne.n	800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e01e:	f7fc ff5b 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e022:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800e024:	f001 bead 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800e028:	4b63      	ldr	r3, [pc, #396]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e034:	d10a      	bne.n	800e04c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	2b08      	cmp	r3, #8
 800e03a:	d107      	bne.n	800e04c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e03c:	f107 0314 	add.w	r3, r7, #20
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff f87f 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
 800e04a:	e03d      	b.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	2b10      	cmp	r3, #16
 800e050:	d108      	bne.n	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e052:	f107 0308 	add.w	r3, r7, #8
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff f9de 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e060:	f001 be8f 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800e064:	4b54      	ldr	r3, [pc, #336]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 0302 	and.w	r3, r3, #2
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d10c      	bne.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800e070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e072:	2b18      	cmp	r3, #24
 800e074:	d109      	bne.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e076:	4b50      	ldr	r3, [pc, #320]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	08db      	lsrs	r3, r3, #3
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	4a4e      	ldr	r2, [pc, #312]	; (800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e082:	fa22 f303 	lsr.w	r3, r2, r3
 800e086:	637b      	str	r3, [r7, #52]	; 0x34
 800e088:	e01e      	b.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800e08a:	4b4b      	ldr	r3, [pc, #300]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e096:	d105      	bne.n	800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09a:	2b20      	cmp	r3, #32
 800e09c:	d102      	bne.n	800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800e09e:	4b48      	ldr	r3, [pc, #288]	; (800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800e0a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0a2:	e011      	b.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e0a4:	4b44      	ldr	r3, [pc, #272]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e0a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e0aa:	f003 0302 	and.w	r3, r3, #2
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d106      	bne.n	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	2b28      	cmp	r3, #40	; 0x28
 800e0b6:	d103      	bne.n	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800e0b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e0be:	e003      	b.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e0c4:	f001 be5d 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e0c8:	f001 be5b 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e0cc:	4b3a      	ldr	r3, [pc, #232]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e0ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e0d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e0d6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d104      	bne.n	800e0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e0de:	f7fc fefb 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e0e2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800e0e4:	f001 be4d 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800e0e8:	4b33      	ldr	r3, [pc, #204]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0f4:	d10a      	bne.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	2b40      	cmp	r3, #64	; 0x40
 800e0fa:	d107      	bne.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0fc:	f107 0314 	add.w	r3, r7, #20
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff f81f 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	637b      	str	r3, [r7, #52]	; 0x34
 800e10a:	e045      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800e10c:	4b2a      	ldr	r3, [pc, #168]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e118:	d10a      	bne.n	800e130 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	2b80      	cmp	r3, #128	; 0x80
 800e11e:	d107      	bne.n	800e130 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e120:	f107 0308 	add.w	r3, r7, #8
 800e124:	4618      	mov	r0, r3
 800e126:	f7ff f977 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	637b      	str	r3, [r7, #52]	; 0x34
 800e12e:	e033      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e130:	4b21      	ldr	r3, [pc, #132]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0302 	and.w	r3, r3, #2
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d10c      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	2bc0      	cmp	r3, #192	; 0xc0
 800e140:	d109      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e142:	4b1d      	ldr	r3, [pc, #116]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	08db      	lsrs	r3, r3, #3
 800e148:	f003 0303 	and.w	r3, r3, #3
 800e14c:	4a1b      	ldr	r2, [pc, #108]	; (800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e14e:	fa22 f303 	lsr.w	r3, r2, r3
 800e152:	637b      	str	r3, [r7, #52]	; 0x34
 800e154:	e020      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800e156:	4b18      	ldr	r3, [pc, #96]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e162:	d106      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e16a:	d102      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800e16c:	4b14      	ldr	r3, [pc, #80]	; (800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800e16e:	637b      	str	r3, [r7, #52]	; 0x34
 800e170:	e012      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e172:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e178:	f003 0302 	and.w	r3, r3, #2
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d107      	bne.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800e186:	d103      	bne.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800e188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e18c:	637b      	str	r3, [r7, #52]	; 0x34
 800e18e:	e003      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800e190:	2300      	movs	r3, #0
 800e192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e194:	f001 bdf5 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e198:	f001 bdf3 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e19c:	4b06      	ldr	r3, [pc, #24]	; (800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e19e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e1a2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e1a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10a      	bne.n	800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e1ae:	f7fc fe93 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e1b2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800e1b4:	f001 bde5 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e1b8:	44020c00 	.word	0x44020c00
 800e1bc:	03d09000 	.word	0x03d09000
 800e1c0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800e1c4:	4ba0      	ldr	r3, [pc, #640]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1d0:	d10b      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d8:	d107      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1da:	f107 0314 	add.w	r3, r7, #20
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe ffb0 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e1e8:	e047      	b.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800e1ea:	4b97      	ldr	r3, [pc, #604]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1f6:	d10b      	bne.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1fe:	d107      	bne.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e200:	f107 0308 	add.w	r3, r7, #8
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff f907 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	637b      	str	r3, [r7, #52]	; 0x34
 800e20e:	e034      	b.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e210:	4b8d      	ldr	r3, [pc, #564]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d10d      	bne.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800e21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e222:	d109      	bne.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e224:	4b88      	ldr	r3, [pc, #544]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	08db      	lsrs	r3, r3, #3
 800e22a:	f003 0303 	and.w	r3, r3, #3
 800e22e:	4a87      	ldr	r2, [pc, #540]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800e230:	fa22 f303 	lsr.w	r3, r2, r3
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
 800e236:	e020      	b.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800e238:	4b83      	ldr	r3, [pc, #524]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e244:	d106      	bne.n	800e254 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800e246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e24c:	d102      	bne.n	800e254 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800e24e:	4b80      	ldr	r3, [pc, #512]	; (800e450 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800e250:	637b      	str	r3, [r7, #52]	; 0x34
 800e252:	e012      	b.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e254:	4b7c      	ldr	r3, [pc, #496]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e25a:	f003 0302 	and.w	r3, r3, #2
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d107      	bne.n	800e272 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e268:	d103      	bne.n	800e272 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800e26a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e26e:	637b      	str	r3, [r7, #52]	; 0x34
 800e270:	e003      	b.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800e272:	2300      	movs	r3, #0
 800e274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e276:	f001 bd84 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e27a:	f001 bd82 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e27e:	4b72      	ldr	r3, [pc, #456]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e284:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e288:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d104      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e290:	f7fc fe22 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e294:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800e296:	f001 bd74 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800e29a:	4b6b      	ldr	r3, [pc, #428]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2a6:	d10b      	bne.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800e2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2ae:	d107      	bne.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2b0:	f107 0314 	add.w	r3, r7, #20
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe ff45 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e2be:	e047      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800e2c0:	4b61      	ldr	r3, [pc, #388]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2cc:	d10b      	bne.n	800e2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2d4:	d107      	bne.n	800e2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2d6:	f107 0308 	add.w	r3, r7, #8
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7ff f89c 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2e4:	e034      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e2e6:	4b58      	ldr	r3, [pc, #352]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f003 0302 	and.w	r3, r3, #2
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d10d      	bne.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e2f8:	d109      	bne.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e2fa:	4b53      	ldr	r3, [pc, #332]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	08db      	lsrs	r3, r3, #3
 800e300:	f003 0303 	and.w	r3, r3, #3
 800e304:	4a51      	ldr	r2, [pc, #324]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800e306:	fa22 f303 	lsr.w	r3, r2, r3
 800e30a:	637b      	str	r3, [r7, #52]	; 0x34
 800e30c:	e020      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800e30e:	4b4e      	ldr	r3, [pc, #312]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e31a:	d106      	bne.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e322:	d102      	bne.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800e324:	4b4a      	ldr	r3, [pc, #296]	; (800e450 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800e326:	637b      	str	r3, [r7, #52]	; 0x34
 800e328:	e012      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e32a:	4b47      	ldr	r3, [pc, #284]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e32c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e330:	f003 0302 	and.w	r3, r3, #2
 800e334:	2b02      	cmp	r3, #2
 800e336:	d107      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e33e:	d103      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800e340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e344:	637b      	str	r3, [r7, #52]	; 0x34
 800e346:	e003      	b.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800e348:	2300      	movs	r3, #0
 800e34a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e34c:	f001 bd19 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e350:	f001 bd17 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800e354:	4b3c      	ldr	r3, [pc, #240]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e35a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800e35e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800e360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e362:	2b00      	cmp	r3, #0
 800e364:	d104      	bne.n	800e370 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e366:	f7fc fdb7 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e36a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800e36c:	f001 bd09 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800e370:	4b35      	ldr	r3, [pc, #212]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e37c:	d10b      	bne.n	800e396 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e384:	d107      	bne.n	800e396 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e386:	f107 0314 	add.w	r3, r7, #20
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe feda 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	637b      	str	r3, [r7, #52]	; 0x34
 800e394:	e047      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800e396:	4b2c      	ldr	r3, [pc, #176]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3a2:	d10b      	bne.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3aa:	d107      	bne.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ac:	f107 0308 	add.w	r3, r7, #8
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff f831 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ba:	e034      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800e3bc:	4b22      	ldr	r3, [pc, #136]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f003 0302 	and.w	r3, r3, #2
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d10d      	bne.n	800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800e3ce:	d109      	bne.n	800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e3d0:	4b1d      	ldr	r3, [pc, #116]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	08db      	lsrs	r3, r3, #3
 800e3d6:	f003 0303 	and.w	r3, r3, #3
 800e3da:	4a1c      	ldr	r2, [pc, #112]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800e3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800e3e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e3e2:	e020      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800e3e4:	4b18      	ldr	r3, [pc, #96]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f0:	d106      	bne.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3f8:	d102      	bne.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800e3fa:	4b15      	ldr	r3, [pc, #84]	; (800e450 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800e3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e3fe:	e012      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800e400:	4b11      	ldr	r3, [pc, #68]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e406:	f003 0302 	and.w	r3, r3, #2
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d107      	bne.n	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800e414:	d103      	bne.n	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800e416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e41a:	637b      	str	r3, [r7, #52]	; 0x34
 800e41c:	e003      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800e41e:	2300      	movs	r3, #0
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e422:	f001 bcae 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e426:	f001 bcac 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800e42a:	4b07      	ldr	r3, [pc, #28]	; (800e448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800e42c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e430:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800e434:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10b      	bne.n	800e454 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e43c:	f7fc fd4c 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e440:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800e442:	f001 bc9e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e446:	bf00      	nop
 800e448:	44020c00 	.word	0x44020c00
 800e44c:	03d09000 	.word	0x03d09000
 800e450:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800e454:	4ba0      	ldr	r3, [pc, #640]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e45c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e460:	d10b      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e468:	d107      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e46a:	f107 0314 	add.w	r3, r7, #20
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe fe68 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	637b      	str	r3, [r7, #52]	; 0x34
 800e478:	e047      	b.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800e47a:	4b97      	ldr	r3, [pc, #604]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e486:	d10b      	bne.n	800e4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e48e:	d107      	bne.n	800e4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e490:	f107 0308 	add.w	r3, r7, #8
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe ffbf 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	637b      	str	r3, [r7, #52]	; 0x34
 800e49e:	e034      	b.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800e4a0:	4b8d      	ldr	r3, [pc, #564]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f003 0302 	and.w	r3, r3, #2
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d10d      	bne.n	800e4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e4b2:	d109      	bne.n	800e4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e4b4:	4b88      	ldr	r3, [pc, #544]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	08db      	lsrs	r3, r3, #3
 800e4ba:	f003 0303 	and.w	r3, r3, #3
 800e4be:	4a87      	ldr	r2, [pc, #540]	; (800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800e4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4c6:	e020      	b.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800e4c8:	4b83      	ldr	r3, [pc, #524]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4d4:	d106      	bne.n	800e4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4dc:	d102      	bne.n	800e4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800e4de:	4b80      	ldr	r3, [pc, #512]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800e4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4e2:	e012      	b.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800e4e4:	4b7c      	ldr	r3, [pc, #496]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e4e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e4ea:	f003 0302 	and.w	r3, r3, #2
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d107      	bne.n	800e502 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800e4f8:	d103      	bne.n	800e502 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800e4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800e500:	e003      	b.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e506:	f001 bc3c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e50a:	f001 bc3a 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800e50e:	4b72      	ldr	r3, [pc, #456]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e514:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e518:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d104      	bne.n	800e52a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e520:	f7fc fcda 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e524:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800e526:	f001 bc2c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800e52a:	4b6b      	ldr	r3, [pc, #428]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e536:	d10b      	bne.n	800e550 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e53e:	d107      	bne.n	800e550 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e540:	f107 0314 	add.w	r3, r7, #20
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe fdfd 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	637b      	str	r3, [r7, #52]	; 0x34
 800e54e:	e047      	b.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800e550:	4b61      	ldr	r3, [pc, #388]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e55c:	d10b      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e564:	d107      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e566:	f107 0308 	add.w	r3, r7, #8
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe ff54 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	637b      	str	r3, [r7, #52]	; 0x34
 800e574:	e034      	b.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800e576:	4b58      	ldr	r3, [pc, #352]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 0302 	and.w	r3, r3, #2
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d10d      	bne.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e584:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e588:	d109      	bne.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e58a:	4b53      	ldr	r3, [pc, #332]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	08db      	lsrs	r3, r3, #3
 800e590:	f003 0303 	and.w	r3, r3, #3
 800e594:	4a51      	ldr	r2, [pc, #324]	; (800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800e596:	fa22 f303 	lsr.w	r3, r2, r3
 800e59a:	637b      	str	r3, [r7, #52]	; 0x34
 800e59c:	e020      	b.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800e59e:	4b4e      	ldr	r3, [pc, #312]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5aa:	d106      	bne.n	800e5ba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e5b2:	d102      	bne.n	800e5ba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800e5b4:	4b4a      	ldr	r3, [pc, #296]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800e5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b8:	e012      	b.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800e5ba:	4b47      	ldr	r3, [pc, #284]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e5bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d107      	bne.n	800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e5ce:	d103      	bne.n	800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800e5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e5d6:	e003      	b.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e5dc:	f001 bbd1 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e5e0:	f001 bbcf 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800e5e4:	4b3c      	ldr	r3, [pc, #240]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e5e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e5ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e5ee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d104      	bne.n	800e600 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e5f6:	f7fc fc6f 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e5fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800e5fc:	f001 bbc1 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800e600:	4b35      	ldr	r3, [pc, #212]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e60c:	d10b      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e614:	d107      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e616:	f107 0314 	add.w	r3, r7, #20
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe fd92 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	637b      	str	r3, [r7, #52]	; 0x34
 800e624:	e047      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800e626:	4b2c      	ldr	r3, [pc, #176]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e632:	d10b      	bne.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e63a:	d107      	bne.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e63c:	f107 0308 	add.w	r3, r7, #8
 800e640:	4618      	mov	r0, r3
 800e642:	f7fe fee9 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	637b      	str	r3, [r7, #52]	; 0x34
 800e64a:	e034      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800e64c:	4b22      	ldr	r3, [pc, #136]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f003 0302 	and.w	r3, r3, #2
 800e654:	2b02      	cmp	r3, #2
 800e656:	d10d      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e65e:	d109      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e660:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	08db      	lsrs	r3, r3, #3
 800e666:	f003 0303 	and.w	r3, r3, #3
 800e66a:	4a1c      	ldr	r2, [pc, #112]	; (800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800e66c:	fa22 f303 	lsr.w	r3, r2, r3
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
 800e672:	e020      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800e674:	4b18      	ldr	r3, [pc, #96]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e680:	d106      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800e682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e688:	d102      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800e68a:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34
 800e68e:	e012      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800e690:	4b11      	ldr	r3, [pc, #68]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d107      	bne.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e6a4:	d103      	bne.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800e6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e6ac:	e003      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e6b2:	f001 bb66 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e6b6:	f001 bb64 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800e6ba:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800e6bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6c0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800e6c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10b      	bne.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e6cc:	f7fc fc04 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e6d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800e6d2:	f001 bb56 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e6d6:	bf00      	nop
 800e6d8:	44020c00 	.word	0x44020c00
 800e6dc:	03d09000 	.word	0x03d09000
 800e6e0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800e6e4:	4ba1      	ldr	r3, [pc, #644]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6f0:	d10b      	bne.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6f8:	d107      	bne.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6fa:	f107 0314 	add.w	r3, r7, #20
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe fd20 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	637b      	str	r3, [r7, #52]	; 0x34
 800e708:	e047      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800e70a:	4b98      	ldr	r3, [pc, #608]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e716:	d10b      	bne.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800e718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e71e:	d107      	bne.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e720:	f107 0308 	add.w	r3, r7, #8
 800e724:	4618      	mov	r0, r3
 800e726:	f7fe fe77 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	637b      	str	r3, [r7, #52]	; 0x34
 800e72e:	e034      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800e730:	4b8e      	ldr	r3, [pc, #568]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 0302 	and.w	r3, r3, #2
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d10d      	bne.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800e742:	d109      	bne.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e744:	4b89      	ldr	r3, [pc, #548]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	08db      	lsrs	r3, r3, #3
 800e74a:	f003 0303 	and.w	r3, r3, #3
 800e74e:	4a88      	ldr	r2, [pc, #544]	; (800e970 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800e750:	fa22 f303 	lsr.w	r3, r2, r3
 800e754:	637b      	str	r3, [r7, #52]	; 0x34
 800e756:	e020      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800e758:	4b84      	ldr	r3, [pc, #528]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e764:	d106      	bne.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e76c:	d102      	bne.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800e76e:	4b81      	ldr	r3, [pc, #516]	; (800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800e770:	637b      	str	r3, [r7, #52]	; 0x34
 800e772:	e012      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800e774:	4b7d      	ldr	r3, [pc, #500]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d107      	bne.n	800e792 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800e788:	d103      	bne.n	800e792 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800e78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e78e:	637b      	str	r3, [r7, #52]	; 0x34
 800e790:	e003      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e796:	f001 baf4 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e79a:	f001 baf2 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800e79e:	4b73      	ldr	r3, [pc, #460]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e7a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d104      	bne.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e7b0:	f7fc fb92 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e7b4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800e7b6:	f001 bae4 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800e7ba:	4b6c      	ldr	r3, [pc, #432]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7c6:	d10a      	bne.n	800e7de <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d107      	bne.n	800e7de <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ce:	f107 0314 	add.w	r3, r7, #20
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fe fcb6 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	637b      	str	r3, [r7, #52]	; 0x34
 800e7dc:	e043      	b.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800e7de:	4b63      	ldr	r3, [pc, #396]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7ea:	d10a      	bne.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d107      	bne.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7f2:	f107 0308 	add.w	r3, r7, #8
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe fe0e 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800e800:	e031      	b.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800e802:	4b5a      	ldr	r3, [pc, #360]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f003 0302 	and.w	r3, r3, #2
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d10c      	bne.n	800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	2b03      	cmp	r3, #3
 800e812:	d109      	bne.n	800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e814:	4b55      	ldr	r3, [pc, #340]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	4a54      	ldr	r2, [pc, #336]	; (800e970 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800e820:	fa22 f303 	lsr.w	r3, r2, r3
 800e824:	637b      	str	r3, [r7, #52]	; 0x34
 800e826:	e01e      	b.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800e828:	4b50      	ldr	r3, [pc, #320]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e834:	d105      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800e836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e838:	2b04      	cmp	r3, #4
 800e83a:	d102      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800e83c:	4b4d      	ldr	r3, [pc, #308]	; (800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800e83e:	637b      	str	r3, [r7, #52]	; 0x34
 800e840:	e011      	b.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800e842:	4b4a      	ldr	r3, [pc, #296]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e848:	f003 0302 	and.w	r3, r3, #2
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d106      	bne.n	800e85e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	2b05      	cmp	r3, #5
 800e854:	d103      	bne.n	800e85e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800e856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e85a:	637b      	str	r3, [r7, #52]	; 0x34
 800e85c:	e003      	b.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800e85e:	2300      	movs	r3, #0
 800e860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e862:	f001 ba8e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e866:	f001 ba8c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800e86a:	4b40      	ldr	r3, [pc, #256]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e86c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e870:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e874:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d104      	bne.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e87c:	f7fc fb2c 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800e880:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800e882:	f001 ba7e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800e886:	4b39      	ldr	r3, [pc, #228]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e88e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e892:	d10a      	bne.n	800e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	2b10      	cmp	r3, #16
 800e898:	d107      	bne.n	800e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e89a:	f107 0314 	add.w	r3, r7, #20
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe fc50 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a8:	e043      	b.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800e8aa:	4b30      	ldr	r3, [pc, #192]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e8b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8b6:	d10a      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	2b20      	cmp	r3, #32
 800e8bc:	d107      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8be:	f107 0308 	add.w	r3, r7, #8
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe fda8 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e8cc:	e031      	b.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800e8ce:	4b27      	ldr	r3, [pc, #156]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d10c      	bne.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8dc:	2b30      	cmp	r3, #48	; 0x30
 800e8de:	d109      	bne.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e8e0:	4b22      	ldr	r3, [pc, #136]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	08db      	lsrs	r3, r3, #3
 800e8e6:	f003 0303 	and.w	r3, r3, #3
 800e8ea:	4a21      	ldr	r2, [pc, #132]	; (800e970 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800e8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e8f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f2:	e01e      	b.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800e8f4:	4b1d      	ldr	r3, [pc, #116]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e900:	d105      	bne.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	2b40      	cmp	r3, #64	; 0x40
 800e906:	d102      	bne.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800e908:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800e90a:	637b      	str	r3, [r7, #52]	; 0x34
 800e90c:	e011      	b.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800e90e:	4b17      	ldr	r3, [pc, #92]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e914:	f003 0302 	and.w	r3, r3, #2
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d106      	bne.n	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800e91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91e:	2b50      	cmp	r3, #80	; 0x50
 800e920:	d103      	bne.n	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800e922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e926:	637b      	str	r3, [r7, #52]	; 0x34
 800e928:	e003      	b.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e92e:	f001 ba28 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e932:	f001 ba26 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e936:	4b0d      	ldr	r3, [pc, #52]	; (800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e93c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e940:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	2b00      	cmp	r3, #0
 800e946:	d104      	bne.n	800e952 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800e948:	f7fc faf2 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800e94c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800e94e:	f001 ba18 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e958:	d10e      	bne.n	800e978 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e95a:	f107 0314 	add.w	r3, r7, #20
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe fbf0 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e968:	f001 ba0b 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e96c:	44020c00 	.word	0x44020c00
 800e970:	03d09000 	.word	0x03d09000
 800e974:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e97e:	d108      	bne.n	800e992 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e980:	f107 0308 	add.w	r3, r7, #8
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fd47 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e98e:	f001 b9f8 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e992:	4ba4      	ldr	r3, [pc, #656]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 0302 	and.w	r3, r3, #2
 800e99a:	2b02      	cmp	r3, #2
 800e99c:	d10d      	bne.n	800e9ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e9a4:	d109      	bne.n	800e9ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e9a6:	4b9f      	ldr	r3, [pc, #636]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	08db      	lsrs	r3, r3, #3
 800e9ac:	f003 0303 	and.w	r3, r3, #3
 800e9b0:	4a9d      	ldr	r2, [pc, #628]	; (800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800e9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e9b8:	e020      	b.n	800e9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800e9ba:	4b9a      	ldr	r3, [pc, #616]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9c6:	d106      	bne.n	800e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9ce:	d102      	bne.n	800e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800e9d0:	4b96      	ldr	r3, [pc, #600]	; (800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800e9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800e9d4:	e012      	b.n	800e9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e9d6:	4b93      	ldr	r3, [pc, #588]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e9d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9dc:	f003 0302 	and.w	r3, r3, #2
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d107      	bne.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e9ea:	d103      	bne.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800e9ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9f2:	e003      	b.n	800e9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9f8:	f001 b9c3 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e9fc:	f001 b9c1 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ea00:	4b88      	ldr	r3, [pc, #544]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ea02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d104      	bne.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800ea12:	f7fc fa45 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800ea16:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800ea18:	f001 b9b3 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d104      	bne.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800ea22:	f7fc f911 	bl	800ac48 <HAL_RCC_GetSysClockFreq>
 800ea26:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ea28:	f001 b9ab 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d108      	bne.n	800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea32:	f107 0314 	add.w	r3, r7, #20
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fe fb84 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea40:	f001 b99f 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ea44:	4b77      	ldr	r3, [pc, #476]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea50:	d105      	bne.n	800ea5e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d102      	bne.n	800ea5e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800ea58:	4b75      	ldr	r3, [pc, #468]	; (800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800ea5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea5c:	e023      	b.n	800eaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ea5e:	4b71      	ldr	r3, [pc, #452]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f003 0302 	and.w	r3, r3, #2
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d10c      	bne.n	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	2b04      	cmp	r3, #4
 800ea6e:	d109      	bne.n	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ea70:	4b6c      	ldr	r3, [pc, #432]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	08db      	lsrs	r3, r3, #3
 800ea76:	f003 0303 	and.w	r3, r3, #3
 800ea7a:	4a6b      	ldr	r2, [pc, #428]	; (800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ea7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea80:	637b      	str	r3, [r7, #52]	; 0x34
 800ea82:	e010      	b.n	800eaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800ea84:	4b67      	ldr	r3, [pc, #412]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea90:	d105      	bne.n	800ea9e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	2b05      	cmp	r3, #5
 800ea96:	d102      	bne.n	800ea9e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800ea98:	4b64      	ldr	r3, [pc, #400]	; (800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ea9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea9c:	e003      	b.n	800eaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eaa2:	f001 b96e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eaa6:	f001 b96c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800eaaa:	4b5e      	ldr	r3, [pc, #376]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eaac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eab0:	f003 0308 	and.w	r3, r3, #8
 800eab4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800eab6:	4b5b      	ldr	r3, [pc, #364]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eabc:	f003 0302 	and.w	r3, r3, #2
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d106      	bne.n	800ead2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800eaca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eace:	637b      	str	r3, [r7, #52]	; 0x34
 800ead0:	e012      	b.n	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800ead2:	4b54      	ldr	r3, [pc, #336]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ead4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ead8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eadc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eae0:	d106      	bne.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	2b08      	cmp	r3, #8
 800eae6:	d103      	bne.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800eae8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eaec:	637b      	str	r3, [r7, #52]	; 0x34
 800eaee:	e003      	b.n	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800eaf4:	f001 b945 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eaf8:	f001 b943 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800eafc:	4b49      	ldr	r3, [pc, #292]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eafe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eb02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eb06:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d104      	bne.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800eb0e:	f7fc f9e3 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800eb12:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800eb14:	f001 b935 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800eb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb1e:	d108      	bne.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb20:	f107 0308 	add.w	r3, r7, #8
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fe fc77 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb2e:	f001 b928 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800eb32:	4b3c      	ldr	r3, [pc, #240]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f003 0302 	and.w	r3, r3, #2
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d10d      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb44:	d109      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eb46:	4b37      	ldr	r3, [pc, #220]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	08db      	lsrs	r3, r3, #3
 800eb4c:	f003 0303 	and.w	r3, r3, #3
 800eb50:	4a35      	ldr	r2, [pc, #212]	; (800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800eb52:	fa22 f303 	lsr.w	r3, r2, r3
 800eb56:	637b      	str	r3, [r7, #52]	; 0x34
 800eb58:	e011      	b.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800eb5a:	4b32      	ldr	r3, [pc, #200]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb66:	d106      	bne.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb6e:	d102      	bne.n	800eb76 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800eb70:	4b2e      	ldr	r3, [pc, #184]	; (800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800eb72:	637b      	str	r3, [r7, #52]	; 0x34
 800eb74:	e003      	b.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800eb76:	2300      	movs	r3, #0
 800eb78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb7a:	f001 b902 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eb7e:	f001 b900 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800eb82:	4b28      	ldr	r3, [pc, #160]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800eb84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eb88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800eb8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d104      	bne.n	800eb9e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800eb94:	f7fc f9a0 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800eb98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800eb9a:	f001 b8f2 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eba4:	d108      	bne.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eba6:	f107 0308 	add.w	r3, r7, #8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fe fc34 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebb4:	f001 b8e5 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ebb8:	4b1a      	ldr	r3, [pc, #104]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f003 0302 	and.w	r3, r3, #2
 800ebc0:	2b02      	cmp	r3, #2
 800ebc2:	d10d      	bne.n	800ebe0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800ebc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ebca:	d109      	bne.n	800ebe0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ebcc:	4b15      	ldr	r3, [pc, #84]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	08db      	lsrs	r3, r3, #3
 800ebd2:	f003 0303 	and.w	r3, r3, #3
 800ebd6:	4a14      	ldr	r2, [pc, #80]	; (800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ebd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ebdc:	637b      	str	r3, [r7, #52]	; 0x34
 800ebde:	e011      	b.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800ebe0:	4b10      	ldr	r3, [pc, #64]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebec:	d106      	bne.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ebf4:	d102      	bne.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800ebf6:	4b0d      	ldr	r3, [pc, #52]	; (800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ebf8:	637b      	str	r3, [r7, #52]	; 0x34
 800ebfa:	e003      	b.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec00:	f001 b8bf 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ec04:	f001 b8bd 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ec08:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ec0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ec0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ec12:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d10c      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ec1a:	f7fc f989 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800ec1e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800ec20:	f001 b8af 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ec24:	44020c00 	.word	0x44020c00
 800ec28:	03d09000 	.word	0x03d09000
 800ec2c:	003d0900 	.word	0x003d0900
 800ec30:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec3a:	d108      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec3c:	f107 0308 	add.w	r3, r7, #8
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fbe9 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec4a:	f001 b89a 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800ec4e:	4b9f      	ldr	r3, [pc, #636]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f003 0302 	and.w	r3, r3, #2
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d10d      	bne.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec60:	d109      	bne.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ec62:	4b9a      	ldr	r3, [pc, #616]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	08db      	lsrs	r3, r3, #3
 800ec68:	f003 0303 	and.w	r3, r3, #3
 800ec6c:	4a98      	ldr	r2, [pc, #608]	; (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ec6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec72:	637b      	str	r3, [r7, #52]	; 0x34
 800ec74:	e011      	b.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800ec76:	4b95      	ldr	r3, [pc, #596]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec82:	d106      	bne.n	800ec92 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec8a:	d102      	bne.n	800ec92 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800ec8c:	4b91      	ldr	r3, [pc, #580]	; (800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ec8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec90:	e003      	b.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec96:	f001 b874 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ec9a:	f001 b872 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ec9e:	4b8b      	ldr	r3, [pc, #556]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800eca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eca4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800eca8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d104      	bne.n	800ecba <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ecb0:	f7fc f93e 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800ecb4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800ecb6:	f001 b864 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecc0:	d108      	bne.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecc2:	f107 0308 	add.w	r3, r7, #8
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe fba6 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecd0:	f001 b857 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ecd4:	4b7d      	ldr	r3, [pc, #500]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f003 0302 	and.w	r3, r3, #2
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d10d      	bne.n	800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ece6:	d109      	bne.n	800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ece8:	4b78      	ldr	r3, [pc, #480]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	08db      	lsrs	r3, r3, #3
 800ecee:	f003 0303 	and.w	r3, r3, #3
 800ecf2:	4a77      	ldr	r2, [pc, #476]	; (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ecf4:	fa22 f303 	lsr.w	r3, r2, r3
 800ecf8:	637b      	str	r3, [r7, #52]	; 0x34
 800ecfa:	e011      	b.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800ecfc:	4b73      	ldr	r3, [pc, #460]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed08:	d106      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ed10:	d102      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800ed12:	4b70      	ldr	r3, [pc, #448]	; (800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ed14:	637b      	str	r3, [r7, #52]	; 0x34
 800ed16:	e003      	b.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed1c:	f001 b831 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ed20:	f001 b82f 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800ed24:	4b69      	ldr	r3, [pc, #420]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ed26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ed2a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ed2e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d104      	bne.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ed36:	f7fc f8cf 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800ed3a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ed3c:	f001 b821 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ed46:	d108      	bne.n	800ed5a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed48:	f107 0308 	add.w	r3, r7, #8
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fe fb63 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed56:	f001 b814 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800ed5a:	4b5c      	ldr	r3, [pc, #368]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d10e      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed6c:	d10a      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ed6e:	4b57      	ldr	r3, [pc, #348]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	08db      	lsrs	r3, r3, #3
 800ed74:	f003 0303 	and.w	r3, r3, #3
 800ed78:	4a55      	ldr	r2, [pc, #340]	; (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ed7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed80:	f000 bfff 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ed84:	2300      	movs	r3, #0
 800ed86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed88:	f000 bffb 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ed8c:	4b4f      	ldr	r3, [pc, #316]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ed8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ed92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed96:	633b      	str	r3, [r7, #48]	; 0x30
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ed9e:	d056      	beq.n	800ee4e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800eda6:	f200 808b 	bhi.w	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edb0:	d03e      	beq.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edb8:	f200 8082 	bhi.w	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edc2:	d027      	beq.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800edc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edca:	d879      	bhi.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edd2:	d017      	beq.n	800ee04 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edda:	d871      	bhi.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ede8:	d004      	beq.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800edea:	e069      	b.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800edec:	f7fc f8a0 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800edf0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800edf2:	e068      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edf4:	f107 0314 	add.w	r3, r7, #20
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe f9a3 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ee02:	e060      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee04:	f107 0308 	add.w	r3, r7, #8
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fe fb05 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ee12:	e058      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ee14:	4b2d      	ldr	r3, [pc, #180]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee1a:	f003 0302 	and.w	r3, r3, #2
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	d103      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800ee22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee26:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ee28:	e04d      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ee2e:	e04a      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ee30:	4b26      	ldr	r3, [pc, #152]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee3e:	d103      	bne.n	800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800ee40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ee44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ee46:	e03e      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ee4c:	e03b      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee4e:	4b1f      	ldr	r3, [pc, #124]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee54:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ee58:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee5a:	4b1c      	ldr	r3, [pc, #112]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f003 0302 	and.w	r3, r3, #2
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d10c      	bne.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d109      	bne.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ee6c:	4b17      	ldr	r3, [pc, #92]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	08db      	lsrs	r3, r3, #3
 800ee72:	f003 0303 	and.w	r3, r3, #3
 800ee76:	4a16      	ldr	r2, [pc, #88]	; (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ee78:	fa22 f303 	lsr.w	r3, r2, r3
 800ee7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee7e:	e01e      	b.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ee80:	4b12      	ldr	r3, [pc, #72]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee8c:	d106      	bne.n	800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee94:	d102      	bne.n	800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ee96:	4b0f      	ldr	r3, [pc, #60]	; (800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ee98:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9a:	e010      	b.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ee9c:	4b0b      	ldr	r3, [pc, #44]	; (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eea8:	d106      	bne.n	800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeb0:	d102      	bne.n	800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800eeb2:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800eeb4:	637b      	str	r3, [r7, #52]	; 0x34
 800eeb6:	e002      	b.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800eebc:	e003      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800eebe:	e002      	b.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800eec0:	2300      	movs	r3, #0
 800eec2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800eec4:	bf00      	nop
          }
        }
        break;
 800eec6:	f000 bf5c 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eeca:	bf00      	nop
 800eecc:	44020c00 	.word	0x44020c00
 800eed0:	03d09000 	.word	0x03d09000
 800eed4:	003d0900 	.word	0x003d0900
 800eed8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800eedc:	4b9e      	ldr	r3, [pc, #632]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800eede:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800eee2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800eee6:	633b      	str	r3, [r7, #48]	; 0x30
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800eeee:	d056      	beq.n	800ef9e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800eef6:	f200 808b 	bhi.w	800f010 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef00:	d03e      	beq.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef08:	f200 8082 	bhi.w	800f010 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef12:	d027      	beq.n	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef1a:	d879      	bhi.n	800f010 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef22:	d017      	beq.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef2a:	d871      	bhi.n	800f010 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d004      	beq.n	800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef38:	d004      	beq.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800ef3a:	e069      	b.n	800f010 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800ef3c:	f7fb ffcc 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800ef40:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800ef42:	e068      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef44:	f107 0314 	add.w	r3, r7, #20
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fe f8fb 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ef52:	e060      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef54:	f107 0308 	add.w	r3, r7, #8
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fe fa5d 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ef62:	e058      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ef64:	4b7c      	ldr	r3, [pc, #496]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ef66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef6a:	f003 0302 	and.w	r3, r3, #2
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d103      	bne.n	800ef7a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800ef72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef76:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ef78:	e04d      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ef7e:	e04a      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ef80:	4b75      	ldr	r3, [pc, #468]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ef82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef8e:	d103      	bne.n	800ef98 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800ef90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ef94:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ef96:	e03e      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ef9c:	e03b      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef9e:	4b6e      	ldr	r3, [pc, #440]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800efa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800efa4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800efa8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efaa:	4b6b      	ldr	r3, [pc, #428]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f003 0302 	and.w	r3, r3, #2
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d10c      	bne.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d109      	bne.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800efbc:	4b66      	ldr	r3, [pc, #408]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	08db      	lsrs	r3, r3, #3
 800efc2:	f003 0303 	and.w	r3, r3, #3
 800efc6:	4a65      	ldr	r2, [pc, #404]	; (800f15c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800efc8:	fa22 f303 	lsr.w	r3, r2, r3
 800efcc:	637b      	str	r3, [r7, #52]	; 0x34
 800efce:	e01e      	b.n	800f00e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efd0:	4b61      	ldr	r3, [pc, #388]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800efd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efdc:	d106      	bne.n	800efec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe4:	d102      	bne.n	800efec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800efe6:	4b5e      	ldr	r3, [pc, #376]	; (800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800efe8:	637b      	str	r3, [r7, #52]	; 0x34
 800efea:	e010      	b.n	800f00e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800efec:	4b5a      	ldr	r3, [pc, #360]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eff8:	d106      	bne.n	800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f000:	d102      	bne.n	800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f002:	4b58      	ldr	r3, [pc, #352]	; (800f164 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800f004:	637b      	str	r3, [r7, #52]	; 0x34
 800f006:	e002      	b.n	800f00e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f008:	2300      	movs	r3, #0
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f00c:	e003      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800f00e:	e002      	b.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800f010:	2300      	movs	r3, #0
 800f012:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f014:	bf00      	nop
          }
        }
        break;
 800f016:	f000 beb4 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800f01a:	4b4f      	ldr	r3, [pc, #316]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f01c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f020:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f024:	633b      	str	r3, [r7, #48]	; 0x30
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f02c:	d056      	beq.n	800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f034:	f200 808b 	bhi.w	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f03e:	d03e      	beq.n	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f046:	f200 8082 	bhi.w	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f050:	d027      	beq.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f058:	d879      	bhi.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f060:	d017      	beq.n	800f092 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800f062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f068:	d871      	bhi.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d004      	beq.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800f070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f076:	d004      	beq.n	800f082 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800f078:	e069      	b.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800f07a:	f7fb ff59 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800f07e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800f080:	e068      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f082:	f107 0314 	add.w	r3, r7, #20
 800f086:	4618      	mov	r0, r3
 800f088:	f7fe f85c 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f090:	e060      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f092:	f107 0308 	add.w	r3, r7, #8
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe f9be 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f0a0:	e058      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800f0a2:	4b2d      	ldr	r3, [pc, #180]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f0a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f0a8:	f003 0302 	and.w	r3, r3, #2
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d103      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800f0b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f0b6:	e04d      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f0bc:	e04a      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800f0be:	4b26      	ldr	r3, [pc, #152]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f0c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0cc:	d103      	bne.n	800f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800f0ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f0d2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f0d4:	e03e      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f0da:	e03b      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f0dc:	4b1e      	ldr	r3, [pc, #120]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f0de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f0e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f0e8:	4b1b      	ldr	r3, [pc, #108]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 0302 	and.w	r3, r3, #2
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	d10c      	bne.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d109      	bne.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f0fa:	4b17      	ldr	r3, [pc, #92]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	08db      	lsrs	r3, r3, #3
 800f100:	f003 0303 	and.w	r3, r3, #3
 800f104:	4a15      	ldr	r2, [pc, #84]	; (800f15c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800f106:	fa22 f303 	lsr.w	r3, r2, r3
 800f10a:	637b      	str	r3, [r7, #52]	; 0x34
 800f10c:	e01e      	b.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f10e:	4b12      	ldr	r3, [pc, #72]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f11a:	d106      	bne.n	800f12a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f122:	d102      	bne.n	800f12a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f124:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800f126:	637b      	str	r3, [r7, #52]	; 0x34
 800f128:	e010      	b.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f12a:	4b0b      	ldr	r3, [pc, #44]	; (800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f136:	d106      	bne.n	800f146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f13e:	d102      	bne.n	800f146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800f142:	637b      	str	r3, [r7, #52]	; 0x34
 800f144:	e002      	b.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f146:	2300      	movs	r3, #0
 800f148:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f14a:	e003      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800f14c:	e002      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800f14e:	2300      	movs	r3, #0
 800f150:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f152:	bf00      	nop
          }
        }
        break;
 800f154:	f000 be15 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f158:	44020c00 	.word	0x44020c00
 800f15c:	03d09000 	.word	0x03d09000
 800f160:	003d0900 	.word	0x003d0900
 800f164:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800f168:	4b9e      	ldr	r3, [pc, #632]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f16a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f16e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800f172:	633b      	str	r3, [r7, #48]	; 0x30
 800f174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f176:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800f17a:	d056      	beq.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800f17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800f182:	f200 808b 	bhi.w	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f18c:	d03e      	beq.n	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f194:	f200 8082 	bhi.w	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f19e:	d027      	beq.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f1a6:	d879      	bhi.n	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1ae:	d017      	beq.n	800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1b6:	d871      	bhi.n	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d004      	beq.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1c4:	d004      	beq.n	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800f1c6:	e069      	b.n	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800f1c8:	f7fb feb2 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800f1cc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800f1ce:	e068      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1d0:	f107 0314 	add.w	r3, r7, #20
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fd ffb5 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f1de:	e060      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1e0:	f107 0308 	add.w	r3, r7, #8
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fe f917 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f1ee:	e058      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800f1f0:	4b7c      	ldr	r3, [pc, #496]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f1f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f1f6:	f003 0302 	and.w	r3, r3, #2
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d103      	bne.n	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800f1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f202:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f204:	e04d      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f20a:	e04a      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800f20c:	4b75      	ldr	r3, [pc, #468]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f20e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f21a:	d103      	bne.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800f21c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f222:	e03e      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f228:	e03b      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f22a:	4b6e      	ldr	r3, [pc, #440]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f22c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f230:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f236:	4b6b      	ldr	r3, [pc, #428]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f003 0302 	and.w	r3, r3, #2
 800f23e:	2b02      	cmp	r3, #2
 800f240:	d10c      	bne.n	800f25c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800f242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f244:	2b00      	cmp	r3, #0
 800f246:	d109      	bne.n	800f25c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f248:	4b66      	ldr	r3, [pc, #408]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	08db      	lsrs	r3, r3, #3
 800f24e:	f003 0303 	and.w	r3, r3, #3
 800f252:	4a65      	ldr	r2, [pc, #404]	; (800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800f254:	fa22 f303 	lsr.w	r3, r2, r3
 800f258:	637b      	str	r3, [r7, #52]	; 0x34
 800f25a:	e01e      	b.n	800f29a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f25c:	4b61      	ldr	r3, [pc, #388]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f268:	d106      	bne.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f270:	d102      	bne.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f272:	4b5e      	ldr	r3, [pc, #376]	; (800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800f274:	637b      	str	r3, [r7, #52]	; 0x34
 800f276:	e010      	b.n	800f29a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f278:	4b5a      	ldr	r3, [pc, #360]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f284:	d106      	bne.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f28c:	d102      	bne.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f28e:	4b58      	ldr	r3, [pc, #352]	; (800f3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800f290:	637b      	str	r3, [r7, #52]	; 0x34
 800f292:	e002      	b.n	800f29a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f298:	e003      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800f29a:	e002      	b.n	800f2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800f29c:	2300      	movs	r3, #0
 800f29e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f2a0:	bf00      	nop
          }
        }
        break;
 800f2a2:	f000 bd6e 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800f2a6:	4b4f      	ldr	r3, [pc, #316]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f2a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f2ac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f2b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f2b8:	d056      	beq.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f2c0:	f200 808b 	bhi.w	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800f2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f2ca:	d03e      	beq.n	800f34a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f2d2:	f200 8082 	bhi.w	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f2dc:	d027      	beq.n	800f32e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f2e4:	d879      	bhi.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2ec:	d017      	beq.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2f4:	d871      	bhi.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d004      	beq.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800f2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f302:	d004      	beq.n	800f30e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800f304:	e069      	b.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800f306:	f7fb fe13 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800f30a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800f30c:	e068      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f30e:	f107 0314 	add.w	r3, r7, #20
 800f312:	4618      	mov	r0, r3
 800f314:	f7fd ff16 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f31c:	e060      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31e:	f107 0308 	add.w	r3, r7, #8
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe f878 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f32c:	e058      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800f32e:	4b2d      	ldr	r3, [pc, #180]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f334:	f003 0302 	and.w	r3, r3, #2
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d103      	bne.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800f33c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f340:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f342:	e04d      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f348:	e04a      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800f34a:	4b26      	ldr	r3, [pc, #152]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f34c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f358:	d103      	bne.n	800f362 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800f35a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f35e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f360:	e03e      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f366:	e03b      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f368:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f36a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f36e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f374:	4b1b      	ldr	r3, [pc, #108]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 0302 	and.w	r3, r3, #2
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d10c      	bne.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	2b00      	cmp	r3, #0
 800f384:	d109      	bne.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f386:	4b17      	ldr	r3, [pc, #92]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	08db      	lsrs	r3, r3, #3
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	4a15      	ldr	r2, [pc, #84]	; (800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800f392:	fa22 f303 	lsr.w	r3, r2, r3
 800f396:	637b      	str	r3, [r7, #52]	; 0x34
 800f398:	e01e      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f39a:	4b12      	ldr	r3, [pc, #72]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f3a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3a6:	d106      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3ae:	d102      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f3b0:	4b0e      	ldr	r3, [pc, #56]	; (800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800f3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800f3b4:	e010      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3b6:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f3c2:	d106      	bne.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3ca:	d102      	bne.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f3cc:	4b08      	ldr	r3, [pc, #32]	; (800f3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800f3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f3d0:	e002      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f3d6:	e003      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800f3d8:	e002      	b.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f3de:	bf00      	nop
          }
        }
        break;
 800f3e0:	f000 bccf 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f3e4:	44020c00 	.word	0x44020c00
 800f3e8:	03d09000 	.word	0x03d09000
 800f3ec:	003d0900 	.word	0x003d0900
 800f3f0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800f3f4:	4b9e      	ldr	r3, [pc, #632]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f3f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f3fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f3fe:	633b      	str	r3, [r7, #48]	; 0x30
 800f400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f406:	d056      	beq.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800f408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f40e:	f200 808b 	bhi.w	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f418:	d03e      	beq.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f420:	f200 8082 	bhi.w	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800f424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f42a:	d027      	beq.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f432:	d879      	bhi.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f43a:	d017      	beq.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800f43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f442:	d871      	bhi.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	2b00      	cmp	r3, #0
 800f448:	d004      	beq.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f450:	d004      	beq.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800f452:	e069      	b.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800f454:	f7fb fd6c 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800f458:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800f45a:	e068      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f45c:	f107 0314 	add.w	r3, r7, #20
 800f460:	4618      	mov	r0, r3
 800f462:	f7fd fe6f 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f46a:	e060      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f46c:	f107 0308 	add.w	r3, r7, #8
 800f470:	4618      	mov	r0, r3
 800f472:	f7fd ffd1 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f47a:	e058      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800f47c:	4b7c      	ldr	r3, [pc, #496]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f47e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f482:	f003 0302 	and.w	r3, r3, #2
 800f486:	2b02      	cmp	r3, #2
 800f488:	d103      	bne.n	800f492 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800f48a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f48e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f490:	e04d      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f496:	e04a      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800f498:	4b75      	ldr	r3, [pc, #468]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f49a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f49e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4a6:	d103      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800f4a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f4ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800f4ae:	e03e      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f4b4:	e03b      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4b6:	4b6e      	ldr	r3, [pc, #440]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f4b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f4bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f4c0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4c2:	4b6b      	ldr	r3, [pc, #428]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f003 0302 	and.w	r3, r3, #2
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d10c      	bne.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d109      	bne.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f4d4:	4b66      	ldr	r3, [pc, #408]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	08db      	lsrs	r3, r3, #3
 800f4da:	f003 0303 	and.w	r3, r3, #3
 800f4de:	4a65      	ldr	r2, [pc, #404]	; (800f674 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800f4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4e6:	e01e      	b.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4e8:	4b61      	ldr	r3, [pc, #388]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f4:	d106      	bne.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800f4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4fc:	d102      	bne.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f4fe:	4b5e      	ldr	r3, [pc, #376]	; (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800f500:	637b      	str	r3, [r7, #52]	; 0x34
 800f502:	e010      	b.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f504:	4b5a      	ldr	r3, [pc, #360]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f510:	d106      	bne.n	800f520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800f512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f518:	d102      	bne.n	800f520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f51a:	4b58      	ldr	r3, [pc, #352]	; (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800f51c:	637b      	str	r3, [r7, #52]	; 0x34
 800f51e:	e002      	b.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f520:	2300      	movs	r3, #0
 800f522:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f524:	e003      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800f526:	e002      	b.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800f528:	2300      	movs	r3, #0
 800f52a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f52c:	bf00      	nop
          }
        }
        break;
 800f52e:	f000 bc28 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f532:	4b4f      	ldr	r3, [pc, #316]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f53c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800f53e:	4b4c      	ldr	r3, [pc, #304]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f54a:	d106      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d103      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800f552:	4b4a      	ldr	r3, [pc, #296]	; (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800f554:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800f556:	f000 bc14 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f560:	d108      	bne.n	800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f562:	f107 0320 	add.w	r3, r7, #32
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd fc82 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f570:	f000 bc07 	b.w	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f57a:	d107      	bne.n	800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f57c:	f107 0314 	add.w	r3, r7, #20
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd fddf 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f58a:	e3fa      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f590:	e3f7      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f592:	4b37      	ldr	r3, [pc, #220]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f598:	f003 0307 	and.w	r3, r3, #7
 800f59c:	633b      	str	r3, [r7, #48]	; 0x30
 800f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a0:	2b04      	cmp	r3, #4
 800f5a2:	d861      	bhi.n	800f668 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800f5a4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800f5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5aa:	bf00      	nop
 800f5ac:	0800f5c1 	.word	0x0800f5c1
 800f5b0:	0800f5d1 	.word	0x0800f5d1
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	0800f5f1 	.word	0x0800f5f1
 800f5bc:	0800f5f7 	.word	0x0800f5f7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5c0:	f107 0320 	add.w	r3, r7, #32
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fd fc53 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f5ce:	e04e      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5d0:	f107 0314 	add.w	r3, r7, #20
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fd fdb5 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f5de:	e046      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5e0:	f107 0308 	add.w	r3, r7, #8
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd ff17 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f5ee:	e03e      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f5f0:	4b23      	ldr	r3, [pc, #140]	; (800f680 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800f5f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f5f4:	e03b      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f5f6:	4b1e      	ldr	r3, [pc, #120]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f5f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f5fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f600:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f602:	4b1b      	ldr	r3, [pc, #108]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f003 0302 	and.w	r3, r3, #2
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d10c      	bne.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f610:	2b00      	cmp	r3, #0
 800f612:	d109      	bne.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f614:	4b16      	ldr	r3, [pc, #88]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	08db      	lsrs	r3, r3, #3
 800f61a:	f003 0303 	and.w	r3, r3, #3
 800f61e:	4a15      	ldr	r2, [pc, #84]	; (800f674 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800f620:	fa22 f303 	lsr.w	r3, r2, r3
 800f624:	637b      	str	r3, [r7, #52]	; 0x34
 800f626:	e01e      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f628:	4b11      	ldr	r3, [pc, #68]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f634:	d106      	bne.n	800f644 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800f636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f63c:	d102      	bne.n	800f644 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f63e:	4b0e      	ldr	r3, [pc, #56]	; (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800f640:	637b      	str	r3, [r7, #52]	; 0x34
 800f642:	e010      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f644:	4b0a      	ldr	r3, [pc, #40]	; (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f64c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f650:	d106      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f658:	d102      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f65a:	4b08      	ldr	r3, [pc, #32]	; (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800f65c:	637b      	str	r3, [r7, #52]	; 0x34
 800f65e:	e002      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f664:	e003      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800f666:	e002      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800f668:	2300      	movs	r3, #0
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f66c:	bf00      	nop
          }
        }
        break;
 800f66e:	e388      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f670:	44020c00 	.word	0x44020c00
 800f674:	03d09000 	.word	0x03d09000
 800f678:	003d0900 	.word	0x003d0900
 800f67c:	007a1200 	.word	0x007a1200
 800f680:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f684:	4ba9      	ldr	r3, [pc, #676]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f68e:	633b      	str	r3, [r7, #48]	; 0x30
 800f690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f692:	2b20      	cmp	r3, #32
 800f694:	f200 809a 	bhi.w	800f7cc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800f698:	a201      	add	r2, pc, #4	; (adr r2, 800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800f69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69e:	bf00      	nop
 800f6a0:	0800f725 	.word	0x0800f725
 800f6a4:	0800f7cd 	.word	0x0800f7cd
 800f6a8:	0800f7cd 	.word	0x0800f7cd
 800f6ac:	0800f7cd 	.word	0x0800f7cd
 800f6b0:	0800f7cd 	.word	0x0800f7cd
 800f6b4:	0800f7cd 	.word	0x0800f7cd
 800f6b8:	0800f7cd 	.word	0x0800f7cd
 800f6bc:	0800f7cd 	.word	0x0800f7cd
 800f6c0:	0800f735 	.word	0x0800f735
 800f6c4:	0800f7cd 	.word	0x0800f7cd
 800f6c8:	0800f7cd 	.word	0x0800f7cd
 800f6cc:	0800f7cd 	.word	0x0800f7cd
 800f6d0:	0800f7cd 	.word	0x0800f7cd
 800f6d4:	0800f7cd 	.word	0x0800f7cd
 800f6d8:	0800f7cd 	.word	0x0800f7cd
 800f6dc:	0800f7cd 	.word	0x0800f7cd
 800f6e0:	0800f745 	.word	0x0800f745
 800f6e4:	0800f7cd 	.word	0x0800f7cd
 800f6e8:	0800f7cd 	.word	0x0800f7cd
 800f6ec:	0800f7cd 	.word	0x0800f7cd
 800f6f0:	0800f7cd 	.word	0x0800f7cd
 800f6f4:	0800f7cd 	.word	0x0800f7cd
 800f6f8:	0800f7cd 	.word	0x0800f7cd
 800f6fc:	0800f7cd 	.word	0x0800f7cd
 800f700:	0800f755 	.word	0x0800f755
 800f704:	0800f7cd 	.word	0x0800f7cd
 800f708:	0800f7cd 	.word	0x0800f7cd
 800f70c:	0800f7cd 	.word	0x0800f7cd
 800f710:	0800f7cd 	.word	0x0800f7cd
 800f714:	0800f7cd 	.word	0x0800f7cd
 800f718:	0800f7cd 	.word	0x0800f7cd
 800f71c:	0800f7cd 	.word	0x0800f7cd
 800f720:	0800f75b 	.word	0x0800f75b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f724:	f107 0320 	add.w	r3, r7, #32
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fd fba1 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f732:	e04e      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f734:	f107 0314 	add.w	r3, r7, #20
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fd fd03 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f742:	e046      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd fe65 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f752:	e03e      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f754:	4b76      	ldr	r3, [pc, #472]	; (800f930 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800f756:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f758:	e03b      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f75a:	4b74      	ldr	r3, [pc, #464]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f75c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f760:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f764:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f766:	4b71      	ldr	r3, [pc, #452]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d10c      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800f772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f774:	2b00      	cmp	r3, #0
 800f776:	d109      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f778:	4b6c      	ldr	r3, [pc, #432]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	08db      	lsrs	r3, r3, #3
 800f77e:	f003 0303 	and.w	r3, r3, #3
 800f782:	4a6c      	ldr	r2, [pc, #432]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800f784:	fa22 f303 	lsr.w	r3, r2, r3
 800f788:	637b      	str	r3, [r7, #52]	; 0x34
 800f78a:	e01e      	b.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f78c:	4b67      	ldr	r3, [pc, #412]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f798:	d106      	bne.n	800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7a0:	d102      	bne.n	800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f7a2:	4b65      	ldr	r3, [pc, #404]	; (800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f7a6:	e010      	b.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7a8:	4b60      	ldr	r3, [pc, #384]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7b4:	d106      	bne.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7bc:	d102      	bne.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f7be:	4b5f      	ldr	r3, [pc, #380]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800f7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7c2:	e002      	b.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f7c8:	e003      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800f7ca:	e002      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f7d0:	bf00      	nop
          }
        }
        break;
 800f7d2:	e2d6      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f7d4:	4b55      	ldr	r3, [pc, #340]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f7d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f7de:	633b      	str	r3, [r7, #48]	; 0x30
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e6:	d031      	beq.n	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7ee:	d866      	bhi.n	800f8be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f2:	2bc0      	cmp	r3, #192	; 0xc0
 800f7f4:	d027      	beq.n	800f846 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	2bc0      	cmp	r3, #192	; 0xc0
 800f7fa:	d860      	bhi.n	800f8be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	2b80      	cmp	r3, #128	; 0x80
 800f800:	d019      	beq.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f804:	2b80      	cmp	r3, #128	; 0x80
 800f806:	d85a      	bhi.n	800f8be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d003      	beq.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	2b40      	cmp	r3, #64	; 0x40
 800f812:	d008      	beq.n	800f826 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800f814:	e053      	b.n	800f8be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f816:	f107 0320 	add.w	r3, r7, #32
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fd fb28 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f822:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f824:	e04e      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f826:	f107 0314 	add.w	r3, r7, #20
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fd fc8a 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f834:	e046      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f836:	f107 0308 	add.w	r3, r7, #8
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fd fdec 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f844:	e03e      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f846:	4b3a      	ldr	r3, [pc, #232]	; (800f930 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800f848:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f84a:	e03b      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f84c:	4b37      	ldr	r3, [pc, #220]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f84e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f852:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f856:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f858:	4b34      	ldr	r3, [pc, #208]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f003 0302 	and.w	r3, r3, #2
 800f860:	2b02      	cmp	r3, #2
 800f862:	d10c      	bne.n	800f87e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	2b00      	cmp	r3, #0
 800f868:	d109      	bne.n	800f87e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f86a:	4b30      	ldr	r3, [pc, #192]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	08db      	lsrs	r3, r3, #3
 800f870:	f003 0303 	and.w	r3, r3, #3
 800f874:	4a2f      	ldr	r2, [pc, #188]	; (800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800f876:	fa22 f303 	lsr.w	r3, r2, r3
 800f87a:	637b      	str	r3, [r7, #52]	; 0x34
 800f87c:	e01e      	b.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f87e:	4b2b      	ldr	r3, [pc, #172]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f88a:	d106      	bne.n	800f89a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f892:	d102      	bne.n	800f89a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f894:	4b28      	ldr	r3, [pc, #160]	; (800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800f896:	637b      	str	r3, [r7, #52]	; 0x34
 800f898:	e010      	b.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f89a:	4b24      	ldr	r3, [pc, #144]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f8a6:	d106      	bne.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8ae:	d102      	bne.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f8b0:	4b22      	ldr	r3, [pc, #136]	; (800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800f8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800f8b4:	e002      	b.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800f8ba:	e003      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800f8bc:	e002      	b.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800f8c2:	bf00      	nop
          }
        }
        break;
 800f8c4:	e25d      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800f8c6:	4b19      	ldr	r3, [pc, #100]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f8c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8cc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f8d0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d103      	bne.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800f8d8:	f7fb fb14 	bl	800af04 <HAL_RCC_GetPCLK2Freq>
 800f8dc:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800f8de:	e250      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800f8e0:	4b12      	ldr	r3, [pc, #72]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8ec:	d10b      	bne.n	800f906 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8f4:	d107      	bne.n	800f906 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8f6:	f107 0314 	add.w	r3, r7, #20
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fd fc22 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	637b      	str	r3, [r7, #52]	; 0x34
 800f904:	e04f      	b.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800f906:	4b09      	ldr	r3, [pc, #36]	; (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f912:	d115      	bne.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f91a:	d111      	bne.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f91c:	f107 0308 	add.w	r3, r7, #8
 800f920:	4618      	mov	r0, r3
 800f922:	f7fd fd79 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	637b      	str	r3, [r7, #52]	; 0x34
 800f92a:	e03c      	b.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800f92c:	44020c00 	.word	0x44020c00
 800f930:	00bb8000 	.word	0x00bb8000
 800f934:	03d09000 	.word	0x03d09000
 800f938:	003d0900 	.word	0x003d0900
 800f93c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800f940:	4b94      	ldr	r3, [pc, #592]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f003 0302 	and.w	r3, r3, #2
 800f948:	2b02      	cmp	r3, #2
 800f94a:	d10d      	bne.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f952:	d109      	bne.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f954:	4b8f      	ldr	r3, [pc, #572]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	08db      	lsrs	r3, r3, #3
 800f95a:	f003 0303 	and.w	r3, r3, #3
 800f95e:	4a8e      	ldr	r2, [pc, #568]	; (800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800f960:	fa22 f303 	lsr.w	r3, r2, r3
 800f964:	637b      	str	r3, [r7, #52]	; 0x34
 800f966:	e01e      	b.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800f968:	4b8a      	ldr	r3, [pc, #552]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f974:	d106      	bne.n	800f984 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f97c:	d102      	bne.n	800f984 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800f97e:	4b87      	ldr	r3, [pc, #540]	; (800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
 800f982:	e010      	b.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800f984:	4b83      	ldr	r3, [pc, #524]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f98c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f990:	d106      	bne.n	800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800f992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f994:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800f998:	d102      	bne.n	800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800f99a:	4b81      	ldr	r3, [pc, #516]	; (800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800f99c:	637b      	str	r3, [r7, #52]	; 0x34
 800f99e:	e002      	b.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9a4:	e1ed      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f9a6:	e1ec      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800f9a8:	4b7a      	ldr	r3, [pc, #488]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f9b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d103      	bne.n	800f9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800f9ba:	f7fb fab9 	bl	800af30 <HAL_RCC_GetPCLK3Freq>
 800f9be:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800f9c0:	e1df      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800f9c2:	4b74      	ldr	r3, [pc, #464]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f9ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9ce:	d10b      	bne.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9d6:	d107      	bne.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9d8:	f107 0314 	add.w	r3, r7, #20
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fd fbb1 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9e6:	e045      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800f9e8:	4b6a      	ldr	r3, [pc, #424]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f9f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9f4:	d10b      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9fc:	d107      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9fe:	f107 0308 	add.w	r3, r7, #8
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fd fd08 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa0c:	e032      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800fa0e:	4b61      	ldr	r3, [pc, #388]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f003 0302 	and.w	r3, r3, #2
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d10d      	bne.n	800fa36 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fa20:	d109      	bne.n	800fa36 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fa22:	4b5c      	ldr	r3, [pc, #368]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	08db      	lsrs	r3, r3, #3
 800fa28:	f003 0303 	and.w	r3, r3, #3
 800fa2c:	4a5a      	ldr	r2, [pc, #360]	; (800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800fa2e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa32:	637b      	str	r3, [r7, #52]	; 0x34
 800fa34:	e01e      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800fa36:	4b57      	ldr	r3, [pc, #348]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa42:	d106      	bne.n	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa4a:	d102      	bne.n	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800fa4c:	4b53      	ldr	r3, [pc, #332]	; (800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800fa4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa50:	e010      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800fa52:	4b50      	ldr	r3, [pc, #320]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa5e:	d106      	bne.n	800fa6e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800fa66:	d102      	bne.n	800fa6e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800fa68:	4b4d      	ldr	r3, [pc, #308]	; (800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800fa6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa6c:	e002      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa72:	e186      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fa74:	e185      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fa76:	4b47      	ldr	r3, [pc, #284]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa7c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800fa80:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d103      	bne.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800fa88:	f7fb fa3c 	bl	800af04 <HAL_RCC_GetPCLK2Freq>
 800fa8c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800fa8e:	e178      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800fa90:	4b40      	ldr	r3, [pc, #256]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa9c:	d10b      	bne.n	800fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800fa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa4:	d107      	bne.n	800fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faa6:	f107 0314 	add.w	r3, r7, #20
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fd fb4a 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	637b      	str	r3, [r7, #52]	; 0x34
 800fab4:	e045      	b.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800fab6:	4b37      	ldr	r3, [pc, #220]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fabe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fac2:	d10b      	bne.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faca:	d107      	bne.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800facc:	f107 0308 	add.w	r3, r7, #8
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fd fca1 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	637b      	str	r3, [r7, #52]	; 0x34
 800fada:	e032      	b.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800fadc:	4b2d      	ldr	r3, [pc, #180]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 0302 	and.w	r3, r3, #2
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d10d      	bne.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800fae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faea:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800faee:	d109      	bne.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800faf0:	4b28      	ldr	r3, [pc, #160]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	08db      	lsrs	r3, r3, #3
 800faf6:	f003 0303 	and.w	r3, r3, #3
 800fafa:	4a27      	ldr	r2, [pc, #156]	; (800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800fafc:	fa22 f303 	lsr.w	r3, r2, r3
 800fb00:	637b      	str	r3, [r7, #52]	; 0x34
 800fb02:	e01e      	b.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800fb04:	4b23      	ldr	r3, [pc, #140]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb10:	d106      	bne.n	800fb20 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb18:	d102      	bne.n	800fb20 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800fb1a:	4b20      	ldr	r3, [pc, #128]	; (800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800fb1c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb1e:	e010      	b.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800fb20:	4b1c      	ldr	r3, [pc, #112]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb2c:	d106      	bne.n	800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800fb34:	d102      	bne.n	800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800fb36:	4b1a      	ldr	r3, [pc, #104]	; (800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
 800fb3a:	e002      	b.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb40:	e11f      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fb42:	e11e      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fb44:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800fb46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fb4a:	f003 0303 	and.w	r3, r3, #3
 800fb4e:	633b      	str	r3, [r7, #48]	; 0x30
 800fb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb52:	2b03      	cmp	r3, #3
 800fb54:	d85f      	bhi.n	800fc16 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800fb56:	a201      	add	r2, pc, #4	; (adr r2, 800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800fb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb5c:	0800fb6d 	.word	0x0800fb6d
 800fb60:	0800fb75 	.word	0x0800fb75
 800fb64:	0800fb85 	.word	0x0800fb85
 800fb68:	0800fba5 	.word	0x0800fba5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800fb6c:	f7fb f998 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800fb70:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800fb72:	e053      	b.n	800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb74:	f107 0320 	add.w	r3, r7, #32
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fd f979 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800fb82:	e04b      	b.n	800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb84:	f107 0314 	add.w	r3, r7, #20
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fd fadb 	bl	800d144 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800fb92:	e043      	b.n	800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800fb94:	44020c00 	.word	0x44020c00
 800fb98:	03d09000 	.word	0x03d09000
 800fb9c:	003d0900 	.word	0x003d0900
 800fba0:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fba4:	4b79      	ldr	r3, [pc, #484]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fbaa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fbae:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fbb0:	4b76      	ldr	r3, [pc, #472]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 0302 	and.w	r3, r3, #2
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d10c      	bne.n	800fbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d109      	bne.n	800fbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fbc2:	4b72      	ldr	r3, [pc, #456]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	08db      	lsrs	r3, r3, #3
 800fbc8:	f003 0303 	and.w	r3, r3, #3
 800fbcc:	4a70      	ldr	r2, [pc, #448]	; (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800fbce:	fa22 f303 	lsr.w	r3, r2, r3
 800fbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800fbd4:	e01e      	b.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fbd6:	4b6d      	ldr	r3, [pc, #436]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbe2:	d106      	bne.n	800fbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbea:	d102      	bne.n	800fbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800fbec:	4b69      	ldr	r3, [pc, #420]	; (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800fbee:	637b      	str	r3, [r7, #52]	; 0x34
 800fbf0:	e010      	b.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fbf2:	4b66      	ldr	r3, [pc, #408]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fbfe:	d106      	bne.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc06:	d102      	bne.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800fc08:	4b63      	ldr	r3, [pc, #396]	; (800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800fc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc0c:	e002      	b.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800fc12:	e003      	b.n	800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800fc14:	e002      	b.n	800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800fc1a:	bf00      	nop
          }
        }
        break;
 800fc1c:	e0b1      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800fc1e:	4b5b      	ldr	r3, [pc, #364]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fc28:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800fc2a:	4b58      	ldr	r3, [pc, #352]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc30:	f003 0302 	and.w	r3, r3, #2
 800fc34:	2b02      	cmp	r3, #2
 800fc36:	d106      	bne.n	800fc46 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d103      	bne.n	800fc46 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800fc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc42:	637b      	str	r3, [r7, #52]	; 0x34
 800fc44:	e01f      	b.n	800fc86 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800fc46:	4b51      	ldr	r3, [pc, #324]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc54:	d106      	bne.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc58:	2b40      	cmp	r3, #64	; 0x40
 800fc5a:	d103      	bne.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800fc5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fc60:	637b      	str	r3, [r7, #52]	; 0x34
 800fc62:	e010      	b.n	800fc86 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800fc64:	4b49      	ldr	r3, [pc, #292]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc70:	d106      	bne.n	800fc80 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	2b80      	cmp	r3, #128	; 0x80
 800fc76:	d103      	bne.n	800fc80 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800fc78:	f248 0312 	movw	r3, #32786	; 0x8012
 800fc7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc7e:	e002      	b.n	800fc86 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800fc80:	2300      	movs	r3, #0
 800fc82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800fc84:	e07d      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fc86:	e07c      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fc88:	4b40      	ldr	r3, [pc, #256]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc92:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fc94:	4b3d      	ldr	r3, [pc, #244]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fca0:	d105      	bne.n	800fcae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d102      	bne.n	800fcae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800fca8:	4b3c      	ldr	r3, [pc, #240]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800fcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800fcac:	e031      	b.n	800fd12 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800fcae:	4b37      	ldr	r3, [pc, #220]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fcba:	d10a      	bne.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbe:	2b10      	cmp	r3, #16
 800fcc0:	d107      	bne.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fcc2:	f107 0320 	add.w	r3, r7, #32
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fd f8d2 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	637b      	str	r3, [r7, #52]	; 0x34
 800fcd0:	e01f      	b.n	800fd12 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800fcd2:	4b2e      	ldr	r3, [pc, #184]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fcd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcd8:	f003 0302 	and.w	r3, r3, #2
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d106      	bne.n	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800fce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce2:	2b20      	cmp	r3, #32
 800fce4:	d103      	bne.n	800fcee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800fce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcea:	637b      	str	r3, [r7, #52]	; 0x34
 800fcec:	e011      	b.n	800fd12 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800fcee:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fcf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcfc:	d106      	bne.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd00:	2b30      	cmp	r3, #48	; 0x30
 800fd02:	d103      	bne.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800fd04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fd08:	637b      	str	r3, [r7, #52]	; 0x34
 800fd0a:	e002      	b.n	800fd12 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800fd10:	e037      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fd12:	e036      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800fd14:	4b1d      	ldr	r3, [pc, #116]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fd16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fd1e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd22:	2b10      	cmp	r3, #16
 800fd24:	d107      	bne.n	800fd36 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd26:	f107 0320 	add.w	r3, r7, #32
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fd f8a0 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fd34:	e025      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800fd36:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd42:	d10a      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800fd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	d107      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fd fb62 	bl	800d418 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	637b      	str	r3, [r7, #52]	; 0x34
 800fd58:	e00f      	b.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800fd5a:	4b0c      	ldr	r3, [pc, #48]	; (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd66:	d105      	bne.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	2b30      	cmp	r3, #48	; 0x30
 800fd6c:	d102      	bne.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800fd6e:	4b0b      	ldr	r3, [pc, #44]	; (800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800fd70:	637b      	str	r3, [r7, #52]	; 0x34
 800fd72:	e002      	b.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800fd74:	2300      	movs	r3, #0
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800fd78:	e003      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fd7a:	e002      	b.n	800fd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd80:	bf00      	nop
    }
  }

  return (frequency);
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	373c      	adds	r7, #60	; 0x3c
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd90      	pop	{r4, r7, pc}
 800fd8c:	44020c00 	.word	0x44020c00
 800fd90:	03d09000 	.word	0x03d09000
 800fd94:	003d0900 	.word	0x003d0900
 800fd98:	007a1200 	.word	0x007a1200
 800fd9c:	02dc6c00 	.word	0x02dc6c00

0800fda0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800fda8:	4b48      	ldr	r3, [pc, #288]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a47      	ldr	r2, [pc, #284]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fdae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fdb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fdb4:	f7f6 fd66 	bl	8006884 <HAL_GetTick>
 800fdb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fdba:	e008      	b.n	800fdce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fdbc:	f7f6 fd62 	bl	8006884 <HAL_GetTick>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d901      	bls.n	800fdce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fdca:	2303      	movs	r3, #3
 800fdcc:	e07a      	b.n	800fec4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fdce:	4b3f      	ldr	r3, [pc, #252]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1f0      	bne.n	800fdbc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fdda:	4b3c      	ldr	r3, [pc, #240]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fde2:	f023 0303 	bic.w	r3, r3, #3
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	6811      	ldr	r1, [r2, #0]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	6852      	ldr	r2, [r2, #4]
 800fdee:	0212      	lsls	r2, r2, #8
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	4936      	ldr	r1, [pc, #216]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	3b01      	subs	r3, #1
 800fe08:	025b      	lsls	r3, r3, #9
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	041b      	lsls	r3, r3, #16
 800fe16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	695b      	ldr	r3, [r3, #20]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	061b      	lsls	r3, r3, #24
 800fe24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fe28:	4928      	ldr	r1, [pc, #160]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fe2e:	4b27      	ldr	r3, [pc, #156]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe32:	f023 020c 	bic.w	r2, r3, #12
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	4924      	ldr	r1, [pc, #144]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800fe40:	4b22      	ldr	r3, [pc, #136]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe44:	f023 0220 	bic.w	r2, r3, #32
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	69db      	ldr	r3, [r3, #28]
 800fe4c:	491f      	ldr	r1, [pc, #124]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800fe52:	4b1e      	ldr	r3, [pc, #120]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5a:	491c      	ldr	r1, [pc, #112]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800fe60:	4b1a      	ldr	r3, [pc, #104]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe64:	4a19      	ldr	r2, [pc, #100]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe66:	f023 0310 	bic.w	r3, r3, #16
 800fe6a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800fe6c:	4b17      	ldr	r3, [pc, #92]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	6a12      	ldr	r2, [r2, #32]
 800fe7c:	00d2      	lsls	r2, r2, #3
 800fe7e:	4913      	ldr	r1, [pc, #76]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe80:	4313      	orrs	r3, r2
 800fe82:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800fe84:	4b11      	ldr	r3, [pc, #68]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe88:	4a10      	ldr	r2, [pc, #64]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe8a:	f043 0310 	orr.w	r3, r3, #16
 800fe8e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800fe90:	4b0e      	ldr	r3, [pc, #56]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4a0d      	ldr	r2, [pc, #52]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800fe96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe9c:	f7f6 fcf2 	bl	8006884 <HAL_GetTick>
 800fea0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fea2:	e008      	b.n	800feb6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fea4:	f7f6 fcee 	bl	8006884 <HAL_GetTick>
 800fea8:	4602      	mov	r2, r0
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d901      	bls.n	800feb6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800feb2:	2303      	movs	r3, #3
 800feb4:	e006      	b.n	800fec4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800feb6:	4b05      	ldr	r3, [pc, #20]	; (800fecc <RCCEx_PLL2_Config+0x12c>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0f0      	beq.n	800fea4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800fec2:	2300      	movs	r3, #0

}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	44020c00 	.word	0x44020c00

0800fed0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800fed8:	4b48      	ldr	r3, [pc, #288]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a47      	ldr	r2, [pc, #284]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800fede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fee2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fee4:	f7f6 fcce 	bl	8006884 <HAL_GetTick>
 800fee8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800feea:	e008      	b.n	800fefe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800feec:	f7f6 fcca 	bl	8006884 <HAL_GetTick>
 800fef0:	4602      	mov	r2, r0
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	2b02      	cmp	r3, #2
 800fef8:	d901      	bls.n	800fefe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fefa:	2303      	movs	r3, #3
 800fefc:	e07a      	b.n	800fff4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fefe:	4b3f      	ldr	r3, [pc, #252]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1f0      	bne.n	800feec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ff0a:	4b3c      	ldr	r3, [pc, #240]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ff12:	f023 0303 	bic.w	r3, r3, #3
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	6811      	ldr	r1, [r2, #0]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	6852      	ldr	r2, [r2, #4]
 800ff1e:	0212      	lsls	r2, r2, #8
 800ff20:	430a      	orrs	r2, r1
 800ff22:	4936      	ldr	r1, [pc, #216]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff24:	4313      	orrs	r3, r2
 800ff26:	630b      	str	r3, [r1, #48]	; 0x30
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	025b      	lsls	r3, r3, #9
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	431a      	orrs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	041b      	lsls	r3, r3, #16
 800ff46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ff4a:	431a      	orrs	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	695b      	ldr	r3, [r3, #20]
 800ff50:	3b01      	subs	r3, #1
 800ff52:	061b      	lsls	r3, r3, #24
 800ff54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ff58:	4928      	ldr	r1, [pc, #160]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ff5e:	4b27      	ldr	r3, [pc, #156]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff62:	f023 020c 	bic.w	r2, r3, #12
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	4924      	ldr	r1, [pc, #144]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ff70:	4b22      	ldr	r3, [pc, #136]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff74:	f023 0220 	bic.w	r2, r3, #32
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	69db      	ldr	r3, [r3, #28]
 800ff7c:	491f      	ldr	r1, [pc, #124]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ff82:	4b1e      	ldr	r3, [pc, #120]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8a:	491c      	ldr	r1, [pc, #112]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800ff90:	4b1a      	ldr	r3, [pc, #104]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff94:	4a19      	ldr	r2, [pc, #100]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff96:	f023 0310 	bic.w	r3, r3, #16
 800ff9a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800ff9c:	4b17      	ldr	r3, [pc, #92]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ff9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ffa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	6a12      	ldr	r2, [r2, #32]
 800ffac:	00d2      	lsls	r2, r2, #3
 800ffae:	4913      	ldr	r1, [pc, #76]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800ffb4:	4b11      	ldr	r3, [pc, #68]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffb8:	4a10      	ldr	r2, [pc, #64]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffba:	f043 0310 	orr.w	r3, r3, #16
 800ffbe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800ffc0:	4b0e      	ldr	r3, [pc, #56]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a0d      	ldr	r2, [pc, #52]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ffcc:	f7f6 fc5a 	bl	8006884 <HAL_GetTick>
 800ffd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ffd2:	e008      	b.n	800ffe6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffd4:	f7f6 fc56 	bl	8006884 <HAL_GetTick>
 800ffd8:	4602      	mov	r2, r0
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d901      	bls.n	800ffe6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e006      	b.n	800fff4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ffe6:	4b05      	ldr	r3, [pc, #20]	; (800fffc <RCCEx_PLL3_Config+0x12c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d0f0      	beq.n	800ffd4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	44020c00 	.word	0x44020c00

08010000 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010008:	2301      	movs	r3, #1
 801000a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d071      	beq.n	80100f6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010018:	b2db      	uxtb	r3, r3
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7f1 fafe 	bl	8001628 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2202      	movs	r2, #2
 8010030:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010034:	4b32      	ldr	r3, [pc, #200]	; (8010100 <HAL_RTC_Init+0x100>)
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	f003 0310 	and.w	r3, r3, #16
 801003c:	2b10      	cmp	r3, #16
 801003e:	d051      	beq.n	80100e4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010040:	4b2f      	ldr	r3, [pc, #188]	; (8010100 <HAL_RTC_Init+0x100>)
 8010042:	22ca      	movs	r2, #202	; 0xca
 8010044:	625a      	str	r2, [r3, #36]	; 0x24
 8010046:	4b2e      	ldr	r3, [pc, #184]	; (8010100 <HAL_RTC_Init+0x100>)
 8010048:	2253      	movs	r2, #83	; 0x53
 801004a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 f9a3 	bl	8010398 <RTC_EnterInitMode>
 8010052:	4603      	mov	r3, r0
 8010054:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d13f      	bne.n	80100dc <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801005c:	4b28      	ldr	r3, [pc, #160]	; (8010100 <HAL_RTC_Init+0x100>)
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	4a27      	ldr	r2, [pc, #156]	; (8010100 <HAL_RTC_Init+0x100>)
 8010062:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8010066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801006a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801006c:	4b24      	ldr	r3, [pc, #144]	; (8010100 <HAL_RTC_Init+0x100>)
 801006e:	699a      	ldr	r2, [r3, #24]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6859      	ldr	r1, [r3, #4]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	4319      	orrs	r1, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	430b      	orrs	r3, r1
 8010080:	491f      	ldr	r1, [pc, #124]	; (8010100 <HAL_RTC_Init+0x100>)
 8010082:	4313      	orrs	r3, r2
 8010084:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	041b      	lsls	r3, r3, #16
 8010090:	491b      	ldr	r1, [pc, #108]	; (8010100 <HAL_RTC_Init+0x100>)
 8010092:	4313      	orrs	r3, r2
 8010094:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010096:	4b1a      	ldr	r3, [pc, #104]	; (8010100 <HAL_RTC_Init+0x100>)
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a6:	430b      	orrs	r3, r1
 80100a8:	4915      	ldr	r1, [pc, #84]	; (8010100 <HAL_RTC_Init+0x100>)
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f9ae 	bl	8010410 <RTC_ExitInitMode>
 80100b4:	4603      	mov	r3, r0
 80100b6:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10e      	bne.n	80100dc <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <HAL_RTC_Init+0x100>)
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6a19      	ldr	r1, [r3, #32]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	69db      	ldr	r3, [r3, #28]
 80100ce:	4319      	orrs	r1, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	430b      	orrs	r3, r1
 80100d6:	490a      	ldr	r1, [pc, #40]	; (8010100 <HAL_RTC_Init+0x100>)
 80100d8:	4313      	orrs	r3, r2
 80100da:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80100dc:	4b08      	ldr	r3, [pc, #32]	; (8010100 <HAL_RTC_Init+0x100>)
 80100de:	22ff      	movs	r2, #255	; 0xff
 80100e0:	625a      	str	r2, [r3, #36]	; 0x24
 80100e2:	e001      	b.n	80100e8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80100e4:	2300      	movs	r3, #0
 80100e6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d103      	bne.n	80100f6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2201      	movs	r2, #1
 80100f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80100f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	44007800 	.word	0x44007800

08010104 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010104:	b590      	push	{r4, r7, lr}
 8010106:	b087      	sub	sp, #28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010116:	2b01      	cmp	r3, #1
 8010118:	d101      	bne.n	801011e <HAL_RTC_SetTime+0x1a>
 801011a:	2302      	movs	r3, #2
 801011c:	e07e      	b.n	801021c <HAL_RTC_SetTime+0x118>
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2201      	movs	r2, #1
 8010122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2202      	movs	r2, #2
 801012a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801012e:	4b3d      	ldr	r3, [pc, #244]	; (8010224 <HAL_RTC_SetTime+0x120>)
 8010130:	22ca      	movs	r2, #202	; 0xca
 8010132:	625a      	str	r2, [r3, #36]	; 0x24
 8010134:	4b3b      	ldr	r3, [pc, #236]	; (8010224 <HAL_RTC_SetTime+0x120>)
 8010136:	2253      	movs	r2, #83	; 0x53
 8010138:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f000 f92c 	bl	8010398 <RTC_EnterInitMode>
 8010140:	4603      	mov	r3, r0
 8010142:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010144:	7cfb      	ldrb	r3, [r7, #19]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d159      	bne.n	80101fe <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 801014a:	4b36      	ldr	r3, [pc, #216]	; (8010224 <HAL_RTC_SetTime+0x120>)
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010156:	d04d      	beq.n	80101f4 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d125      	bne.n	80101aa <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801015e:	4b31      	ldr	r3, [pc, #196]	; (8010224 <HAL_RTC_SetTime+0x120>)
 8010160:	699b      	ldr	r3, [r3, #24]
 8010162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010166:	2b00      	cmp	r3, #0
 8010168:	d102      	bne.n	8010170 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2200      	movs	r2, #0
 801016e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f000 f989 	bl	801048c <RTC_ByteToBcd2>
 801017a:	4603      	mov	r3, r0
 801017c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	785b      	ldrb	r3, [r3, #1]
 8010182:	4618      	mov	r0, r3
 8010184:	f000 f982 	bl	801048c <RTC_ByteToBcd2>
 8010188:	4603      	mov	r3, r0
 801018a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801018c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	789b      	ldrb	r3, [r3, #2]
 8010192:	4618      	mov	r0, r3
 8010194:	f000 f97a 	bl	801048c <RTC_ByteToBcd2>
 8010198:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801019a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	78db      	ldrb	r3, [r3, #3]
 80101a2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80101a4:	4313      	orrs	r3, r2
 80101a6:	617b      	str	r3, [r7, #20]
 80101a8:	e017      	b.n	80101da <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <HAL_RTC_SetTime+0x120>)
 80101ac:	699b      	ldr	r3, [r3, #24]
 80101ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d102      	bne.n	80101bc <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	2200      	movs	r2, #0
 80101ba:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	785b      	ldrb	r3, [r3, #1]
 80101c6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80101c8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80101ce:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	78db      	ldrb	r3, [r3, #3]
 80101d4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80101d6:	4313      	orrs	r3, r2
 80101d8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80101da:	4a12      	ldr	r2, [pc, #72]	; (8010224 <HAL_RTC_SetTime+0x120>)
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80101e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80101e6:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80101e8:	4b0e      	ldr	r3, [pc, #56]	; (8010224 <HAL_RTC_SetTime+0x120>)
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	4a0d      	ldr	r2, [pc, #52]	; (8010224 <HAL_RTC_SetTime+0x120>)
 80101ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80101f2:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 f90b 	bl	8010410 <RTC_ExitInitMode>
 80101fa:	4603      	mov	r3, r0
 80101fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <HAL_RTC_SetTime+0x120>)
 8010200:	22ff      	movs	r2, #255	; 0xff
 8010202:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010204:	7cfb      	ldrb	r3, [r7, #19]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d103      	bne.n	8010212 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 801021a:	7cfb      	ldrb	r3, [r7, #19]
}
 801021c:	4618      	mov	r0, r3
 801021e:	371c      	adds	r7, #28
 8010220:	46bd      	mov	sp, r7
 8010222:	bd90      	pop	{r4, r7, pc}
 8010224:	44007800 	.word	0x44007800

08010228 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801023a:	2b01      	cmp	r3, #1
 801023c:	d101      	bne.n	8010242 <HAL_RTC_SetDate+0x1a>
 801023e:	2302      	movs	r3, #2
 8010240:	e071      	b.n	8010326 <HAL_RTC_SetDate+0xfe>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2201      	movs	r2, #1
 8010246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2202      	movs	r2, #2
 801024e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10e      	bne.n	8010276 <HAL_RTC_SetDate+0x4e>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	d008      	beq.n	8010276 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	785b      	ldrb	r3, [r3, #1]
 8010268:	f023 0310 	bic.w	r3, r3, #16
 801026c:	b2db      	uxtb	r3, r3
 801026e:	330a      	adds	r3, #10
 8010270:	b2da      	uxtb	r2, r3
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d11c      	bne.n	80102b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	78db      	ldrb	r3, [r3, #3]
 8010280:	4618      	mov	r0, r3
 8010282:	f000 f903 	bl	801048c <RTC_ByteToBcd2>
 8010286:	4603      	mov	r3, r0
 8010288:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	785b      	ldrb	r3, [r3, #1]
 801028e:	4618      	mov	r0, r3
 8010290:	f000 f8fc 	bl	801048c <RTC_ByteToBcd2>
 8010294:	4603      	mov	r3, r0
 8010296:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010298:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	789b      	ldrb	r3, [r3, #2]
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 f8f4 	bl	801048c <RTC_ByteToBcd2>
 80102a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80102a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80102b0:	4313      	orrs	r3, r2
 80102b2:	617b      	str	r3, [r7, #20]
 80102b4:	e00e      	b.n	80102d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	78db      	ldrb	r3, [r3, #3]
 80102ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	785b      	ldrb	r3, [r3, #1]
 80102c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80102c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80102c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80102d0:	4313      	orrs	r3, r2
 80102d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80102d4:	4b16      	ldr	r3, [pc, #88]	; (8010330 <HAL_RTC_SetDate+0x108>)
 80102d6:	22ca      	movs	r2, #202	; 0xca
 80102d8:	625a      	str	r2, [r3, #36]	; 0x24
 80102da:	4b15      	ldr	r3, [pc, #84]	; (8010330 <HAL_RTC_SetDate+0x108>)
 80102dc:	2253      	movs	r2, #83	; 0x53
 80102de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f000 f859 	bl	8010398 <RTC_EnterInitMode>
 80102e6:	4603      	mov	r3, r0
 80102e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80102ea:	7cfb      	ldrb	r3, [r7, #19]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d10b      	bne.n	8010308 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80102f0:	4a0f      	ldr	r2, [pc, #60]	; (8010330 <HAL_RTC_SetDate+0x108>)
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80102f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80102fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f000 f886 	bl	8010410 <RTC_ExitInitMode>
 8010304:	4603      	mov	r3, r0
 8010306:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010308:	4b09      	ldr	r3, [pc, #36]	; (8010330 <HAL_RTC_SetDate+0x108>)
 801030a:	22ff      	movs	r2, #255	; 0xff
 801030c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801030e:	7cfb      	ldrb	r3, [r7, #19]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d103      	bne.n	801031c <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8010324:	7cfb      	ldrb	r3, [r7, #19]
}
 8010326:	4618      	mov	r0, r3
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	bd90      	pop	{r4, r7, pc}
 801032e:	bf00      	nop
 8010330:	44007800 	.word	0x44007800

08010334 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 801033c:	4b15      	ldr	r3, [pc, #84]	; (8010394 <HAL_RTC_WaitForSynchro+0x60>)
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	4a14      	ldr	r2, [pc, #80]	; (8010394 <HAL_RTC_WaitForSynchro+0x60>)
 8010342:	f023 0320 	bic.w	r3, r3, #32
 8010346:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010348:	f7f6 fa9c 	bl	8006884 <HAL_GetTick>
 801034c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801034e:	e013      	b.n	8010378 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010350:	f7f6 fa98 	bl	8006884 <HAL_GetTick>
 8010354:	4602      	mov	r2, r0
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801035e:	d90b      	bls.n	8010378 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010360:	4b0c      	ldr	r3, [pc, #48]	; (8010394 <HAL_RTC_WaitForSynchro+0x60>)
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	f003 0320 	and.w	r3, r3, #32
 8010368:	2b00      	cmp	r3, #0
 801036a:	d10c      	bne.n	8010386 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2203      	movs	r2, #3
 8010370:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8010374:	2303      	movs	r3, #3
 8010376:	e008      	b.n	801038a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010378:	4b06      	ldr	r3, [pc, #24]	; (8010394 <HAL_RTC_WaitForSynchro+0x60>)
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0e5      	beq.n	8010350 <HAL_RTC_WaitForSynchro+0x1c>
 8010384:	e000      	b.n	8010388 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8010386:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	44007800 	.word	0x44007800

08010398 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80103a4:	4b19      	ldr	r3, [pc, #100]	; (801040c <RTC_EnterInitMode+0x74>)
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d128      	bne.n	8010402 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80103b0:	4b16      	ldr	r3, [pc, #88]	; (801040c <RTC_EnterInitMode+0x74>)
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	4a15      	ldr	r2, [pc, #84]	; (801040c <RTC_EnterInitMode+0x74>)
 80103b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80103bc:	f7f6 fa62 	bl	8006884 <HAL_GetTick>
 80103c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80103c2:	e013      	b.n	80103ec <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80103c4:	f7f6 fa5e 	bl	8006884 <HAL_GetTick>
 80103c8:	4602      	mov	r2, r0
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80103d2:	d90b      	bls.n	80103ec <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80103d4:	4b0d      	ldr	r3, [pc, #52]	; (801040c <RTC_EnterInitMode+0x74>)
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10f      	bne.n	8010400 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80103e0:	2303      	movs	r3, #3
 80103e2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2203      	movs	r2, #3
 80103e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80103ec:	4b07      	ldr	r3, [pc, #28]	; (801040c <RTC_EnterInitMode+0x74>)
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <RTC_EnterInitMode+0x6a>
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	2b03      	cmp	r3, #3
 80103fc:	d1e2      	bne.n	80103c4 <RTC_EnterInitMode+0x2c>
 80103fe:	e000      	b.n	8010402 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8010400:	bf00      	nop
        }
      }
    }
  }

  return status;
 8010402:	7bfb      	ldrb	r3, [r7, #15]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	44007800 	.word	0x44007800

08010410 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801041c:	4b1a      	ldr	r3, [pc, #104]	; (8010488 <RTC_ExitInitMode+0x78>)
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	4a19      	ldr	r2, [pc, #100]	; (8010488 <RTC_ExitInitMode+0x78>)
 8010422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010426:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010428:	4b17      	ldr	r3, [pc, #92]	; (8010488 <RTC_ExitInitMode+0x78>)
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	f003 0320 	and.w	r3, r3, #32
 8010430:	2b00      	cmp	r3, #0
 8010432:	d10c      	bne.n	801044e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7ff ff7d 	bl	8010334 <HAL_RTC_WaitForSynchro>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01e      	beq.n	801047e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2203      	movs	r2, #3
 8010444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010448:	2303      	movs	r3, #3
 801044a:	73fb      	strb	r3, [r7, #15]
 801044c:	e017      	b.n	801047e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801044e:	4b0e      	ldr	r3, [pc, #56]	; (8010488 <RTC_ExitInitMode+0x78>)
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	4a0d      	ldr	r2, [pc, #52]	; (8010488 <RTC_ExitInitMode+0x78>)
 8010454:	f023 0320 	bic.w	r3, r3, #32
 8010458:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff ff6a 	bl	8010334 <HAL_RTC_WaitForSynchro>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d005      	beq.n	8010472 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2203      	movs	r2, #3
 801046a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 801046e:	2303      	movs	r3, #3
 8010470:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010472:	4b05      	ldr	r3, [pc, #20]	; (8010488 <RTC_ExitInitMode+0x78>)
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	4a04      	ldr	r2, [pc, #16]	; (8010488 <RTC_ExitInitMode+0x78>)
 8010478:	f043 0320 	orr.w	r3, r3, #32
 801047c:	6193      	str	r3, [r2, #24]
  }
  return status;
 801047e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	44007800 	.word	0x44007800

0801048c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 801049e:	e005      	b.n	80104ac <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	3301      	adds	r3, #1
 80104a4:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 80104a6:	7afb      	ldrb	r3, [r7, #11]
 80104a8:	3b0a      	subs	r3, #10
 80104aa:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 80104ac:	7afb      	ldrb	r3, [r7, #11]
 80104ae:	2b09      	cmp	r3, #9
 80104b0:	d8f6      	bhi.n	80104a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	011b      	lsls	r3, r3, #4
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	7afb      	ldrb	r3, [r7, #11]
 80104bc:	4313      	orrs	r3, r2
 80104be:	b2db      	uxtb	r3, r3
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	4910      	ldr	r1, [pc, #64]	; (8010520 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80104e0:	4313      	orrs	r3, r2
 80104e2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	689a      	ldr	r2, [r3, #8]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	431a      	orrs	r2, r3
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	490c      	ldr	r1, [pc, #48]	; (8010524 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80104f4:	4313      	orrs	r3, r2
 80104f6:	624b      	str	r3, [r1, #36]	; 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 80104f8:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80104fa:	6a1b      	ldr	r3, [r3, #32]
 80104fc:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	6919      	ldr	r1, [r3, #16]
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	695b      	ldr	r3, [r3, #20]
 8010508:	041b      	lsls	r3, r3, #16
 801050a:	430b      	orrs	r3, r1
 801050c:	4905      	ldr	r1, [pc, #20]	; (8010524 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801050e:	4313      	orrs	r3, r2
 8010510:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	44007800 	.word	0x44007800
 8010524:	44007c00 	.word	0x44007c00

08010528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	691b      	ldr	r3, [r3, #16]
 801053e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	f003 0302 	and.w	r3, r3, #2
 8010546:	2b00      	cmp	r3, #0
 8010548:	d020      	beq.n	801058c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f003 0302 	and.w	r3, r3, #2
 8010550:	2b00      	cmp	r3, #0
 8010552:	d01b      	beq.n	801058c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f06f 0202 	mvn.w	r2, #2
 801055c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	699b      	ldr	r3, [r3, #24]
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d003      	beq.n	801057a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f936 	bl	80107e4 <HAL_TIM_IC_CaptureCallback>
 8010578:	e005      	b.n	8010586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f928 	bl	80107d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f939 	bl	80107f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	f003 0304 	and.w	r3, r3, #4
 8010592:	2b00      	cmp	r3, #0
 8010594:	d020      	beq.n	80105d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f003 0304 	and.w	r3, r3, #4
 801059c:	2b00      	cmp	r3, #0
 801059e:	d01b      	beq.n	80105d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f06f 0204 	mvn.w	r2, #4
 80105a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2202      	movs	r2, #2
 80105ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d003      	beq.n	80105c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f910 	bl	80107e4 <HAL_TIM_IC_CaptureCallback>
 80105c4:	e005      	b.n	80105d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f902 	bl	80107d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f913 	bl	80107f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	f003 0308 	and.w	r3, r3, #8
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d020      	beq.n	8010624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f003 0308 	and.w	r3, r3, #8
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01b      	beq.n	8010624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f06f 0208 	mvn.w	r2, #8
 80105f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2204      	movs	r2, #4
 80105fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	69db      	ldr	r3, [r3, #28]
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	2b00      	cmp	r3, #0
 8010608:	d003      	beq.n	8010612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f8ea 	bl	80107e4 <HAL_TIM_IC_CaptureCallback>
 8010610:	e005      	b.n	801061e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f8dc 	bl	80107d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 f8ed 	bl	80107f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2200      	movs	r2, #0
 8010622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f003 0310 	and.w	r3, r3, #16
 801062a:	2b00      	cmp	r3, #0
 801062c:	d020      	beq.n	8010670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f003 0310 	and.w	r3, r3, #16
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01b      	beq.n	8010670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f06f 0210 	mvn.w	r2, #16
 8010640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2208      	movs	r2, #8
 8010646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	69db      	ldr	r3, [r3, #28]
 801064e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010652:	2b00      	cmp	r3, #0
 8010654:	d003      	beq.n	801065e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 f8c4 	bl	80107e4 <HAL_TIM_IC_CaptureCallback>
 801065c:	e005      	b.n	801066a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f8b6 	bl	80107d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 f8c7 	bl	80107f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00c      	beq.n	8010694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	d007      	beq.n	8010694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f06f 0201 	mvn.w	r2, #1
 801068c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f894 	bl	80107bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00c      	beq.n	80106b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d007      	beq.n	80106b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80106b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f8be 	bl	8010834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00c      	beq.n	80106dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d007      	beq.n	80106dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80106d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f8b6 	bl	8010848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00c      	beq.n	8010700 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d007      	beq.n	8010700 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80106f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f886 	bl	801080c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00c      	beq.n	8010724 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f003 0320 	and.w	r3, r3, #32
 8010710:	2b00      	cmp	r3, #0
 8010712:	d007      	beq.n	8010724 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f06f 0220 	mvn.w	r2, #32
 801071c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 f87e 	bl	8010820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00c      	beq.n	8010748 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d007      	beq.n	8010748 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8010740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f88a 	bl	801085c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00c      	beq.n	801076c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d007      	beq.n	801076c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8010764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f882 	bl	8010870 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00c      	beq.n	8010790 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d007      	beq.n	8010790 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8010788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f87a 	bl	8010884 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00c      	beq.n	80107b4 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d007      	beq.n	80107b4 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80107ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 f872 	bl	8010898 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80107b4:	bf00      	nop
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80107c4:	bf00      	nop
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80107d8:	bf00      	nop
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80107ec:	bf00      	nop
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010814:	bf00      	nop
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010828:	bf00      	nop
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801083c:	bf00      	nop
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010864:	bf00      	nop
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e042      	b.n	8010944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f000 f83b 	bl	801094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2224      	movs	r2, #36	; 0x24
 80108da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f022 0201 	bic.w	r2, r2, #1
 80108ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fdb2 	bl	8011460 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 fbc1 	bl	8011084 <UART_SetConfig>
 8010902:	4603      	mov	r3, r0
 8010904:	2b01      	cmp	r3, #1
 8010906:	d101      	bne.n	801090c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010908:	2301      	movs	r3, #1
 801090a:	e01b      	b.n	8010944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685a      	ldr	r2, [r3, #4]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801091a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689a      	ldr	r2, [r3, #8]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801092a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f042 0201 	orr.w	r2, r2, #1
 801093a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 fe31 	bl	80115a4 <UART_CheckIdleState>
 8010942:	4603      	mov	r3, r0
}
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8010954:	bf00      	nop
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b08a      	sub	sp, #40	; 0x28
 8010964:	af02      	add	r7, sp, #8
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	603b      	str	r3, [r7, #0]
 801096c:	4613      	mov	r3, r2
 801096e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010976:	2b20      	cmp	r3, #32
 8010978:	f040 808b 	bne.w	8010a92 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d002      	beq.n	8010988 <HAL_UART_Transmit+0x28>
 8010982:	88fb      	ldrh	r3, [r7, #6]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d101      	bne.n	801098c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010988:	2301      	movs	r3, #1
 801098a:	e083      	b.n	8010a94 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010996:	2b80      	cmp	r3, #128	; 0x80
 8010998:	d107      	bne.n	80109aa <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	689a      	ldr	r2, [r3, #8]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109a8:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2221      	movs	r2, #33	; 0x21
 80109b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80109ba:	f7f5 ff63 	bl	8006884 <HAL_GetTick>
 80109be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	88fa      	ldrh	r2, [r7, #6]
 80109c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	88fa      	ldrh	r2, [r7, #6]
 80109cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109d8:	d108      	bne.n	80109ec <HAL_UART_Transmit+0x8c>
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d104      	bne.n	80109ec <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80109e2:	2300      	movs	r3, #0
 80109e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	61bb      	str	r3, [r7, #24]
 80109ea:	e003      	b.n	80109f4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80109f4:	e030      	b.n	8010a58 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	2200      	movs	r2, #0
 80109fe:	2180      	movs	r1, #128	; 0x80
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f000 fe79 	bl	80116f8 <UART_WaitOnFlagUntilTimeout>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d005      	beq.n	8010a18 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2220      	movs	r2, #32
 8010a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010a14:	2303      	movs	r3, #3
 8010a16:	e03d      	b.n	8010a94 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d10b      	bne.n	8010a36 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	461a      	mov	r2, r3
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	3302      	adds	r3, #2
 8010a32:	61bb      	str	r3, [r7, #24]
 8010a34:	e007      	b.n	8010a46 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	781a      	ldrb	r2, [r3, #0]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	3301      	adds	r3, #1
 8010a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1c8      	bne.n	80109f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2140      	movs	r1, #64	; 0x40
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f000 fe42 	bl	80116f8 <UART_WaitOnFlagUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d005      	beq.n	8010a86 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010a82:	2303      	movs	r3, #3
 8010a84:	e006      	b.n	8010a94 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2220      	movs	r2, #32
 8010a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	e000      	b.n	8010a94 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8010a92:	2302      	movs	r3, #2
  }
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3720      	adds	r7, #32
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b0ae      	sub	sp, #184	; 0xb8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	69db      	ldr	r3, [r3, #28]
 8010aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ac6:	f640 030f 	movw	r3, #2063	; 0x80f
 8010aca:	4013      	ands	r3, r2
 8010acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8010ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d11b      	bne.n	8010b10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010adc:	f003 0320 	and.w	r3, r3, #32
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d015      	beq.n	8010b10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010ae8:	f003 0320 	and.w	r3, r3, #32
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d105      	bne.n	8010afc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d009      	beq.n	8010b10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 8293 	beq.w	801102c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	4798      	blx	r3
      }
      return;
 8010b0e:	e28d      	b.n	801102c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 80fd 	beq.w	8010d14 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010b1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010b1e:	4b7a      	ldr	r3, [pc, #488]	; (8010d08 <HAL_UART_IRQHandler+0x26c>)
 8010b20:	4013      	ands	r3, r2
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d106      	bne.n	8010b34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010b2a:	4b78      	ldr	r3, [pc, #480]	; (8010d0c <HAL_UART_IRQHandler+0x270>)
 8010b2c:	4013      	ands	r3, r2
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 80f0 	beq.w	8010d14 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b38:	f003 0301 	and.w	r3, r3, #1
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d011      	beq.n	8010b64 <HAL_UART_IRQHandler+0xc8>
 8010b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00b      	beq.n	8010b64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2201      	movs	r2, #1
 8010b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b5a:	f043 0201 	orr.w	r2, r3, #1
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b68:	f003 0302 	and.w	r3, r3, #2
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d011      	beq.n	8010b94 <HAL_UART_IRQHandler+0xf8>
 8010b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00b      	beq.n	8010b94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2202      	movs	r2, #2
 8010b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b8a:	f043 0204 	orr.w	r2, r3, #4
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d011      	beq.n	8010bc4 <HAL_UART_IRQHandler+0x128>
 8010ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00b      	beq.n	8010bc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2204      	movs	r2, #4
 8010bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bba:	f043 0202 	orr.w	r2, r3, #2
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010bc8:	f003 0308 	and.w	r3, r3, #8
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d017      	beq.n	8010c00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010bd4:	f003 0320 	and.w	r3, r3, #32
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d105      	bne.n	8010be8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010be0:	4b49      	ldr	r3, [pc, #292]	; (8010d08 <HAL_UART_IRQHandler+0x26c>)
 8010be2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00b      	beq.n	8010c00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2208      	movs	r2, #8
 8010bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bf6:	f043 0208 	orr.w	r2, r3, #8
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d012      	beq.n	8010c32 <HAL_UART_IRQHandler+0x196>
 8010c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d00c      	beq.n	8010c32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c28:	f043 0220 	orr.w	r2, r3, #32
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 81f9 	beq.w	8011030 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010c42:	f003 0320 	and.w	r3, r3, #32
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d013      	beq.n	8010c72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010c4e:	f003 0320 	and.w	r3, r3, #32
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d105      	bne.n	8010c62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d007      	beq.n	8010c72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c86:	2b40      	cmp	r3, #64	; 0x40
 8010c88:	d005      	beq.n	8010c96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010c8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d02e      	beq.n	8010cf4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 fd95 	bl	80117c6 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ca6:	2b40      	cmp	r3, #64	; 0x40
 8010ca8:	d120      	bne.n	8010cec <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d017      	beq.n	8010ce4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cba:	4a15      	ldr	r2, [pc, #84]	; (8010d10 <HAL_UART_IRQHandler+0x274>)
 8010cbc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f6 ffdd 	bl	8007c84 <HAL_DMA_Abort_IT>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d019      	beq.n	8010d04 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010cde:	4610      	mov	r0, r2
 8010ce0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce2:	e00f      	b.n	8010d04 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 f9b7 	bl	8011058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cea:	e00b      	b.n	8010d04 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 f9b3 	bl	8011058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cf2:	e007      	b.n	8010d04 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 f9af 	bl	8011058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010d02:	e195      	b.n	8011030 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d04:	bf00      	nop
    return;
 8010d06:	e193      	b.n	8011030 <HAL_UART_IRQHandler+0x594>
 8010d08:	10000001 	.word	0x10000001
 8010d0c:	04000120 	.word	0x04000120
 8010d10:	08011893 	.word	0x08011893

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	f040 8129 	bne.w	8010f70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d22:	f003 0310 	and.w	r3, r3, #16
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 8122 	beq.w	8010f70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010d30:	f003 0310 	and.w	r3, r3, #16
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 811b 	beq.w	8010f70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2210      	movs	r2, #16
 8010d40:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d4c:	2b40      	cmp	r3, #64	; 0x40
 8010d4e:	f040 8091 	bne.w	8010e74 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d5c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8010d60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f000 8165 	beq.w	8011034 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d70:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8010d74:	429a      	cmp	r2, r3
 8010d76:	f080 815d 	bcs.w	8011034 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8010d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d8c:	2b81      	cmp	r3, #129	; 0x81
 8010d8e:	d060      	beq.n	8010e52 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d98:	e853 3f00 	ldrex	r3, [r3]
 8010d9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	461a      	mov	r2, r3
 8010dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010db6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010dbe:	e841 2300 	strex	r3, r2, [r1]
 8010dc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1e2      	bne.n	8010d90 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	3308      	adds	r3, #8
 8010dd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dd4:	e853 3f00 	ldrex	r3, [r3]
 8010dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ddc:	f023 0301 	bic.w	r3, r3, #1
 8010de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	3308      	adds	r3, #8
 8010dea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010dee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010df6:	e841 2300 	strex	r3, r2, [r1]
 8010dfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1e3      	bne.n	8010dca <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2220      	movs	r2, #32
 8010e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e18:	e853 3f00 	ldrex	r3, [r3]
 8010e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e20:	f023 0310 	bic.w	r3, r3, #16
 8010e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e32:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e3a:	e841 2300 	strex	r3, r2, [r1]
 8010e3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1e4      	bne.n	8010e10 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7f6 fe9d 	bl	8007b8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2202      	movs	r2, #2
 8010e56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 f8fd 	bl	801106c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e72:	e0df      	b.n	8011034 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 80d1 	beq.w	8011038 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8010e96:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 80cc 	beq.w	8011038 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	e853 3f00 	ldrex	r3, [r3]
 8010eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ec4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1e4      	bne.n	8010ea0 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3308      	adds	r3, #8
 8010edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ee6:	6a3b      	ldr	r3, [r7, #32]
 8010ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010eec:	f023 0301 	bic.w	r3, r3, #1
 8010ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010efe:	633a      	str	r2, [r7, #48]	; 0x30
 8010f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f06:	e841 2300 	strex	r3, r2, [r1]
 8010f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1e1      	bne.n	8010ed6 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2220      	movs	r2, #32
 8010f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	e853 3f00 	ldrex	r3, [r3]
 8010f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f023 0310 	bic.w	r3, r3, #16
 8010f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	461a      	mov	r2, r3
 8010f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f48:	61fb      	str	r3, [r7, #28]
 8010f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4c:	69b9      	ldr	r1, [r7, #24]
 8010f4e:	69fa      	ldr	r2, [r7, #28]
 8010f50:	e841 2300 	strex	r3, r2, [r1]
 8010f54:	617b      	str	r3, [r7, #20]
   return(result);
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d1e4      	bne.n	8010f26 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2202      	movs	r2, #2
 8010f60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f62:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8010f66:	4619      	mov	r1, r3
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 f87f 	bl	801106c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010f6e:	e063      	b.n	8011038 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00e      	beq.n	8010f9a <HAL_UART_IRQHandler+0x4fe>
 8010f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d008      	beq.n	8010f9a <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fcbe 	bl	8011914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f98:	e051      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d014      	beq.n	8010fd0 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010fa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d105      	bne.n	8010fbe <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d008      	beq.n	8010fd0 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d03a      	beq.n	801103c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	4798      	blx	r3
    }
    return;
 8010fce:	e035      	b.n	801103c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d009      	beq.n	8010ff0 <HAL_UART_IRQHandler+0x554>
 8010fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d003      	beq.n	8010ff0 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 fc68 	bl	80118be <UART_EndTransmit_IT>
    return;
 8010fee:	e026      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010ff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d009      	beq.n	8011010 <HAL_UART_IRQHandler+0x574>
 8010ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d003      	beq.n	8011010 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 fc97 	bl	801193c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801100e:	e016      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011018:	2b00      	cmp	r3, #0
 801101a:	d010      	beq.n	801103e <HAL_UART_IRQHandler+0x5a2>
 801101c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011020:	2b00      	cmp	r3, #0
 8011022:	da0c      	bge.n	801103e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 fc7f 	bl	8011928 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801102a:	e008      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
      return;
 801102c:	bf00      	nop
 801102e:	e006      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
    return;
 8011030:	bf00      	nop
 8011032:	e004      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
      return;
 8011034:	bf00      	nop
 8011036:	e002      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
      return;
 8011038:	bf00      	nop
 801103a:	e000      	b.n	801103e <HAL_UART_IRQHandler+0x5a2>
    return;
 801103c:	bf00      	nop
  }
}
 801103e:	37b8      	adds	r7, #184	; 0xb8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801104c:	bf00      	nop
 801104e:	370c      	adds	r7, #12
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr

08011058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011078:	bf00      	nop
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011088:	b094      	sub	sp, #80	; 0x50
 801108a:	af00      	add	r7, sp, #0
 801108c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801108e:	2300      	movs	r3, #0
 8011090:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	4b78      	ldr	r3, [pc, #480]	; (801127c <UART_SetConfig+0x1f8>)
 801109a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	689a      	ldr	r2, [r3, #8]
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	431a      	orrs	r2, r3
 80110a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	431a      	orrs	r2, r3
 80110ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ae:	69db      	ldr	r3, [r3, #28]
 80110b0:	4313      	orrs	r3, r2
 80110b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4971      	ldr	r1, [pc, #452]	; (8011280 <UART_SetConfig+0x1fc>)
 80110bc:	4019      	ands	r1, r3
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c4:	430b      	orrs	r3, r1
 80110c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80110d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d4:	68d9      	ldr	r1, [r3, #12]
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	ea40 0301 	orr.w	r3, r0, r1
 80110de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80110e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e2:	699b      	ldr	r3, [r3, #24]
 80110e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80110e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	4b64      	ldr	r3, [pc, #400]	; (801127c <UART_SetConfig+0x1f8>)
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d009      	beq.n	8011104 <UART_SetConfig+0x80>
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	4b63      	ldr	r3, [pc, #396]	; (8011284 <UART_SetConfig+0x200>)
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d004      	beq.n	8011104 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	6a1a      	ldr	r2, [r3, #32]
 80110fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011100:	4313      	orrs	r3, r2
 8011102:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	689b      	ldr	r3, [r3, #8]
 801110a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801110e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011118:	430b      	orrs	r3, r1
 801111a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011122:	f023 000f 	bic.w	r0, r3, #15
 8011126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	ea40 0301 	orr.w	r3, r0, r1
 8011132:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	4b53      	ldr	r3, [pc, #332]	; (8011288 <UART_SetConfig+0x204>)
 801113a:	429a      	cmp	r2, r3
 801113c:	d102      	bne.n	8011144 <UART_SetConfig+0xc0>
 801113e:	2301      	movs	r3, #1
 8011140:	64bb      	str	r3, [r7, #72]	; 0x48
 8011142:	e066      	b.n	8011212 <UART_SetConfig+0x18e>
 8011144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	4b50      	ldr	r3, [pc, #320]	; (801128c <UART_SetConfig+0x208>)
 801114a:	429a      	cmp	r2, r3
 801114c:	d102      	bne.n	8011154 <UART_SetConfig+0xd0>
 801114e:	2302      	movs	r3, #2
 8011150:	64bb      	str	r3, [r7, #72]	; 0x48
 8011152:	e05e      	b.n	8011212 <UART_SetConfig+0x18e>
 8011154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	4b4d      	ldr	r3, [pc, #308]	; (8011290 <UART_SetConfig+0x20c>)
 801115a:	429a      	cmp	r2, r3
 801115c:	d102      	bne.n	8011164 <UART_SetConfig+0xe0>
 801115e:	2304      	movs	r3, #4
 8011160:	64bb      	str	r3, [r7, #72]	; 0x48
 8011162:	e056      	b.n	8011212 <UART_SetConfig+0x18e>
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	4b4a      	ldr	r3, [pc, #296]	; (8011294 <UART_SetConfig+0x210>)
 801116a:	429a      	cmp	r2, r3
 801116c:	d102      	bne.n	8011174 <UART_SetConfig+0xf0>
 801116e:	2308      	movs	r3, #8
 8011170:	64bb      	str	r3, [r7, #72]	; 0x48
 8011172:	e04e      	b.n	8011212 <UART_SetConfig+0x18e>
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	4b47      	ldr	r3, [pc, #284]	; (8011298 <UART_SetConfig+0x214>)
 801117a:	429a      	cmp	r2, r3
 801117c:	d102      	bne.n	8011184 <UART_SetConfig+0x100>
 801117e:	2310      	movs	r3, #16
 8011180:	64bb      	str	r3, [r7, #72]	; 0x48
 8011182:	e046      	b.n	8011212 <UART_SetConfig+0x18e>
 8011184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	4b44      	ldr	r3, [pc, #272]	; (801129c <UART_SetConfig+0x218>)
 801118a:	429a      	cmp	r2, r3
 801118c:	d102      	bne.n	8011194 <UART_SetConfig+0x110>
 801118e:	2320      	movs	r3, #32
 8011190:	64bb      	str	r3, [r7, #72]	; 0x48
 8011192:	e03e      	b.n	8011212 <UART_SetConfig+0x18e>
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	4b41      	ldr	r3, [pc, #260]	; (80112a0 <UART_SetConfig+0x21c>)
 801119a:	429a      	cmp	r2, r3
 801119c:	d102      	bne.n	80111a4 <UART_SetConfig+0x120>
 801119e:	2340      	movs	r3, #64	; 0x40
 80111a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80111a2:	e036      	b.n	8011212 <UART_SetConfig+0x18e>
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	4b3e      	ldr	r3, [pc, #248]	; (80112a4 <UART_SetConfig+0x220>)
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d102      	bne.n	80111b4 <UART_SetConfig+0x130>
 80111ae:	2380      	movs	r3, #128	; 0x80
 80111b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80111b2:	e02e      	b.n	8011212 <UART_SetConfig+0x18e>
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b3b      	ldr	r3, [pc, #236]	; (80112a8 <UART_SetConfig+0x224>)
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d103      	bne.n	80111c6 <UART_SetConfig+0x142>
 80111be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80111c4:	e025      	b.n	8011212 <UART_SetConfig+0x18e>
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	4b38      	ldr	r3, [pc, #224]	; (80112ac <UART_SetConfig+0x228>)
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d103      	bne.n	80111d8 <UART_SetConfig+0x154>
 80111d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80111d6:	e01c      	b.n	8011212 <UART_SetConfig+0x18e>
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	4b34      	ldr	r3, [pc, #208]	; (80112b0 <UART_SetConfig+0x22c>)
 80111de:	429a      	cmp	r2, r3
 80111e0:	d103      	bne.n	80111ea <UART_SetConfig+0x166>
 80111e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80111e8:	e013      	b.n	8011212 <UART_SetConfig+0x18e>
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	4b31      	ldr	r3, [pc, #196]	; (80112b4 <UART_SetConfig+0x230>)
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d103      	bne.n	80111fc <UART_SetConfig+0x178>
 80111f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80111fa:	e00a      	b.n	8011212 <UART_SetConfig+0x18e>
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	4b1e      	ldr	r3, [pc, #120]	; (801127c <UART_SetConfig+0x1f8>)
 8011202:	429a      	cmp	r2, r3
 8011204:	d103      	bne.n	801120e <UART_SetConfig+0x18a>
 8011206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801120a:	64bb      	str	r3, [r7, #72]	; 0x48
 801120c:	e001      	b.n	8011212 <UART_SetConfig+0x18e>
 801120e:	2300      	movs	r3, #0
 8011210:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	4b19      	ldr	r3, [pc, #100]	; (801127c <UART_SetConfig+0x1f8>)
 8011218:	429a      	cmp	r2, r3
 801121a:	d005      	beq.n	8011228 <UART_SetConfig+0x1a4>
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	4b18      	ldr	r3, [pc, #96]	; (8011284 <UART_SetConfig+0x200>)
 8011222:	429a      	cmp	r2, r3
 8011224:	f040 8094 	bne.w	8011350 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801122a:	2200      	movs	r2, #0
 801122c:	623b      	str	r3, [r7, #32]
 801122e:	627a      	str	r2, [r7, #36]	; 0x24
 8011230:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011234:	f7fc fa5a 	bl	800d6ec <HAL_RCCEx_GetPeriphCLKFreq>
 8011238:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801123a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	f000 80f7 	beq.w	8011430 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	4a1c      	ldr	r2, [pc, #112]	; (80112b8 <UART_SetConfig+0x234>)
 8011248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801124c:	461a      	mov	r2, r3
 801124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011250:	fbb3 f3f2 	udiv	r3, r3, r2
 8011254:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	685a      	ldr	r2, [r3, #4]
 801125a:	4613      	mov	r3, r2
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	4413      	add	r3, r2
 8011260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011262:	429a      	cmp	r2, r3
 8011264:	d305      	bcc.n	8011272 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801126c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801126e:	429a      	cmp	r2, r3
 8011270:	d924      	bls.n	80112bc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011278:	e069      	b.n	801134e <UART_SetConfig+0x2ca>
 801127a:	bf00      	nop
 801127c:	44002400 	.word	0x44002400
 8011280:	cfff69f3 	.word	0xcfff69f3
 8011284:	54002400 	.word	0x54002400
 8011288:	40013800 	.word	0x40013800
 801128c:	40004400 	.word	0x40004400
 8011290:	40004800 	.word	0x40004800
 8011294:	40004c00 	.word	0x40004c00
 8011298:	40005000 	.word	0x40005000
 801129c:	40006400 	.word	0x40006400
 80112a0:	40007800 	.word	0x40007800
 80112a4:	40007c00 	.word	0x40007c00
 80112a8:	40008000 	.word	0x40008000
 80112ac:	40006800 	.word	0x40006800
 80112b0:	40006c00 	.word	0x40006c00
 80112b4:	40008400 	.word	0x40008400
 80112b8:	080147ac 	.word	0x080147ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112be:	2200      	movs	r2, #0
 80112c0:	61bb      	str	r3, [r7, #24]
 80112c2:	61fa      	str	r2, [r7, #28]
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	4a64      	ldr	r2, [pc, #400]	; (801145c <UART_SetConfig+0x3d8>)
 80112ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	2200      	movs	r2, #0
 80112d2:	613b      	str	r3, [r7, #16]
 80112d4:	617a      	str	r2, [r7, #20]
 80112d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80112da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80112de:	f7ef fcbb 	bl	8000c58 <__aeabi_uldivmod>
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	4610      	mov	r0, r2
 80112e8:	4619      	mov	r1, r3
 80112ea:	f04f 0200 	mov.w	r2, #0
 80112ee:	f04f 0300 	mov.w	r3, #0
 80112f2:	020b      	lsls	r3, r1, #8
 80112f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80112f8:	0202      	lsls	r2, r0, #8
 80112fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112fc:	6849      	ldr	r1, [r1, #4]
 80112fe:	0849      	lsrs	r1, r1, #1
 8011300:	2000      	movs	r0, #0
 8011302:	460c      	mov	r4, r1
 8011304:	4605      	mov	r5, r0
 8011306:	eb12 0804 	adds.w	r8, r2, r4
 801130a:	eb43 0905 	adc.w	r9, r3, r5
 801130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	60bb      	str	r3, [r7, #8]
 8011316:	60fa      	str	r2, [r7, #12]
 8011318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801131c:	4640      	mov	r0, r8
 801131e:	4649      	mov	r1, r9
 8011320:	f7ef fc9a 	bl	8000c58 <__aeabi_uldivmod>
 8011324:	4602      	mov	r2, r0
 8011326:	460b      	mov	r3, r1
 8011328:	4613      	mov	r3, r2
 801132a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801132c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011332:	d308      	bcc.n	8011346 <UART_SetConfig+0x2c2>
 8011334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801133a:	d204      	bcs.n	8011346 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 801133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011342:	60da      	str	r2, [r3, #12]
 8011344:	e003      	b.n	801134e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8011346:	2301      	movs	r3, #1
 8011348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 801134c:	e070      	b.n	8011430 <UART_SetConfig+0x3ac>
 801134e:	e06f      	b.n	8011430 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	69db      	ldr	r3, [r3, #28]
 8011354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011358:	d13c      	bne.n	80113d4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801135a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801135c:	2200      	movs	r2, #0
 801135e:	603b      	str	r3, [r7, #0]
 8011360:	607a      	str	r2, [r7, #4]
 8011362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011366:	f7fc f9c1 	bl	800d6ec <HAL_RCCEx_GetPeriphCLKFreq>
 801136a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801136c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801136e:	2b00      	cmp	r3, #0
 8011370:	d05e      	beq.n	8011430 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011376:	4a39      	ldr	r2, [pc, #228]	; (801145c <UART_SetConfig+0x3d8>)
 8011378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801137c:	461a      	mov	r2, r3
 801137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011380:	fbb3 f3f2 	udiv	r3, r3, r2
 8011384:	005a      	lsls	r2, r3, #1
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	085b      	lsrs	r3, r3, #1
 801138c:	441a      	add	r2, r3
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	fbb2 f3f3 	udiv	r3, r2, r3
 8011396:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801139a:	2b0f      	cmp	r3, #15
 801139c:	d916      	bls.n	80113cc <UART_SetConfig+0x348>
 801139e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113a4:	d212      	bcs.n	80113cc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80113a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	f023 030f 	bic.w	r3, r3, #15
 80113ae:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80113b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b2:	085b      	lsrs	r3, r3, #1
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	f003 0307 	and.w	r3, r3, #7
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113be:	4313      	orrs	r3, r2
 80113c0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80113c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80113c8:	60da      	str	r2, [r3, #12]
 80113ca:	e031      	b.n	8011430 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80113d2:	e02d      	b.n	8011430 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80113d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113d6:	2200      	movs	r2, #0
 80113d8:	469a      	mov	sl, r3
 80113da:	4693      	mov	fp, r2
 80113dc:	4650      	mov	r0, sl
 80113de:	4659      	mov	r1, fp
 80113e0:	f7fc f984 	bl	800d6ec <HAL_RCCEx_GetPeriphCLKFreq>
 80113e4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80113e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d021      	beq.n	8011430 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f0:	4a1a      	ldr	r2, [pc, #104]	; (801145c <UART_SetConfig+0x3d8>)
 80113f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113f6:	461a      	mov	r2, r3
 80113f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80113fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	085b      	lsrs	r3, r3, #1
 8011404:	441a      	add	r2, r3
 8011406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	fbb2 f3f3 	udiv	r3, r2, r3
 801140e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011412:	2b0f      	cmp	r3, #15
 8011414:	d909      	bls.n	801142a <UART_SetConfig+0x3a6>
 8011416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801141c:	d205      	bcs.n	801142a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011420:	b29a      	uxth	r2, r3
 8011422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	60da      	str	r2, [r3, #12]
 8011428:	e002      	b.n	8011430 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801142a:	2301      	movs	r3, #1
 801142c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011432:	2201      	movs	r2, #1
 8011434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143a:	2201      	movs	r2, #1
 801143c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	2200      	movs	r2, #0
 8011444:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2200      	movs	r2, #0
 801144a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801144c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011450:	4618      	mov	r0, r3
 8011452:	3750      	adds	r7, #80	; 0x50
 8011454:	46bd      	mov	sp, r7
 8011456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801145a:	bf00      	nop
 801145c:	080147ac 	.word	0x080147ac

08011460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011460:	b480      	push	{r7}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801146c:	f003 0308 	and.w	r3, r3, #8
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00a      	beq.n	801148a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	430a      	orrs	r2, r1
 8011488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801148e:	f003 0301 	and.w	r3, r3, #1
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00a      	beq.n	80114ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	430a      	orrs	r2, r1
 80114aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b0:	f003 0302 	and.w	r3, r3, #2
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00a      	beq.n	80114ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d2:	f003 0304 	and.w	r3, r3, #4
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00a      	beq.n	80114f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f4:	f003 0310 	and.w	r3, r3, #16
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00a      	beq.n	8011512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	430a      	orrs	r2, r1
 8011510:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011516:	f003 0320 	and.w	r3, r3, #32
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801153c:	2b00      	cmp	r3, #0
 801153e:	d01a      	beq.n	8011576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	430a      	orrs	r2, r1
 8011554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801155a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801155e:	d10a      	bne.n	8011576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	430a      	orrs	r2, r1
 8011574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00a      	beq.n	8011598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	430a      	orrs	r2, r1
 8011596:	605a      	str	r2, [r3, #4]
  }
}
 8011598:	bf00      	nop
 801159a:	370c      	adds	r7, #12
 801159c:	46bd      	mov	sp, r7
 801159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a2:	4770      	bx	lr

080115a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b098      	sub	sp, #96	; 0x60
 80115a8:	af02      	add	r7, sp, #8
 80115aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115b4:	f7f5 f966 	bl	8006884 <HAL_GetTick>
 80115b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f003 0308 	and.w	r3, r3, #8
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d12f      	bne.n	8011628 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115d0:	2200      	movs	r2, #0
 80115d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 f88e 	bl	80116f8 <UART_WaitOnFlagUntilTimeout>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d022      	beq.n	8011628 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ea:	e853 3f00 	ldrex	r3, [r3]
 80115ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80115f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115f6:	653b      	str	r3, [r7, #80]	; 0x50
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	461a      	mov	r2, r3
 80115fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011600:	647b      	str	r3, [r7, #68]	; 0x44
 8011602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011608:	e841 2300 	strex	r3, r2, [r1]
 801160c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1e6      	bne.n	80115e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2220      	movs	r2, #32
 8011618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011624:	2303      	movs	r3, #3
 8011626:	e063      	b.n	80116f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f003 0304 	and.w	r3, r3, #4
 8011632:	2b04      	cmp	r3, #4
 8011634:	d149      	bne.n	80116ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801163e:	2200      	movs	r2, #0
 8011640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 f857 	bl	80116f8 <UART_WaitOnFlagUntilTimeout>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d03c      	beq.n	80116ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011658:	e853 3f00 	ldrex	r3, [r3]
 801165c:	623b      	str	r3, [r7, #32]
   return(result);
 801165e:	6a3b      	ldr	r3, [r7, #32]
 8011660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	461a      	mov	r2, r3
 801166c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801166e:	633b      	str	r3, [r7, #48]	; 0x30
 8011670:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011676:	e841 2300 	strex	r3, r2, [r1]
 801167a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1e6      	bne.n	8011650 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	3308      	adds	r3, #8
 8011688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	e853 3f00 	ldrex	r3, [r3]
 8011690:	60fb      	str	r3, [r7, #12]
   return(result);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f023 0301 	bic.w	r3, r3, #1
 8011698:	64bb      	str	r3, [r7, #72]	; 0x48
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	3308      	adds	r3, #8
 80116a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116a2:	61fa      	str	r2, [r7, #28]
 80116a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a6:	69b9      	ldr	r1, [r7, #24]
 80116a8:	69fa      	ldr	r2, [r7, #28]
 80116aa:	e841 2300 	strex	r3, r2, [r1]
 80116ae:	617b      	str	r3, [r7, #20]
   return(result);
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e5      	bne.n	8011682 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2220      	movs	r2, #32
 80116ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116c6:	2303      	movs	r3, #3
 80116c8:	e012      	b.n	80116f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2220      	movs	r2, #32
 80116ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2220      	movs	r2, #32
 80116d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3758      	adds	r7, #88	; 0x58
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	4613      	mov	r3, r2
 8011706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011708:	e049      	b.n	801179e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011710:	d045      	beq.n	801179e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011712:	f7f5 f8b7 	bl	8006884 <HAL_GetTick>
 8011716:	4602      	mov	r2, r0
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	69ba      	ldr	r2, [r7, #24]
 801171e:	429a      	cmp	r2, r3
 8011720:	d302      	bcc.n	8011728 <UART_WaitOnFlagUntilTimeout+0x30>
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011728:	2303      	movs	r3, #3
 801172a:	e048      	b.n	80117be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f003 0304 	and.w	r3, r3, #4
 8011736:	2b00      	cmp	r3, #0
 8011738:	d031      	beq.n	801179e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	69db      	ldr	r3, [r3, #28]
 8011740:	f003 0308 	and.w	r3, r3, #8
 8011744:	2b08      	cmp	r3, #8
 8011746:	d110      	bne.n	801176a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2208      	movs	r2, #8
 801174e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f000 f838 	bl	80117c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2208      	movs	r2, #8
 801175a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2200      	movs	r2, #0
 8011762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	e029      	b.n	80117be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	69db      	ldr	r3, [r3, #28]
 8011770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011778:	d111      	bne.n	801179e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f000 f81e 	bl	80117c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2220      	movs	r2, #32
 801178e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801179a:	2303      	movs	r3, #3
 801179c:	e00f      	b.n	80117be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	69da      	ldr	r2, [r3, #28]
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	4013      	ands	r3, r2
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	bf0c      	ite	eq
 80117ae:	2301      	moveq	r3, #1
 80117b0:	2300      	movne	r3, #0
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	461a      	mov	r2, r3
 80117b6:	79fb      	ldrb	r3, [r7, #7]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d0a6      	beq.n	801170a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80117c6:	b480      	push	{r7}
 80117c8:	b095      	sub	sp, #84	; 0x54
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d6:	e853 3f00 	ldrex	r3, [r3]
 80117da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80117dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80117e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	461a      	mov	r2, r3
 80117ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ec:	643b      	str	r3, [r7, #64]	; 0x40
 80117ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117f4:	e841 2300 	strex	r3, r2, [r1]
 80117f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80117fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d1e6      	bne.n	80117ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3308      	adds	r3, #8
 8011806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	e853 3f00 	ldrex	r3, [r3]
 801180e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011816:	f023 0301 	bic.w	r3, r3, #1
 801181a:	64bb      	str	r3, [r7, #72]	; 0x48
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	3308      	adds	r3, #8
 8011822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801182a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801182c:	e841 2300 	strex	r3, r2, [r1]
 8011830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011834:	2b00      	cmp	r3, #0
 8011836:	d1e3      	bne.n	8011800 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801183c:	2b01      	cmp	r3, #1
 801183e:	d118      	bne.n	8011872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	e853 3f00 	ldrex	r3, [r3]
 801184c:	60bb      	str	r3, [r7, #8]
   return(result);
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	f023 0310 	bic.w	r3, r3, #16
 8011854:	647b      	str	r3, [r7, #68]	; 0x44
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801185e:	61bb      	str	r3, [r7, #24]
 8011860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011862:	6979      	ldr	r1, [r7, #20]
 8011864:	69ba      	ldr	r2, [r7, #24]
 8011866:	e841 2300 	strex	r3, r2, [r1]
 801186a:	613b      	str	r3, [r7, #16]
   return(result);
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1e6      	bne.n	8011840 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2220      	movs	r2, #32
 8011876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2200      	movs	r2, #0
 801187e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011886:	bf00      	nop
 8011888:	3754      	adds	r7, #84	; 0x54
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr

08011892 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b084      	sub	sp, #16
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801189e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f7ff fbd1 	bl	8011058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118b6:	bf00      	nop
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b088      	sub	sp, #32
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	e853 3f00 	ldrex	r3, [r3]
 80118d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118da:	61fb      	str	r3, [r7, #28]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	461a      	mov	r2, r3
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	61bb      	str	r3, [r7, #24]
 80118e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e8:	6979      	ldr	r1, [r7, #20]
 80118ea:	69ba      	ldr	r2, [r7, #24]
 80118ec:	e841 2300 	strex	r3, r2, [r1]
 80118f0:	613b      	str	r3, [r7, #16]
   return(result);
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1e6      	bne.n	80118c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2220      	movs	r2, #32
 80118fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff fb9c 	bl	8011044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801190c:	bf00      	nop
 801190e:	3720      	adds	r7, #32
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801191c:	bf00      	nop
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr

08011928 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011930:	bf00      	nop
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011944:	bf00      	nop
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801195e:	2b01      	cmp	r3, #1
 8011960:	d101      	bne.n	8011966 <HAL_UARTEx_DisableFifoMode+0x16>
 8011962:	2302      	movs	r3, #2
 8011964:	e027      	b.n	80119b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2201      	movs	r2, #1
 801196a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2224      	movs	r2, #36	; 0x24
 8011972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	f022 0201 	bic.w	r2, r2, #1
 801198c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011994:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2220      	movs	r2, #32
 80119a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr

080119c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b084      	sub	sp, #16
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
 80119ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d101      	bne.n	80119da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80119d6:	2302      	movs	r3, #2
 80119d8:	e02d      	b.n	8011a36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2201      	movs	r2, #1
 80119de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2224      	movs	r2, #36	; 0x24
 80119e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f022 0201 	bic.w	r2, r2, #1
 8011a00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	683a      	ldr	r2, [r7, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 f850 	bl	8011abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	68fa      	ldr	r2, [r7, #12]
 8011a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2220      	movs	r2, #32
 8011a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b084      	sub	sp, #16
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
 8011a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d101      	bne.n	8011a56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a52:	2302      	movs	r3, #2
 8011a54:	e02d      	b.n	8011ab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2224      	movs	r2, #36	; 0x24
 8011a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f022 0201 	bic.w	r2, r2, #1
 8011a7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	683a      	ldr	r2, [r7, #0]
 8011a8e:	430a      	orrs	r2, r1
 8011a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f812 	bl	8011abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2220      	movs	r2, #32
 8011aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ab0:	2300      	movs	r3, #0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
	...

08011abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d108      	bne.n	8011ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011adc:	e031      	b.n	8011b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ade:	2308      	movs	r3, #8
 8011ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ae2:	2308      	movs	r3, #8
 8011ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	0e5b      	lsrs	r3, r3, #25
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	f003 0307 	and.w	r3, r3, #7
 8011af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	0f5b      	lsrs	r3, r3, #29
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	f003 0307 	and.w	r3, r3, #7
 8011b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	7b3a      	ldrb	r2, [r7, #12]
 8011b0a:	4911      	ldr	r1, [pc, #68]	; (8011b50 <UARTEx_SetNbDataToProcess+0x94>)
 8011b0c:	5c8a      	ldrb	r2, [r1, r2]
 8011b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b12:	7b3a      	ldrb	r2, [r7, #12]
 8011b14:	490f      	ldr	r1, [pc, #60]	; (8011b54 <UARTEx_SetNbDataToProcess+0x98>)
 8011b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	7b7a      	ldrb	r2, [r7, #13]
 8011b28:	4909      	ldr	r1, [pc, #36]	; (8011b50 <UARTEx_SetNbDataToProcess+0x94>)
 8011b2a:	5c8a      	ldrb	r2, [r1, r2]
 8011b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b30:	7b7a      	ldrb	r2, [r7, #13]
 8011b32:	4908      	ldr	r1, [pc, #32]	; (8011b54 <UARTEx_SetNbDataToProcess+0x98>)
 8011b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011b42:	bf00      	nop
 8011b44:	3714      	adds	r7, #20
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	080147c4 	.word	0x080147c4
 8011b54:	080147cc 	.word	0x080147cc

08011b58 <MX_MEMS_Init>:
static void Magneto_Sensor_Handler(uint32_t Instance);
static void MX_IKS02A1_DataLogTerminal_Init(void);
static void MX_IKS02A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8011b5c:	f000 f808 	bl	8011b70 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8011b60:	bf00      	nop
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS02A1_DataLogTerminal_Process();
 8011b68:	f000 f918 	bl	8011d9c <MX_IKS02A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8011b6c:	bf00      	nop
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8011b70:	b5b0      	push	{r4, r5, r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8011b76:	2000      	movs	r0, #0
 8011b78:	f7f4 fb22 	bl	80061c0 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	2000      	movs	r0, #0
 8011b80:	f7f4 fb74 	bl	800626c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8011b84:	2000      	movs	r0, #0
 8011b86:	f7f4 fbcb 	bl	8006320 <BSP_PB_GetState>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	bf0c      	ite	eq
 8011b90:	2301      	moveq	r3, #1
 8011b92:	2300      	movne	r3, #0
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	461a      	mov	r2, r3
 8011b98:	4b70      	ldr	r3, [pc, #448]	; (8011d5c <MX_IKS02A1_DataLogTerminal_Init+0x1ec>)
 8011b9a:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f7f4 fc23 	bl	80063e8 <BSP_COM_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8011ba2:	2103      	movs	r1, #3
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	f7f3 fed7 	bl	8005958 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8011baa:	2102      	movs	r1, #2
 8011bac:	2001      	movs	r0, #1
 8011bae:	f7f3 fed3 	bl	8005958 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 8011bb2:	2104      	movs	r1, #4
 8011bb4:	2002      	movs	r0, #2
 8011bb6:	f7f3 fecf 	bl	8005958 <IKS02A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60fb      	str	r3, [r7, #12]
 8011bbe:	e0c3      	b.n	8011d48 <MX_IKS02A1_DataLogTerminal_Init+0x1d8>
  {
    IKS02A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	00db      	lsls	r3, r3, #3
 8011bc8:	1a9b      	subs	r3, r3, r2
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	4a64      	ldr	r2, [pc, #400]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011bce:	4413      	add	r3, r2
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	f7f3 ffbd 	bl	8005b50 <IKS02A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011bd6:	4962      	ldr	r1, [pc, #392]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011bd8:	68fa      	ldr	r2, [r7, #12]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	1a9b      	subs	r3, r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	440b      	add	r3, r1
 8011be4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011be6:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011be8:	495d      	ldr	r1, [pc, #372]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011bea:	68fa      	ldr	r2, [r7, #12]
 8011bec:	4613      	mov	r3, r2
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	1a9b      	subs	r3, r3, r2
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011bfa:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011bfc:	4958      	ldr	r1, [pc, #352]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	4613      	mov	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	1a9b      	subs	r3, r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	440b      	add	r3, r1
 8011c0a:	3302      	adds	r3, #2
 8011c0c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011c0e:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011c10:	4953      	ldr	r1, [pc, #332]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	4613      	mov	r3, r2
 8011c16:	00db      	lsls	r3, r3, #3
 8011c18:	1a9b      	subs	r3, r3, r2
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	440b      	add	r3, r1
 8011c1e:	3303      	adds	r3, #3
 8011c20:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011c22:	9303      	str	r3, [sp, #12]
 8011c24:	9502      	str	r5, [sp, #8]
 8011c26:	9401      	str	r4, [sp, #4]
 8011c28:	9000      	str	r0, [sp, #0]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	4a4d      	ldr	r2, [pc, #308]	; (8011d64 <MX_IKS02A1_DataLogTerminal_Init+0x1f4>)
 8011c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c32:	484d      	ldr	r0, [pc, #308]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011c34:	f000 fc8a 	bl	801254c <sniprintf>
    printf("%s", dataOut);
 8011c38:	494b      	ldr	r1, [pc, #300]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011c3a:	484c      	ldr	r0, [pc, #304]	; (8011d6c <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8011c3c:	f000 fc74 	bl	8012528 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8011c40:	4947      	ldr	r1, [pc, #284]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	4613      	mov	r3, r2
 8011c46:	00db      	lsls	r3, r3, #3
 8011c48:	1a9b      	subs	r3, r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	440b      	add	r3, r1
 8011c4e:	3314      	adds	r3, #20
 8011c50:	edd3 7a00 	vldr	s15, [r3]
 8011c54:	463b      	mov	r3, r7
 8011c56:	2103      	movs	r1, #3
 8011c58:	4618      	mov	r0, r3
 8011c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c5e:	f000 f8fb 	bl	8011e58 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8011c66:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011c68:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8011c6a:	493d      	ldr	r1, [pc, #244]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011c6c:	68fa      	ldr	r2, [r7, #12]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	00db      	lsls	r3, r3, #3
 8011c72:	1a9b      	subs	r3, r3, r2
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	440b      	add	r3, r1
 8011c78:	3308      	adds	r3, #8
 8011c7a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011c7c:	9301      	str	r3, [sp, #4]
 8011c7e:	9000      	str	r0, [sp, #0]
 8011c80:	4623      	mov	r3, r4
 8011c82:	4a3b      	ldr	r2, [pc, #236]	; (8011d70 <MX_IKS02A1_DataLogTerminal_Init+0x200>)
 8011c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c88:	4837      	ldr	r0, [pc, #220]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011c8a:	f000 fc5f 	bl	801254c <sniprintf>
    printf("%s", dataOut);
 8011c8e:	4936      	ldr	r1, [pc, #216]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011c90:	4836      	ldr	r0, [pc, #216]	; (8011d6c <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8011c92:	f000 fc49 	bl	8012528 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8011c96:	4932      	ldr	r1, [pc, #200]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011c98:	68fa      	ldr	r2, [r7, #12]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	00db      	lsls	r3, r3, #3
 8011c9e:	1a9b      	subs	r3, r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	3310      	adds	r3, #16
 8011ca6:	edd3 7a00 	vldr	s15, [r3]
 8011caa:	463b      	mov	r3, r7
 8011cac:	2103      	movs	r1, #3
 8011cae:	4618      	mov	r0, r3
 8011cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8011cb4:	f000 f8d0 	bl	8011e58 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8011cbc:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8011cbe:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8011cc0:	4927      	ldr	r1, [pc, #156]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	00db      	lsls	r3, r3, #3
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	440b      	add	r3, r1
 8011cce:	3304      	adds	r3, #4
 8011cd0:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8011cd2:	9301      	str	r3, [sp, #4]
 8011cd4:	9000      	str	r0, [sp, #0]
 8011cd6:	4623      	mov	r3, r4
 8011cd8:	4a26      	ldr	r2, [pc, #152]	; (8011d74 <MX_IKS02A1_DataLogTerminal_Init+0x204>)
 8011cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cde:	4822      	ldr	r0, [pc, #136]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011ce0:	f000 fc34 	bl	801254c <sniprintf>
    printf("%s", dataOut);
 8011ce4:	4920      	ldr	r1, [pc, #128]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011ce6:	4821      	ldr	r0, [pc, #132]	; (8011d6c <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8011ce8:	f000 fc1e 	bl	8012528 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8011cec:	491c      	ldr	r1, [pc, #112]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	00db      	lsls	r3, r3, #3
 8011cf4:	1a9b      	subs	r3, r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	3318      	adds	r3, #24
 8011cfc:	edd3 7a00 	vldr	s15, [r3]
 8011d00:	463b      	mov	r3, r7
 8011d02:	2103      	movs	r1, #3
 8011d04:	4618      	mov	r0, r3
 8011d06:	eeb0 0a67 	vmov.f32	s0, s15
 8011d0a:	f000 f8a5 	bl	8011e58 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011d12:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011d14:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011d16:	4912      	ldr	r1, [pc, #72]	; (8011d60 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	00db      	lsls	r3, r3, #3
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	440b      	add	r3, r1
 8011d24:	330c      	adds	r3, #12
 8011d26:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011d28:	9301      	str	r3, [sp, #4]
 8011d2a:	9000      	str	r0, [sp, #0]
 8011d2c:	4623      	mov	r3, r4
 8011d2e:	4a12      	ldr	r2, [pc, #72]	; (8011d78 <MX_IKS02A1_DataLogTerminal_Init+0x208>)
 8011d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d34:	480c      	ldr	r0, [pc, #48]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011d36:	f000 fc09 	bl	801254c <sniprintf>
    printf("%s", dataOut);
 8011d3a:	490b      	ldr	r1, [pc, #44]	; (8011d68 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8011d3c:	480b      	ldr	r0, [pc, #44]	; (8011d6c <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8011d3e:	f000 fbf3 	bl	8012528 <iprintf>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	3301      	adds	r3, #1
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2b02      	cmp	r3, #2
 8011d4c:	f67f af38 	bls.w	8011bc0 <MX_IKS02A1_DataLogTerminal_Init+0x50>
  }
}
 8011d50:	bf00      	nop
 8011d52:	bf00      	nop
 8011d54:	3710      	adds	r7, #16
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bdb0      	pop	{r4, r5, r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	20000678 	.word	0x20000678
 8011d60:	20000524 	.word	0x20000524
 8011d64:	08014518 	.word	0x08014518
 8011d68:	20000578 	.word	0x20000578
 8011d6c:	0801458c 	.word	0x0801458c
 8011d70:	08014590 	.word	0x08014590
 8011d74:	080145bc 	.word	0x080145bc
 8011d78:	080145ec 	.word	0x080145ec

08011d7c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	4603      	mov	r3, r0
 8011d84:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8011d86:	4b04      	ldr	r3, [pc, #16]	; (8011d98 <BSP_PB_Callback+0x1c>)
 8011d88:	2201      	movs	r2, #1
 8011d8a:	701a      	strb	r2, [r3, #0]
}
 8011d8c:	bf00      	nop
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	20000520 	.word	0x20000520

08011d9c <MX_IKS02A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Process(void)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 8011da2:	4b2a      	ldr	r3, [pc, #168]	; (8011e4c <MX_IKS02A1_DataLogTerminal_Process+0xb0>)
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d011      	beq.n	8011dd0 <MX_IKS02A1_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 8011dac:	2032      	movs	r0, #50	; 0x32
 8011dae:	f7f4 fd75 	bl	800689c <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 8011db2:	bf00      	nop
 8011db4:	2000      	movs	r0, #0
 8011db6:	f7f4 fab3 	bl	8006320 <BSP_PB_GetState>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	4b24      	ldr	r3, [pc, #144]	; (8011e50 <MX_IKS02A1_DataLogTerminal_Process+0xb4>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d0f7      	beq.n	8011db4 <MX_IKS02A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8011dc4:	2032      	movs	r0, #50	; 0x32
 8011dc6:	f7f4 fd69 	bl	800689c <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8011dca:	4b20      	ldr	r3, [pc, #128]	; (8011e4c <MX_IKS02A1_DataLogTerminal_Process+0xb0>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	607b      	str	r3, [r7, #4]
 8011dd4:	e02e      	b.n	8011e34 <MX_IKS02A1_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 8011dd6:	491f      	ldr	r1, [pc, #124]	; (8011e54 <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	4613      	mov	r3, r2
 8011ddc:	00db      	lsls	r3, r3, #3
 8011dde:	1a9b      	subs	r3, r3, r2
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	440b      	add	r3, r1
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d003      	beq.n	8011df2 <MX_IKS02A1_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f000 f8bd 	bl	8011f6c <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8011df2:	4918      	ldr	r1, [pc, #96]	; (8011e54 <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	4613      	mov	r3, r2
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	1a9b      	subs	r3, r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	440b      	add	r3, r1
 8011e00:	3301      	adds	r3, #1
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d003      	beq.n	8011e10 <MX_IKS02A1_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f000 f962 	bl	80120d4 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8011e10:	4910      	ldr	r1, [pc, #64]	; (8011e54 <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	4613      	mov	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	1a9b      	subs	r3, r3, r2
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	440b      	add	r3, r1
 8011e1e:	3302      	adds	r3, #2
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <MX_IKS02A1_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f000 fa07 	bl	801223c <Magneto_Sensor_Handler>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3301      	adds	r3, #1
 8011e32:	607b      	str	r3, [r7, #4]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d9cd      	bls.n	8011dd6 <MX_IKS02A1_DataLogTerminal_Process+0x3a>
    }
  }

  HAL_Delay( 1000 );
 8011e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011e3e:	f7f4 fd2d 	bl	800689c <HAL_Delay>
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	20000520 	.word	0x20000520
 8011e50:	20000678 	.word	0x20000678
 8011e54:	20000524 	.word	0x20000524

08011e58 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8011e58:	b5b0      	push	{r4, r5, r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8011e62:	60b8      	str	r0, [r7, #8]
 8011e64:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 8011e66:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e72:	db03      	blt.n	8011e7c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2200      	movs	r2, #0
 8011e78:	701a      	strb	r2, [r3, #0]
 8011e7a:	e008      	b.n	8011e8e <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	2201      	movs	r2, #1
 8011e80:	701a      	strb	r2, [r3, #0]
    in = -in;
 8011e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e86:	eef1 7a67 	vneg.f32	s15, s15
 8011e8a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7ee fb62 	bl	8000558 <__aeabi_f2d>
 8011e94:	4604      	mov	r4, r0
 8011e96:	460d      	mov	r5, r1
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ee fb4b 	bl	8000534 <__aeabi_i2d>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	ec43 2b11 	vmov	d1, r2, r3
 8011ea6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8011f60 <floatToInt+0x108>
 8011eaa:	f001 fbab 	bl	8013604 <pow>
 8011eae:	ec53 2b10 	vmov	r2, r3, d0
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	492c      	ldr	r1, [pc, #176]	; (8011f68 <floatToInt+0x110>)
 8011eb8:	f7ee fcd0 	bl	800085c <__aeabi_ddiv>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	f7ee f9ea 	bl	800029c <__adddf3>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4610      	mov	r0, r2
 8011ece:	4619      	mov	r1, r3
 8011ed0:	f7ee fe72 	bl	8000bb8 <__aeabi_d2f>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8011ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8011edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ee0:	ee17 2a90 	vmov	r2, s15
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	ee07 3a90 	vmov	s15, r3
 8011ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ef4:	ed97 7a03 	vldr	s14, [r7, #12]
 8011ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011efc:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f7ee fb29 	bl	8000558 <__aeabi_f2d>
 8011f06:	4604      	mov	r4, r0
 8011f08:	460d      	mov	r5, r1
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f7ee fb12 	bl	8000534 <__aeabi_i2d>
 8011f10:	4602      	mov	r2, r0
 8011f12:	460b      	mov	r3, r1
 8011f14:	ec43 2b11 	vmov	d1, r2, r3
 8011f18:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8011f60 <floatToInt+0x108>
 8011f1c:	f001 fb72 	bl	8013604 <pow>
 8011f20:	ec53 2b10 	vmov	r2, r3, d0
 8011f24:	4620      	mov	r0, r4
 8011f26:	4629      	mov	r1, r5
 8011f28:	f7ee fb6e 	bl	8000608 <__aeabi_dmul>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	ec43 2b17 	vmov	d7, r2, r3
 8011f34:	eeb0 0a47 	vmov.f32	s0, s14
 8011f38:	eef0 0a67 	vmov.f32	s1, s15
 8011f3c:	f001 fbde 	bl	80136fc <trunc>
 8011f40:	ec53 2b10 	vmov	r2, r3, d0
 8011f44:	4610      	mov	r0, r2
 8011f46:	4619      	mov	r1, r3
 8011f48:	f7ee fe0e 	bl	8000b68 <__aeabi_d2iz>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	461a      	mov	r2, r3
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	609a      	str	r2, [r3, #8]
}
 8011f54:	bf00      	nop
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8011f5c:	f3af 8000 	nop.w
 8011f60:	00000000 	.word	0x00000000
 8011f64:	40240000 	.word	0x40240000
 8011f68:	3fe00000 	.word	0x3fe00000

08011f6c <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8011f6c:	b5b0      	push	{r4, r5, r7, lr}
 8011f6e:	b092      	sub	sp, #72	; 0x48
 8011f70:	af06      	add	r7, sp, #24
 8011f72:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8011f74:	f107 031c 	add.w	r3, r7, #28
 8011f78:	461a      	mov	r2, r3
 8011f7a:	2102      	movs	r1, #2
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7f3 fe3b 	bl	8005bf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d007      	beq.n	8011f98 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	4a47      	ldr	r2, [pc, #284]	; (80120a8 <Accelero_Sensor_Handler+0x13c>)
 8011f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011f90:	4846      	ldr	r0, [pc, #280]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8011f92:	f000 fadb 	bl	801254c <sniprintf>
 8011f96:	e011      	b.n	8011fbc <Accelero_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011f98:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011f9a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011f9c:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011f9e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011fa0:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011fa2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011fa4:	9404      	str	r4, [sp, #16]
 8011fa6:	9003      	str	r0, [sp, #12]
 8011fa8:	9102      	str	r1, [sp, #8]
 8011faa:	9201      	str	r2, [sp, #4]
 8011fac:	9300      	str	r3, [sp, #0]
 8011fae:	462b      	mov	r3, r5
 8011fb0:	4a3f      	ldr	r2, [pc, #252]	; (80120b0 <Accelero_Sensor_Handler+0x144>)
 8011fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011fb6:	483d      	ldr	r0, [pc, #244]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8011fb8:	f000 fac8 	bl	801254c <sniprintf>
  }

  printf("%s", dataOut);
 8011fbc:	493b      	ldr	r1, [pc, #236]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8011fbe:	483d      	ldr	r0, [pc, #244]	; (80120b4 <Accelero_Sensor_Handler+0x148>)
 8011fc0:	f000 fab2 	bl	8012528 <iprintf>

  if (verbose == 1)
 8011fc4:	4b3c      	ldr	r3, [pc, #240]	; (80120b8 <Accelero_Sensor_Handler+0x14c>)
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d168      	bne.n	801209e <Accelero_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011fcc:	f107 030f 	add.w	r3, r7, #15
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7f3 fde6 	bl	8005ba4 <IKS02A1_MOTION_SENSOR_ReadID>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d007      	beq.n	8011fee <Accelero_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	4a36      	ldr	r2, [pc, #216]	; (80120bc <Accelero_Sensor_Handler+0x150>)
 8011fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011fe6:	4831      	ldr	r0, [pc, #196]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8011fe8:	f000 fab0 	bl	801254c <sniprintf>
 8011fec:	e008      	b.n	8012000 <Accelero_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	7bfa      	ldrb	r2, [r7, #15]
 8011ff2:	9200      	str	r2, [sp, #0]
 8011ff4:	4a32      	ldr	r2, [pc, #200]	; (80120c0 <Accelero_Sensor_Handler+0x154>)
 8011ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011ffa:	482c      	ldr	r0, [pc, #176]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8011ffc:	f000 faa6 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012000:	492a      	ldr	r1, [pc, #168]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012002:	482c      	ldr	r0, [pc, #176]	; (80120b4 <Accelero_Sensor_Handler+0x148>)
 8012004:	f000 fa90 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8012008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801200c:	461a      	mov	r2, r3
 801200e:	2102      	movs	r1, #2
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7f3 fe35 	bl	8005c80 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 8012016:	4603      	mov	r3, r0
 8012018:	2b00      	cmp	r3, #0
 801201a:	d007      	beq.n	801202c <Accelero_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	4a29      	ldr	r2, [pc, #164]	; (80120c4 <Accelero_Sensor_Handler+0x158>)
 8012020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012024:	4821      	ldr	r0, [pc, #132]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012026:	f000 fa91 	bl	801254c <sniprintf>
 801202a:	e014      	b.n	8012056 <Accelero_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801202c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012030:	f107 0310 	add.w	r3, r7, #16
 8012034:	2103      	movs	r1, #3
 8012036:	4618      	mov	r0, r3
 8012038:	eeb0 0a67 	vmov.f32	s0, s15
 801203c:	f7ff ff0c 	bl	8011e58 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8012044:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012046:	9101      	str	r1, [sp, #4]
 8012048:	9200      	str	r2, [sp, #0]
 801204a:	4a1f      	ldr	r2, [pc, #124]	; (80120c8 <Accelero_Sensor_Handler+0x15c>)
 801204c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012050:	4816      	ldr	r0, [pc, #88]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012052:	f000 fa7b 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012056:	4915      	ldr	r1, [pc, #84]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012058:	4816      	ldr	r0, [pc, #88]	; (80120b4 <Accelero_Sensor_Handler+0x148>)
 801205a:	f000 fa65 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 801205e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012062:	461a      	mov	r2, r3
 8012064:	2102      	movs	r1, #2
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7f3 fe4e 	bl	8005d08 <IKS02A1_MOTION_SENSOR_GetFullScale>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d007      	beq.n	8012082 <Accelero_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	4a15      	ldr	r2, [pc, #84]	; (80120cc <Accelero_Sensor_Handler+0x160>)
 8012076:	f44f 7180 	mov.w	r1, #256	; 0x100
 801207a:	480c      	ldr	r0, [pc, #48]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 801207c:	f000 fa66 	bl	801254c <sniprintf>
 8012080:	e009      	b.n	8012096 <Accelero_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	4613      	mov	r3, r2
 801208a:	4a11      	ldr	r2, [pc, #68]	; (80120d0 <Accelero_Sensor_Handler+0x164>)
 801208c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012090:	4806      	ldr	r0, [pc, #24]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012092:	f000 fa5b 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012096:	4905      	ldr	r1, [pc, #20]	; (80120ac <Accelero_Sensor_Handler+0x140>)
 8012098:	4806      	ldr	r0, [pc, #24]	; (80120b4 <Accelero_Sensor_Handler+0x148>)
 801209a:	f000 fa45 	bl	8012528 <iprintf>
  }
}
 801209e:	bf00      	nop
 80120a0:	3730      	adds	r7, #48	; 0x30
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bdb0      	pop	{r4, r5, r7, pc}
 80120a6:	bf00      	nop
 80120a8:	08014618 	.word	0x08014618
 80120ac:	20000578 	.word	0x20000578
 80120b0:	0801462c 	.word	0x0801462c
 80120b4:	0801458c 	.word	0x0801458c
 80120b8:	200000f1 	.word	0x200000f1
 80120bc:	0801465c 	.word	0x0801465c
 80120c0:	08014670 	.word	0x08014670
 80120c4:	08014684 	.word	0x08014684
 80120c8:	08014698 	.word	0x08014698
 80120cc:	080146b0 	.word	0x080146b0
 80120d0:	080146c0 	.word	0x080146c0

080120d4 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 80120d4:	b5b0      	push	{r4, r5, r7, lr}
 80120d6:	b092      	sub	sp, #72	; 0x48
 80120d8:	af06      	add	r7, sp, #24
 80120da:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 80120dc:	f107 031c 	add.w	r3, r7, #28
 80120e0:	461a      	mov	r2, r3
 80120e2:	2101      	movs	r1, #1
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7f3 fd87 	bl	8005bf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 80120ea:	4603      	mov	r3, r0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d007      	beq.n	8012100 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4a47      	ldr	r2, [pc, #284]	; (8012210 <Gyro_Sensor_Handler+0x13c>)
 80120f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80120f8:	4846      	ldr	r0, [pc, #280]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 80120fa:	f000 fa27 	bl	801254c <sniprintf>
 80120fe:	e011      	b.n	8012124 <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8012100:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8012102:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8012104:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8012106:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8012108:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 801210a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 801210c:	9404      	str	r4, [sp, #16]
 801210e:	9003      	str	r0, [sp, #12]
 8012110:	9102      	str	r1, [sp, #8]
 8012112:	9201      	str	r2, [sp, #4]
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	462b      	mov	r3, r5
 8012118:	4a3f      	ldr	r2, [pc, #252]	; (8012218 <Gyro_Sensor_Handler+0x144>)
 801211a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801211e:	483d      	ldr	r0, [pc, #244]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 8012120:	f000 fa14 	bl	801254c <sniprintf>
  }

  printf("%s", dataOut);
 8012124:	493b      	ldr	r1, [pc, #236]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 8012126:	483d      	ldr	r0, [pc, #244]	; (801221c <Gyro_Sensor_Handler+0x148>)
 8012128:	f000 f9fe 	bl	8012528 <iprintf>

  if (verbose == 1)
 801212c:	4b3c      	ldr	r3, [pc, #240]	; (8012220 <Gyro_Sensor_Handler+0x14c>)
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d168      	bne.n	8012206 <Gyro_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8012134:	f107 030f 	add.w	r3, r7, #15
 8012138:	4619      	mov	r1, r3
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7f3 fd32 	bl	8005ba4 <IKS02A1_MOTION_SENSOR_ReadID>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d007      	beq.n	8012156 <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4a36      	ldr	r2, [pc, #216]	; (8012224 <Gyro_Sensor_Handler+0x150>)
 801214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801214e:	4831      	ldr	r0, [pc, #196]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 8012150:	f000 f9fc 	bl	801254c <sniprintf>
 8012154:	e008      	b.n	8012168 <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	7bfa      	ldrb	r2, [r7, #15]
 801215a:	9200      	str	r2, [sp, #0]
 801215c:	4a32      	ldr	r2, [pc, #200]	; (8012228 <Gyro_Sensor_Handler+0x154>)
 801215e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012162:	482c      	ldr	r0, [pc, #176]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 8012164:	f000 f9f2 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012168:	492a      	ldr	r1, [pc, #168]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 801216a:	482c      	ldr	r0, [pc, #176]	; (801221c <Gyro_Sensor_Handler+0x148>)
 801216c:	f000 f9dc 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8012170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012174:	461a      	mov	r2, r3
 8012176:	2101      	movs	r1, #1
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f7f3 fd81 	bl	8005c80 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d007      	beq.n	8012194 <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	4a29      	ldr	r2, [pc, #164]	; (801222c <Gyro_Sensor_Handler+0x158>)
 8012188:	f44f 7180 	mov.w	r1, #256	; 0x100
 801218c:	4821      	ldr	r0, [pc, #132]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 801218e:	f000 f9dd 	bl	801254c <sniprintf>
 8012192:	e014      	b.n	80121be <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8012194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012198:	f107 0310 	add.w	r3, r7, #16
 801219c:	2103      	movs	r1, #3
 801219e:	4618      	mov	r0, r3
 80121a0:	eeb0 0a67 	vmov.f32	s0, s15
 80121a4:	f7ff fe58 	bl	8011e58 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 80121ac:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80121ae:	9101      	str	r1, [sp, #4]
 80121b0:	9200      	str	r2, [sp, #0]
 80121b2:	4a1f      	ldr	r2, [pc, #124]	; (8012230 <Gyro_Sensor_Handler+0x15c>)
 80121b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80121b8:	4816      	ldr	r0, [pc, #88]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 80121ba:	f000 f9c7 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 80121be:	4915      	ldr	r1, [pc, #84]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 80121c0:	4816      	ldr	r0, [pc, #88]	; (801221c <Gyro_Sensor_Handler+0x148>)
 80121c2:	f000 f9b1 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 80121c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80121ca:	461a      	mov	r2, r3
 80121cc:	2101      	movs	r1, #1
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7f3 fd9a 	bl	8005d08 <IKS02A1_MOTION_SENSOR_GetFullScale>
 80121d4:	4603      	mov	r3, r0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d007      	beq.n	80121ea <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4a15      	ldr	r2, [pc, #84]	; (8012234 <Gyro_Sensor_Handler+0x160>)
 80121de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80121e2:	480c      	ldr	r0, [pc, #48]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 80121e4:	f000 f9b2 	bl	801254c <sniprintf>
 80121e8:	e009      	b.n	80121fe <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	4613      	mov	r3, r2
 80121f2:	4a11      	ldr	r2, [pc, #68]	; (8012238 <Gyro_Sensor_Handler+0x164>)
 80121f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80121f8:	4806      	ldr	r0, [pc, #24]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 80121fa:	f000 f9a7 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 80121fe:	4905      	ldr	r1, [pc, #20]	; (8012214 <Gyro_Sensor_Handler+0x140>)
 8012200:	4806      	ldr	r0, [pc, #24]	; (801221c <Gyro_Sensor_Handler+0x148>)
 8012202:	f000 f991 	bl	8012528 <iprintf>
  }
}
 8012206:	bf00      	nop
 8012208:	3730      	adds	r7, #48	; 0x30
 801220a:	46bd      	mov	sp, r7
 801220c:	bdb0      	pop	{r4, r5, r7, pc}
 801220e:	bf00      	nop
 8012210:	080146d0 	.word	0x080146d0
 8012214:	20000578 	.word	0x20000578
 8012218:	080146e4 	.word	0x080146e4
 801221c:	0801458c 	.word	0x0801458c
 8012220:	200000f1 	.word	0x200000f1
 8012224:	0801465c 	.word	0x0801465c
 8012228:	08014670 	.word	0x08014670
 801222c:	08014684 	.word	0x08014684
 8012230:	08014698 	.word	0x08014698
 8012234:	080146b0 	.word	0x080146b0
 8012238:	08014714 	.word	0x08014714

0801223c <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 801223c:	b5b0      	push	{r4, r5, r7, lr}
 801223e:	b092      	sub	sp, #72	; 0x48
 8012240:	af06      	add	r7, sp, #24
 8012242:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8012244:	f107 031c 	add.w	r3, r7, #28
 8012248:	461a      	mov	r2, r3
 801224a:	2104      	movs	r1, #4
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7f3 fcd3 	bl	8005bf8 <IKS02A1_MOTION_SENSOR_GetAxes>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d007      	beq.n	8012268 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	4a47      	ldr	r2, [pc, #284]	; (8012378 <Magneto_Sensor_Handler+0x13c>)
 801225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012260:	4846      	ldr	r0, [pc, #280]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012262:	f000 f973 	bl	801254c <sniprintf>
 8012266:	e011      	b.n	801228c <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8012268:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 801226a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 801226c:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 801226e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8012270:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8012272:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8012274:	9404      	str	r4, [sp, #16]
 8012276:	9003      	str	r0, [sp, #12]
 8012278:	9102      	str	r1, [sp, #8]
 801227a:	9201      	str	r2, [sp, #4]
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	462b      	mov	r3, r5
 8012280:	4a3f      	ldr	r2, [pc, #252]	; (8012380 <Magneto_Sensor_Handler+0x144>)
 8012282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012286:	483d      	ldr	r0, [pc, #244]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012288:	f000 f960 	bl	801254c <sniprintf>
  }

  printf("%s", dataOut);
 801228c:	493b      	ldr	r1, [pc, #236]	; (801237c <Magneto_Sensor_Handler+0x140>)
 801228e:	483d      	ldr	r0, [pc, #244]	; (8012384 <Magneto_Sensor_Handler+0x148>)
 8012290:	f000 f94a 	bl	8012528 <iprintf>

  if (verbose == 1)
 8012294:	4b3c      	ldr	r3, [pc, #240]	; (8012388 <Magneto_Sensor_Handler+0x14c>)
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	2b01      	cmp	r3, #1
 801229a:	d168      	bne.n	801236e <Magneto_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 801229c:	f107 030f 	add.w	r3, r7, #15
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f3 fc7e 	bl	8005ba4 <IKS02A1_MOTION_SENSOR_ReadID>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d007      	beq.n	80122be <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4a36      	ldr	r2, [pc, #216]	; (801238c <Magneto_Sensor_Handler+0x150>)
 80122b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80122b6:	4831      	ldr	r0, [pc, #196]	; (801237c <Magneto_Sensor_Handler+0x140>)
 80122b8:	f000 f948 	bl	801254c <sniprintf>
 80122bc:	e008      	b.n	80122d0 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	7bfa      	ldrb	r2, [r7, #15]
 80122c2:	9200      	str	r2, [sp, #0]
 80122c4:	4a32      	ldr	r2, [pc, #200]	; (8012390 <Magneto_Sensor_Handler+0x154>)
 80122c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80122ca:	482c      	ldr	r0, [pc, #176]	; (801237c <Magneto_Sensor_Handler+0x140>)
 80122cc:	f000 f93e 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 80122d0:	492a      	ldr	r1, [pc, #168]	; (801237c <Magneto_Sensor_Handler+0x140>)
 80122d2:	482c      	ldr	r0, [pc, #176]	; (8012384 <Magneto_Sensor_Handler+0x148>)
 80122d4:	f000 f928 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 80122d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80122dc:	461a      	mov	r2, r3
 80122de:	2104      	movs	r1, #4
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7f3 fccd 	bl	8005c80 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d007      	beq.n	80122fc <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	4a29      	ldr	r2, [pc, #164]	; (8012394 <Magneto_Sensor_Handler+0x158>)
 80122f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80122f4:	4821      	ldr	r0, [pc, #132]	; (801237c <Magneto_Sensor_Handler+0x140>)
 80122f6:	f000 f929 	bl	801254c <sniprintf>
 80122fa:	e014      	b.n	8012326 <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80122fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012300:	f107 0310 	add.w	r3, r7, #16
 8012304:	2103      	movs	r1, #3
 8012306:	4618      	mov	r0, r3
 8012308:	eeb0 0a67 	vmov.f32	s0, s15
 801230c:	f7ff fda4 	bl	8011e58 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8012314:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012316:	9101      	str	r1, [sp, #4]
 8012318:	9200      	str	r2, [sp, #0]
 801231a:	4a1f      	ldr	r2, [pc, #124]	; (8012398 <Magneto_Sensor_Handler+0x15c>)
 801231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012320:	4816      	ldr	r0, [pc, #88]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012322:	f000 f913 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012326:	4915      	ldr	r1, [pc, #84]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012328:	4816      	ldr	r0, [pc, #88]	; (8012384 <Magneto_Sensor_Handler+0x148>)
 801232a:	f000 f8fd 	bl	8012528 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 801232e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012332:	461a      	mov	r2, r3
 8012334:	2104      	movs	r1, #4
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7f3 fce6 	bl	8005d08 <IKS02A1_MOTION_SENSOR_GetFullScale>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d007      	beq.n	8012352 <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4a15      	ldr	r2, [pc, #84]	; (801239c <Magneto_Sensor_Handler+0x160>)
 8012346:	f44f 7180 	mov.w	r1, #256	; 0x100
 801234a:	480c      	ldr	r0, [pc, #48]	; (801237c <Magneto_Sensor_Handler+0x140>)
 801234c:	f000 f8fe 	bl	801254c <sniprintf>
 8012350:	e009      	b.n	8012366 <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4613      	mov	r3, r2
 801235a:	4a11      	ldr	r2, [pc, #68]	; (80123a0 <Magneto_Sensor_Handler+0x164>)
 801235c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012360:	4806      	ldr	r0, [pc, #24]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012362:	f000 f8f3 	bl	801254c <sniprintf>
    }

    printf("%s", dataOut);
 8012366:	4905      	ldr	r1, [pc, #20]	; (801237c <Magneto_Sensor_Handler+0x140>)
 8012368:	4806      	ldr	r0, [pc, #24]	; (8012384 <Magneto_Sensor_Handler+0x148>)
 801236a:	f000 f8dd 	bl	8012528 <iprintf>
  }
}
 801236e:	bf00      	nop
 8012370:	3730      	adds	r7, #48	; 0x30
 8012372:	46bd      	mov	sp, r7
 8012374:	bdb0      	pop	{r4, r5, r7, pc}
 8012376:	bf00      	nop
 8012378:	08014728 	.word	0x08014728
 801237c:	20000578 	.word	0x20000578
 8012380:	0801473c 	.word	0x0801473c
 8012384:	0801458c 	.word	0x0801458c
 8012388:	200000f1 	.word	0x200000f1
 801238c:	0801465c 	.word	0x0801465c
 8012390:	08014670 	.word	0x08014670
 8012394:	08014684 	.word	0x08014684
 8012398:	08014698 	.word	0x08014698
 801239c:	080146b0 	.word	0x080146b0
 80123a0:	0801476c 	.word	0x0801476c

080123a4 <std>:
 80123a4:	2300      	movs	r3, #0
 80123a6:	b510      	push	{r4, lr}
 80123a8:	4604      	mov	r4, r0
 80123aa:	6083      	str	r3, [r0, #8]
 80123ac:	8181      	strh	r1, [r0, #12]
 80123ae:	4619      	mov	r1, r3
 80123b0:	6643      	str	r3, [r0, #100]	; 0x64
 80123b2:	81c2      	strh	r2, [r0, #14]
 80123b4:	2208      	movs	r2, #8
 80123b6:	6183      	str	r3, [r0, #24]
 80123b8:	e9c0 3300 	strd	r3, r3, [r0]
 80123bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123c0:	305c      	adds	r0, #92	; 0x5c
 80123c2:	f000 f93a 	bl	801263a <memset>
 80123c6:	4b0d      	ldr	r3, [pc, #52]	; (80123fc <std+0x58>)
 80123c8:	6224      	str	r4, [r4, #32]
 80123ca:	6263      	str	r3, [r4, #36]	; 0x24
 80123cc:	4b0c      	ldr	r3, [pc, #48]	; (8012400 <std+0x5c>)
 80123ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80123d0:	4b0c      	ldr	r3, [pc, #48]	; (8012404 <std+0x60>)
 80123d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123d4:	4b0c      	ldr	r3, [pc, #48]	; (8012408 <std+0x64>)
 80123d6:	6323      	str	r3, [r4, #48]	; 0x30
 80123d8:	4b0c      	ldr	r3, [pc, #48]	; (801240c <std+0x68>)
 80123da:	429c      	cmp	r4, r3
 80123dc:	d006      	beq.n	80123ec <std+0x48>
 80123de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80123e2:	4294      	cmp	r4, r2
 80123e4:	d002      	beq.n	80123ec <std+0x48>
 80123e6:	33d0      	adds	r3, #208	; 0xd0
 80123e8:	429c      	cmp	r4, r3
 80123ea:	d105      	bne.n	80123f8 <std+0x54>
 80123ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123f4:	f000 b99a 	b.w	801272c <__retarget_lock_init_recursive>
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	bf00      	nop
 80123fc:	080125b5 	.word	0x080125b5
 8012400:	080125d7 	.word	0x080125d7
 8012404:	0801260f 	.word	0x0801260f
 8012408:	08012633 	.word	0x08012633
 801240c:	2000067c 	.word	0x2000067c

08012410 <stdio_exit_handler>:
 8012410:	4a02      	ldr	r2, [pc, #8]	; (801241c <stdio_exit_handler+0xc>)
 8012412:	4903      	ldr	r1, [pc, #12]	; (8012420 <stdio_exit_handler+0x10>)
 8012414:	4803      	ldr	r0, [pc, #12]	; (8012424 <stdio_exit_handler+0x14>)
 8012416:	f000 b869 	b.w	80124ec <_fwalk_sglue>
 801241a:	bf00      	nop
 801241c:	200000f4 	.word	0x200000f4
 8012420:	08013289 	.word	0x08013289
 8012424:	20000100 	.word	0x20000100

08012428 <cleanup_stdio>:
 8012428:	6841      	ldr	r1, [r0, #4]
 801242a:	4b0c      	ldr	r3, [pc, #48]	; (801245c <cleanup_stdio+0x34>)
 801242c:	4299      	cmp	r1, r3
 801242e:	b510      	push	{r4, lr}
 8012430:	4604      	mov	r4, r0
 8012432:	d001      	beq.n	8012438 <cleanup_stdio+0x10>
 8012434:	f000 ff28 	bl	8013288 <_fflush_r>
 8012438:	68a1      	ldr	r1, [r4, #8]
 801243a:	4b09      	ldr	r3, [pc, #36]	; (8012460 <cleanup_stdio+0x38>)
 801243c:	4299      	cmp	r1, r3
 801243e:	d002      	beq.n	8012446 <cleanup_stdio+0x1e>
 8012440:	4620      	mov	r0, r4
 8012442:	f000 ff21 	bl	8013288 <_fflush_r>
 8012446:	68e1      	ldr	r1, [r4, #12]
 8012448:	4b06      	ldr	r3, [pc, #24]	; (8012464 <cleanup_stdio+0x3c>)
 801244a:	4299      	cmp	r1, r3
 801244c:	d004      	beq.n	8012458 <cleanup_stdio+0x30>
 801244e:	4620      	mov	r0, r4
 8012450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012454:	f000 bf18 	b.w	8013288 <_fflush_r>
 8012458:	bd10      	pop	{r4, pc}
 801245a:	bf00      	nop
 801245c:	2000067c 	.word	0x2000067c
 8012460:	200006e4 	.word	0x200006e4
 8012464:	2000074c 	.word	0x2000074c

08012468 <global_stdio_init.part.0>:
 8012468:	b510      	push	{r4, lr}
 801246a:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <global_stdio_init.part.0+0x30>)
 801246c:	2104      	movs	r1, #4
 801246e:	4c0b      	ldr	r4, [pc, #44]	; (801249c <global_stdio_init.part.0+0x34>)
 8012470:	4a0b      	ldr	r2, [pc, #44]	; (80124a0 <global_stdio_init.part.0+0x38>)
 8012472:	4620      	mov	r0, r4
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	2200      	movs	r2, #0
 8012478:	f7ff ff94 	bl	80123a4 <std>
 801247c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012480:	2201      	movs	r2, #1
 8012482:	2109      	movs	r1, #9
 8012484:	f7ff ff8e 	bl	80123a4 <std>
 8012488:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801248c:	2202      	movs	r2, #2
 801248e:	2112      	movs	r1, #18
 8012490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012494:	f7ff bf86 	b.w	80123a4 <std>
 8012498:	200007b4 	.word	0x200007b4
 801249c:	2000067c 	.word	0x2000067c
 80124a0:	08012411 	.word	0x08012411

080124a4 <__sfp_lock_acquire>:
 80124a4:	4801      	ldr	r0, [pc, #4]	; (80124ac <__sfp_lock_acquire+0x8>)
 80124a6:	f000 b942 	b.w	801272e <__retarget_lock_acquire_recursive>
 80124aa:	bf00      	nop
 80124ac:	200007bd 	.word	0x200007bd

080124b0 <__sfp_lock_release>:
 80124b0:	4801      	ldr	r0, [pc, #4]	; (80124b8 <__sfp_lock_release+0x8>)
 80124b2:	f000 b93d 	b.w	8012730 <__retarget_lock_release_recursive>
 80124b6:	bf00      	nop
 80124b8:	200007bd 	.word	0x200007bd

080124bc <__sinit>:
 80124bc:	b510      	push	{r4, lr}
 80124be:	4604      	mov	r4, r0
 80124c0:	f7ff fff0 	bl	80124a4 <__sfp_lock_acquire>
 80124c4:	6a23      	ldr	r3, [r4, #32]
 80124c6:	b11b      	cbz	r3, 80124d0 <__sinit+0x14>
 80124c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124cc:	f7ff bff0 	b.w	80124b0 <__sfp_lock_release>
 80124d0:	4b04      	ldr	r3, [pc, #16]	; (80124e4 <__sinit+0x28>)
 80124d2:	6223      	str	r3, [r4, #32]
 80124d4:	4b04      	ldr	r3, [pc, #16]	; (80124e8 <__sinit+0x2c>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d1f5      	bne.n	80124c8 <__sinit+0xc>
 80124dc:	f7ff ffc4 	bl	8012468 <global_stdio_init.part.0>
 80124e0:	e7f2      	b.n	80124c8 <__sinit+0xc>
 80124e2:	bf00      	nop
 80124e4:	08012429 	.word	0x08012429
 80124e8:	200007b4 	.word	0x200007b4

080124ec <_fwalk_sglue>:
 80124ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f0:	4607      	mov	r7, r0
 80124f2:	4688      	mov	r8, r1
 80124f4:	4614      	mov	r4, r2
 80124f6:	2600      	movs	r6, #0
 80124f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124fc:	f1b9 0901 	subs.w	r9, r9, #1
 8012500:	d505      	bpl.n	801250e <_fwalk_sglue+0x22>
 8012502:	6824      	ldr	r4, [r4, #0]
 8012504:	2c00      	cmp	r4, #0
 8012506:	d1f7      	bne.n	80124f8 <_fwalk_sglue+0xc>
 8012508:	4630      	mov	r0, r6
 801250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801250e:	89ab      	ldrh	r3, [r5, #12]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d907      	bls.n	8012524 <_fwalk_sglue+0x38>
 8012514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012518:	3301      	adds	r3, #1
 801251a:	d003      	beq.n	8012524 <_fwalk_sglue+0x38>
 801251c:	4629      	mov	r1, r5
 801251e:	4638      	mov	r0, r7
 8012520:	47c0      	blx	r8
 8012522:	4306      	orrs	r6, r0
 8012524:	3568      	adds	r5, #104	; 0x68
 8012526:	e7e9      	b.n	80124fc <_fwalk_sglue+0x10>

08012528 <iprintf>:
 8012528:	b40f      	push	{r0, r1, r2, r3}
 801252a:	b507      	push	{r0, r1, r2, lr}
 801252c:	4906      	ldr	r1, [pc, #24]	; (8012548 <iprintf+0x20>)
 801252e:	ab04      	add	r3, sp, #16
 8012530:	6808      	ldr	r0, [r1, #0]
 8012532:	f853 2b04 	ldr.w	r2, [r3], #4
 8012536:	6881      	ldr	r1, [r0, #8]
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	f000 fb75 	bl	8012c28 <_vfiprintf_r>
 801253e:	b003      	add	sp, #12
 8012540:	f85d eb04 	ldr.w	lr, [sp], #4
 8012544:	b004      	add	sp, #16
 8012546:	4770      	bx	lr
 8012548:	2000014c 	.word	0x2000014c

0801254c <sniprintf>:
 801254c:	b40c      	push	{r2, r3}
 801254e:	4b18      	ldr	r3, [pc, #96]	; (80125b0 <sniprintf+0x64>)
 8012550:	b530      	push	{r4, r5, lr}
 8012552:	1e0c      	subs	r4, r1, #0
 8012554:	b09d      	sub	sp, #116	; 0x74
 8012556:	681d      	ldr	r5, [r3, #0]
 8012558:	da08      	bge.n	801256c <sniprintf+0x20>
 801255a:	238b      	movs	r3, #139	; 0x8b
 801255c:	f04f 30ff 	mov.w	r0, #4294967295
 8012560:	602b      	str	r3, [r5, #0]
 8012562:	b01d      	add	sp, #116	; 0x74
 8012564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012568:	b002      	add	sp, #8
 801256a:	4770      	bx	lr
 801256c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012570:	9002      	str	r0, [sp, #8]
 8012572:	9006      	str	r0, [sp, #24]
 8012574:	a902      	add	r1, sp, #8
 8012576:	f8ad 3014 	strh.w	r3, [sp, #20]
 801257a:	bf14      	ite	ne
 801257c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012580:	4623      	moveq	r3, r4
 8012582:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012584:	4628      	mov	r0, r5
 8012586:	9304      	str	r3, [sp, #16]
 8012588:	9307      	str	r3, [sp, #28]
 801258a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801258e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012592:	ab21      	add	r3, sp, #132	; 0x84
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	f000 fa1f 	bl	80129d8 <_svfiprintf_r>
 801259a:	1c43      	adds	r3, r0, #1
 801259c:	bfbc      	itt	lt
 801259e:	238b      	movlt	r3, #139	; 0x8b
 80125a0:	602b      	strlt	r3, [r5, #0]
 80125a2:	2c00      	cmp	r4, #0
 80125a4:	d0dd      	beq.n	8012562 <sniprintf+0x16>
 80125a6:	9b02      	ldr	r3, [sp, #8]
 80125a8:	2200      	movs	r2, #0
 80125aa:	701a      	strb	r2, [r3, #0]
 80125ac:	e7d9      	b.n	8012562 <sniprintf+0x16>
 80125ae:	bf00      	nop
 80125b0:	2000014c 	.word	0x2000014c

080125b4 <__sread>:
 80125b4:	b510      	push	{r4, lr}
 80125b6:	460c      	mov	r4, r1
 80125b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125bc:	f000 f868 	bl	8012690 <_read_r>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	bfab      	itete	ge
 80125c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125c6:	89a3      	ldrhlt	r3, [r4, #12]
 80125c8:	181b      	addge	r3, r3, r0
 80125ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125ce:	bfac      	ite	ge
 80125d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80125d2:	81a3      	strhlt	r3, [r4, #12]
 80125d4:	bd10      	pop	{r4, pc}

080125d6 <__swrite>:
 80125d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125da:	461f      	mov	r7, r3
 80125dc:	898b      	ldrh	r3, [r1, #12]
 80125de:	4605      	mov	r5, r0
 80125e0:	460c      	mov	r4, r1
 80125e2:	05db      	lsls	r3, r3, #23
 80125e4:	4616      	mov	r6, r2
 80125e6:	d505      	bpl.n	80125f4 <__swrite+0x1e>
 80125e8:	2302      	movs	r3, #2
 80125ea:	2200      	movs	r2, #0
 80125ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f0:	f000 f83c 	bl	801266c <_lseek_r>
 80125f4:	89a3      	ldrh	r3, [r4, #12]
 80125f6:	4632      	mov	r2, r6
 80125f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125fc:	4628      	mov	r0, r5
 80125fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012602:	81a3      	strh	r3, [r4, #12]
 8012604:	463b      	mov	r3, r7
 8012606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801260a:	f000 b853 	b.w	80126b4 <_write_r>

0801260e <__sseek>:
 801260e:	b510      	push	{r4, lr}
 8012610:	460c      	mov	r4, r1
 8012612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012616:	f000 f829 	bl	801266c <_lseek_r>
 801261a:	1c43      	adds	r3, r0, #1
 801261c:	89a3      	ldrh	r3, [r4, #12]
 801261e:	bf15      	itete	ne
 8012620:	6560      	strne	r0, [r4, #84]	; 0x54
 8012622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801262a:	81a3      	strheq	r3, [r4, #12]
 801262c:	bf18      	it	ne
 801262e:	81a3      	strhne	r3, [r4, #12]
 8012630:	bd10      	pop	{r4, pc}

08012632 <__sclose>:
 8012632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012636:	f000 b809 	b.w	801264c <_close_r>

0801263a <memset>:
 801263a:	4402      	add	r2, r0
 801263c:	4603      	mov	r3, r0
 801263e:	4293      	cmp	r3, r2
 8012640:	d100      	bne.n	8012644 <memset+0xa>
 8012642:	4770      	bx	lr
 8012644:	f803 1b01 	strb.w	r1, [r3], #1
 8012648:	e7f9      	b.n	801263e <memset+0x4>
	...

0801264c <_close_r>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	2300      	movs	r3, #0
 8012650:	4d05      	ldr	r5, [pc, #20]	; (8012668 <_close_r+0x1c>)
 8012652:	4604      	mov	r4, r0
 8012654:	4608      	mov	r0, r1
 8012656:	602b      	str	r3, [r5, #0]
 8012658:	f7ef fa87 	bl	8001b6a <_close>
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d102      	bne.n	8012666 <_close_r+0x1a>
 8012660:	682b      	ldr	r3, [r5, #0]
 8012662:	b103      	cbz	r3, 8012666 <_close_r+0x1a>
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	bd38      	pop	{r3, r4, r5, pc}
 8012668:	200007b8 	.word	0x200007b8

0801266c <_lseek_r>:
 801266c:	b538      	push	{r3, r4, r5, lr}
 801266e:	4604      	mov	r4, r0
 8012670:	4d06      	ldr	r5, [pc, #24]	; (801268c <_lseek_r+0x20>)
 8012672:	4608      	mov	r0, r1
 8012674:	4611      	mov	r1, r2
 8012676:	2200      	movs	r2, #0
 8012678:	602a      	str	r2, [r5, #0]
 801267a:	461a      	mov	r2, r3
 801267c:	f7ef fa9c 	bl	8001bb8 <_lseek>
 8012680:	1c43      	adds	r3, r0, #1
 8012682:	d102      	bne.n	801268a <_lseek_r+0x1e>
 8012684:	682b      	ldr	r3, [r5, #0]
 8012686:	b103      	cbz	r3, 801268a <_lseek_r+0x1e>
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	bd38      	pop	{r3, r4, r5, pc}
 801268c:	200007b8 	.word	0x200007b8

08012690 <_read_r>:
 8012690:	b538      	push	{r3, r4, r5, lr}
 8012692:	4604      	mov	r4, r0
 8012694:	4d06      	ldr	r5, [pc, #24]	; (80126b0 <_read_r+0x20>)
 8012696:	4608      	mov	r0, r1
 8012698:	4611      	mov	r1, r2
 801269a:	2200      	movs	r2, #0
 801269c:	602a      	str	r2, [r5, #0]
 801269e:	461a      	mov	r2, r3
 80126a0:	f7ef fa2a 	bl	8001af8 <_read>
 80126a4:	1c43      	adds	r3, r0, #1
 80126a6:	d102      	bne.n	80126ae <_read_r+0x1e>
 80126a8:	682b      	ldr	r3, [r5, #0]
 80126aa:	b103      	cbz	r3, 80126ae <_read_r+0x1e>
 80126ac:	6023      	str	r3, [r4, #0]
 80126ae:	bd38      	pop	{r3, r4, r5, pc}
 80126b0:	200007b8 	.word	0x200007b8

080126b4 <_write_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	4604      	mov	r4, r0
 80126b8:	4d06      	ldr	r5, [pc, #24]	; (80126d4 <_write_r+0x20>)
 80126ba:	4608      	mov	r0, r1
 80126bc:	4611      	mov	r1, r2
 80126be:	2200      	movs	r2, #0
 80126c0:	602a      	str	r2, [r5, #0]
 80126c2:	461a      	mov	r2, r3
 80126c4:	f7ef fa35 	bl	8001b32 <_write>
 80126c8:	1c43      	adds	r3, r0, #1
 80126ca:	d102      	bne.n	80126d2 <_write_r+0x1e>
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	b103      	cbz	r3, 80126d2 <_write_r+0x1e>
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	bd38      	pop	{r3, r4, r5, pc}
 80126d4:	200007b8 	.word	0x200007b8

080126d8 <__errno>:
 80126d8:	4b01      	ldr	r3, [pc, #4]	; (80126e0 <__errno+0x8>)
 80126da:	6818      	ldr	r0, [r3, #0]
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop
 80126e0:	2000014c 	.word	0x2000014c

080126e4 <__libc_init_array>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	4d0d      	ldr	r5, [pc, #52]	; (801271c <__libc_init_array+0x38>)
 80126e8:	2600      	movs	r6, #0
 80126ea:	4c0d      	ldr	r4, [pc, #52]	; (8012720 <__libc_init_array+0x3c>)
 80126ec:	1b64      	subs	r4, r4, r5
 80126ee:	10a4      	asrs	r4, r4, #2
 80126f0:	42a6      	cmp	r6, r4
 80126f2:	d109      	bne.n	8012708 <__libc_init_array+0x24>
 80126f4:	4d0b      	ldr	r5, [pc, #44]	; (8012724 <__libc_init_array+0x40>)
 80126f6:	2600      	movs	r6, #0
 80126f8:	4c0b      	ldr	r4, [pc, #44]	; (8012728 <__libc_init_array+0x44>)
 80126fa:	f001 feff 	bl	80144fc <_init>
 80126fe:	1b64      	subs	r4, r4, r5
 8012700:	10a4      	asrs	r4, r4, #2
 8012702:	42a6      	cmp	r6, r4
 8012704:	d105      	bne.n	8012712 <__libc_init_array+0x2e>
 8012706:	bd70      	pop	{r4, r5, r6, pc}
 8012708:	f855 3b04 	ldr.w	r3, [r5], #4
 801270c:	3601      	adds	r6, #1
 801270e:	4798      	blx	r3
 8012710:	e7ee      	b.n	80126f0 <__libc_init_array+0xc>
 8012712:	f855 3b04 	ldr.w	r3, [r5], #4
 8012716:	3601      	adds	r6, #1
 8012718:	4798      	blx	r3
 801271a:	e7f2      	b.n	8012702 <__libc_init_array+0x1e>
 801271c:	08014840 	.word	0x08014840
 8012720:	08014840 	.word	0x08014840
 8012724:	08014840 	.word	0x08014840
 8012728:	08014844 	.word	0x08014844

0801272c <__retarget_lock_init_recursive>:
 801272c:	4770      	bx	lr

0801272e <__retarget_lock_acquire_recursive>:
 801272e:	4770      	bx	lr

08012730 <__retarget_lock_release_recursive>:
 8012730:	4770      	bx	lr
	...

08012734 <_free_r>:
 8012734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012736:	2900      	cmp	r1, #0
 8012738:	d043      	beq.n	80127c2 <_free_r+0x8e>
 801273a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801273e:	1f0c      	subs	r4, r1, #4
 8012740:	9001      	str	r0, [sp, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	bfb8      	it	lt
 8012746:	18e4      	addlt	r4, r4, r3
 8012748:	f000 f8e0 	bl	801290c <__malloc_lock>
 801274c:	4a1e      	ldr	r2, [pc, #120]	; (80127c8 <_free_r+0x94>)
 801274e:	9801      	ldr	r0, [sp, #4]
 8012750:	6813      	ldr	r3, [r2, #0]
 8012752:	b933      	cbnz	r3, 8012762 <_free_r+0x2e>
 8012754:	6063      	str	r3, [r4, #4]
 8012756:	6014      	str	r4, [r2, #0]
 8012758:	b003      	add	sp, #12
 801275a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801275e:	f000 b8db 	b.w	8012918 <__malloc_unlock>
 8012762:	42a3      	cmp	r3, r4
 8012764:	d908      	bls.n	8012778 <_free_r+0x44>
 8012766:	6825      	ldr	r5, [r4, #0]
 8012768:	1961      	adds	r1, r4, r5
 801276a:	428b      	cmp	r3, r1
 801276c:	bf01      	itttt	eq
 801276e:	6819      	ldreq	r1, [r3, #0]
 8012770:	685b      	ldreq	r3, [r3, #4]
 8012772:	1949      	addeq	r1, r1, r5
 8012774:	6021      	streq	r1, [r4, #0]
 8012776:	e7ed      	b.n	8012754 <_free_r+0x20>
 8012778:	461a      	mov	r2, r3
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	b10b      	cbz	r3, 8012782 <_free_r+0x4e>
 801277e:	42a3      	cmp	r3, r4
 8012780:	d9fa      	bls.n	8012778 <_free_r+0x44>
 8012782:	6811      	ldr	r1, [r2, #0]
 8012784:	1855      	adds	r5, r2, r1
 8012786:	42a5      	cmp	r5, r4
 8012788:	d10b      	bne.n	80127a2 <_free_r+0x6e>
 801278a:	6824      	ldr	r4, [r4, #0]
 801278c:	4421      	add	r1, r4
 801278e:	1854      	adds	r4, r2, r1
 8012790:	6011      	str	r1, [r2, #0]
 8012792:	42a3      	cmp	r3, r4
 8012794:	d1e0      	bne.n	8012758 <_free_r+0x24>
 8012796:	681c      	ldr	r4, [r3, #0]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	440c      	add	r4, r1
 801279c:	6053      	str	r3, [r2, #4]
 801279e:	6014      	str	r4, [r2, #0]
 80127a0:	e7da      	b.n	8012758 <_free_r+0x24>
 80127a2:	d902      	bls.n	80127aa <_free_r+0x76>
 80127a4:	230c      	movs	r3, #12
 80127a6:	6003      	str	r3, [r0, #0]
 80127a8:	e7d6      	b.n	8012758 <_free_r+0x24>
 80127aa:	6825      	ldr	r5, [r4, #0]
 80127ac:	1961      	adds	r1, r4, r5
 80127ae:	428b      	cmp	r3, r1
 80127b0:	bf02      	ittt	eq
 80127b2:	6819      	ldreq	r1, [r3, #0]
 80127b4:	685b      	ldreq	r3, [r3, #4]
 80127b6:	1949      	addeq	r1, r1, r5
 80127b8:	6063      	str	r3, [r4, #4]
 80127ba:	bf08      	it	eq
 80127bc:	6021      	streq	r1, [r4, #0]
 80127be:	6054      	str	r4, [r2, #4]
 80127c0:	e7ca      	b.n	8012758 <_free_r+0x24>
 80127c2:	b003      	add	sp, #12
 80127c4:	bd30      	pop	{r4, r5, pc}
 80127c6:	bf00      	nop
 80127c8:	200007c0 	.word	0x200007c0

080127cc <sbrk_aligned>:
 80127cc:	b570      	push	{r4, r5, r6, lr}
 80127ce:	4e0e      	ldr	r6, [pc, #56]	; (8012808 <sbrk_aligned+0x3c>)
 80127d0:	460c      	mov	r4, r1
 80127d2:	4605      	mov	r5, r0
 80127d4:	6831      	ldr	r1, [r6, #0]
 80127d6:	b911      	cbnz	r1, 80127de <sbrk_aligned+0x12>
 80127d8:	f000 fe2e 	bl	8013438 <_sbrk_r>
 80127dc:	6030      	str	r0, [r6, #0]
 80127de:	4621      	mov	r1, r4
 80127e0:	4628      	mov	r0, r5
 80127e2:	f000 fe29 	bl	8013438 <_sbrk_r>
 80127e6:	1c43      	adds	r3, r0, #1
 80127e8:	d00a      	beq.n	8012800 <sbrk_aligned+0x34>
 80127ea:	1cc4      	adds	r4, r0, #3
 80127ec:	f024 0403 	bic.w	r4, r4, #3
 80127f0:	42a0      	cmp	r0, r4
 80127f2:	d007      	beq.n	8012804 <sbrk_aligned+0x38>
 80127f4:	1a21      	subs	r1, r4, r0
 80127f6:	4628      	mov	r0, r5
 80127f8:	f000 fe1e 	bl	8013438 <_sbrk_r>
 80127fc:	3001      	adds	r0, #1
 80127fe:	d101      	bne.n	8012804 <sbrk_aligned+0x38>
 8012800:	f04f 34ff 	mov.w	r4, #4294967295
 8012804:	4620      	mov	r0, r4
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	200007c4 	.word	0x200007c4

0801280c <_malloc_r>:
 801280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012810:	1ccd      	adds	r5, r1, #3
 8012812:	4607      	mov	r7, r0
 8012814:	f025 0503 	bic.w	r5, r5, #3
 8012818:	3508      	adds	r5, #8
 801281a:	2d0c      	cmp	r5, #12
 801281c:	bf38      	it	cc
 801281e:	250c      	movcc	r5, #12
 8012820:	2d00      	cmp	r5, #0
 8012822:	db01      	blt.n	8012828 <_malloc_r+0x1c>
 8012824:	42a9      	cmp	r1, r5
 8012826:	d905      	bls.n	8012834 <_malloc_r+0x28>
 8012828:	230c      	movs	r3, #12
 801282a:	2600      	movs	r6, #0
 801282c:	603b      	str	r3, [r7, #0]
 801282e:	4630      	mov	r0, r6
 8012830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012834:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012908 <_malloc_r+0xfc>
 8012838:	f000 f868 	bl	801290c <__malloc_lock>
 801283c:	f8d8 3000 	ldr.w	r3, [r8]
 8012840:	461c      	mov	r4, r3
 8012842:	bb5c      	cbnz	r4, 801289c <_malloc_r+0x90>
 8012844:	4629      	mov	r1, r5
 8012846:	4638      	mov	r0, r7
 8012848:	f7ff ffc0 	bl	80127cc <sbrk_aligned>
 801284c:	1c43      	adds	r3, r0, #1
 801284e:	4604      	mov	r4, r0
 8012850:	d155      	bne.n	80128fe <_malloc_r+0xf2>
 8012852:	f8d8 4000 	ldr.w	r4, [r8]
 8012856:	4626      	mov	r6, r4
 8012858:	2e00      	cmp	r6, #0
 801285a:	d145      	bne.n	80128e8 <_malloc_r+0xdc>
 801285c:	2c00      	cmp	r4, #0
 801285e:	d048      	beq.n	80128f2 <_malloc_r+0xe6>
 8012860:	6823      	ldr	r3, [r4, #0]
 8012862:	4631      	mov	r1, r6
 8012864:	4638      	mov	r0, r7
 8012866:	eb04 0903 	add.w	r9, r4, r3
 801286a:	f000 fde5 	bl	8013438 <_sbrk_r>
 801286e:	4581      	cmp	r9, r0
 8012870:	d13f      	bne.n	80128f2 <_malloc_r+0xe6>
 8012872:	6821      	ldr	r1, [r4, #0]
 8012874:	4638      	mov	r0, r7
 8012876:	1a6d      	subs	r5, r5, r1
 8012878:	4629      	mov	r1, r5
 801287a:	f7ff ffa7 	bl	80127cc <sbrk_aligned>
 801287e:	3001      	adds	r0, #1
 8012880:	d037      	beq.n	80128f2 <_malloc_r+0xe6>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	442b      	add	r3, r5
 8012886:	6023      	str	r3, [r4, #0]
 8012888:	f8d8 3000 	ldr.w	r3, [r8]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d038      	beq.n	8012902 <_malloc_r+0xf6>
 8012890:	685a      	ldr	r2, [r3, #4]
 8012892:	42a2      	cmp	r2, r4
 8012894:	d12b      	bne.n	80128ee <_malloc_r+0xe2>
 8012896:	2200      	movs	r2, #0
 8012898:	605a      	str	r2, [r3, #4]
 801289a:	e00f      	b.n	80128bc <_malloc_r+0xb0>
 801289c:	6822      	ldr	r2, [r4, #0]
 801289e:	1b52      	subs	r2, r2, r5
 80128a0:	d41f      	bmi.n	80128e2 <_malloc_r+0xd6>
 80128a2:	2a0b      	cmp	r2, #11
 80128a4:	d917      	bls.n	80128d6 <_malloc_r+0xca>
 80128a6:	1961      	adds	r1, r4, r5
 80128a8:	42a3      	cmp	r3, r4
 80128aa:	6025      	str	r5, [r4, #0]
 80128ac:	bf18      	it	ne
 80128ae:	6059      	strne	r1, [r3, #4]
 80128b0:	6863      	ldr	r3, [r4, #4]
 80128b2:	bf08      	it	eq
 80128b4:	f8c8 1000 	streq.w	r1, [r8]
 80128b8:	5162      	str	r2, [r4, r5]
 80128ba:	604b      	str	r3, [r1, #4]
 80128bc:	f104 060b 	add.w	r6, r4, #11
 80128c0:	4638      	mov	r0, r7
 80128c2:	f000 f829 	bl	8012918 <__malloc_unlock>
 80128c6:	1d23      	adds	r3, r4, #4
 80128c8:	f026 0607 	bic.w	r6, r6, #7
 80128cc:	1af2      	subs	r2, r6, r3
 80128ce:	d0ae      	beq.n	801282e <_malloc_r+0x22>
 80128d0:	1b9b      	subs	r3, r3, r6
 80128d2:	50a3      	str	r3, [r4, r2]
 80128d4:	e7ab      	b.n	801282e <_malloc_r+0x22>
 80128d6:	42a3      	cmp	r3, r4
 80128d8:	6862      	ldr	r2, [r4, #4]
 80128da:	d1dd      	bne.n	8012898 <_malloc_r+0x8c>
 80128dc:	f8c8 2000 	str.w	r2, [r8]
 80128e0:	e7ec      	b.n	80128bc <_malloc_r+0xb0>
 80128e2:	4623      	mov	r3, r4
 80128e4:	6864      	ldr	r4, [r4, #4]
 80128e6:	e7ac      	b.n	8012842 <_malloc_r+0x36>
 80128e8:	4634      	mov	r4, r6
 80128ea:	6876      	ldr	r6, [r6, #4]
 80128ec:	e7b4      	b.n	8012858 <_malloc_r+0x4c>
 80128ee:	4613      	mov	r3, r2
 80128f0:	e7cc      	b.n	801288c <_malloc_r+0x80>
 80128f2:	230c      	movs	r3, #12
 80128f4:	4638      	mov	r0, r7
 80128f6:	603b      	str	r3, [r7, #0]
 80128f8:	f000 f80e 	bl	8012918 <__malloc_unlock>
 80128fc:	e797      	b.n	801282e <_malloc_r+0x22>
 80128fe:	6025      	str	r5, [r4, #0]
 8012900:	e7dc      	b.n	80128bc <_malloc_r+0xb0>
 8012902:	605b      	str	r3, [r3, #4]
 8012904:	deff      	udf	#255	; 0xff
 8012906:	bf00      	nop
 8012908:	200007c0 	.word	0x200007c0

0801290c <__malloc_lock>:
 801290c:	4801      	ldr	r0, [pc, #4]	; (8012914 <__malloc_lock+0x8>)
 801290e:	f7ff bf0e 	b.w	801272e <__retarget_lock_acquire_recursive>
 8012912:	bf00      	nop
 8012914:	200007bc 	.word	0x200007bc

08012918 <__malloc_unlock>:
 8012918:	4801      	ldr	r0, [pc, #4]	; (8012920 <__malloc_unlock+0x8>)
 801291a:	f7ff bf09 	b.w	8012730 <__retarget_lock_release_recursive>
 801291e:	bf00      	nop
 8012920:	200007bc 	.word	0x200007bc

08012924 <__ssputs_r>:
 8012924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012928:	461f      	mov	r7, r3
 801292a:	688e      	ldr	r6, [r1, #8]
 801292c:	4682      	mov	sl, r0
 801292e:	460c      	mov	r4, r1
 8012930:	42be      	cmp	r6, r7
 8012932:	4690      	mov	r8, r2
 8012934:	680b      	ldr	r3, [r1, #0]
 8012936:	d82c      	bhi.n	8012992 <__ssputs_r+0x6e>
 8012938:	898a      	ldrh	r2, [r1, #12]
 801293a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801293e:	d026      	beq.n	801298e <__ssputs_r+0x6a>
 8012940:	6965      	ldr	r5, [r4, #20]
 8012942:	6909      	ldr	r1, [r1, #16]
 8012944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012948:	eba3 0901 	sub.w	r9, r3, r1
 801294c:	1c7b      	adds	r3, r7, #1
 801294e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012952:	444b      	add	r3, r9
 8012954:	106d      	asrs	r5, r5, #1
 8012956:	429d      	cmp	r5, r3
 8012958:	bf38      	it	cc
 801295a:	461d      	movcc	r5, r3
 801295c:	0553      	lsls	r3, r2, #21
 801295e:	d527      	bpl.n	80129b0 <__ssputs_r+0x8c>
 8012960:	4629      	mov	r1, r5
 8012962:	f7ff ff53 	bl	801280c <_malloc_r>
 8012966:	4606      	mov	r6, r0
 8012968:	b360      	cbz	r0, 80129c4 <__ssputs_r+0xa0>
 801296a:	464a      	mov	r2, r9
 801296c:	6921      	ldr	r1, [r4, #16]
 801296e:	f000 fd81 	bl	8013474 <memcpy>
 8012972:	89a3      	ldrh	r3, [r4, #12]
 8012974:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801297c:	81a3      	strh	r3, [r4, #12]
 801297e:	6126      	str	r6, [r4, #16]
 8012980:	444e      	add	r6, r9
 8012982:	6165      	str	r5, [r4, #20]
 8012984:	eba5 0509 	sub.w	r5, r5, r9
 8012988:	6026      	str	r6, [r4, #0]
 801298a:	463e      	mov	r6, r7
 801298c:	60a5      	str	r5, [r4, #8]
 801298e:	42be      	cmp	r6, r7
 8012990:	d900      	bls.n	8012994 <__ssputs_r+0x70>
 8012992:	463e      	mov	r6, r7
 8012994:	4632      	mov	r2, r6
 8012996:	4641      	mov	r1, r8
 8012998:	6820      	ldr	r0, [r4, #0]
 801299a:	f000 fd33 	bl	8013404 <memmove>
 801299e:	68a3      	ldr	r3, [r4, #8]
 80129a0:	2000      	movs	r0, #0
 80129a2:	1b9b      	subs	r3, r3, r6
 80129a4:	60a3      	str	r3, [r4, #8]
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	4433      	add	r3, r6
 80129aa:	6023      	str	r3, [r4, #0]
 80129ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b0:	462a      	mov	r2, r5
 80129b2:	f000 fd6c 	bl	801348e <_realloc_r>
 80129b6:	4606      	mov	r6, r0
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d1e0      	bne.n	801297e <__ssputs_r+0x5a>
 80129bc:	6921      	ldr	r1, [r4, #16]
 80129be:	4650      	mov	r0, sl
 80129c0:	f7ff feb8 	bl	8012734 <_free_r>
 80129c4:	230c      	movs	r3, #12
 80129c6:	f04f 30ff 	mov.w	r0, #4294967295
 80129ca:	f8ca 3000 	str.w	r3, [sl]
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d4:	81a3      	strh	r3, [r4, #12]
 80129d6:	e7e9      	b.n	80129ac <__ssputs_r+0x88>

080129d8 <_svfiprintf_r>:
 80129d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129dc:	4698      	mov	r8, r3
 80129de:	898b      	ldrh	r3, [r1, #12]
 80129e0:	b09d      	sub	sp, #116	; 0x74
 80129e2:	4607      	mov	r7, r0
 80129e4:	061b      	lsls	r3, r3, #24
 80129e6:	460d      	mov	r5, r1
 80129e8:	4614      	mov	r4, r2
 80129ea:	d50e      	bpl.n	8012a0a <_svfiprintf_r+0x32>
 80129ec:	690b      	ldr	r3, [r1, #16]
 80129ee:	b963      	cbnz	r3, 8012a0a <_svfiprintf_r+0x32>
 80129f0:	2140      	movs	r1, #64	; 0x40
 80129f2:	f7ff ff0b 	bl	801280c <_malloc_r>
 80129f6:	6028      	str	r0, [r5, #0]
 80129f8:	6128      	str	r0, [r5, #16]
 80129fa:	b920      	cbnz	r0, 8012a06 <_svfiprintf_r+0x2e>
 80129fc:	230c      	movs	r3, #12
 80129fe:	603b      	str	r3, [r7, #0]
 8012a00:	f04f 30ff 	mov.w	r0, #4294967295
 8012a04:	e0d0      	b.n	8012ba8 <_svfiprintf_r+0x1d0>
 8012a06:	2340      	movs	r3, #64	; 0x40
 8012a08:	616b      	str	r3, [r5, #20]
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a10:	f04f 0901 	mov.w	r9, #1
 8012a14:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012bc0 <_svfiprintf_r+0x1e8>
 8012a18:	9309      	str	r3, [sp, #36]	; 0x24
 8012a1a:	2320      	movs	r3, #32
 8012a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a20:	2330      	movs	r3, #48	; 0x30
 8012a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a26:	4623      	mov	r3, r4
 8012a28:	469a      	mov	sl, r3
 8012a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a2e:	b10a      	cbz	r2, 8012a34 <_svfiprintf_r+0x5c>
 8012a30:	2a25      	cmp	r2, #37	; 0x25
 8012a32:	d1f9      	bne.n	8012a28 <_svfiprintf_r+0x50>
 8012a34:	ebba 0b04 	subs.w	fp, sl, r4
 8012a38:	d00b      	beq.n	8012a52 <_svfiprintf_r+0x7a>
 8012a3a:	465b      	mov	r3, fp
 8012a3c:	4622      	mov	r2, r4
 8012a3e:	4629      	mov	r1, r5
 8012a40:	4638      	mov	r0, r7
 8012a42:	f7ff ff6f 	bl	8012924 <__ssputs_r>
 8012a46:	3001      	adds	r0, #1
 8012a48:	f000 80a9 	beq.w	8012b9e <_svfiprintf_r+0x1c6>
 8012a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a4e:	445a      	add	r2, fp
 8012a50:	9209      	str	r2, [sp, #36]	; 0x24
 8012a52:	f89a 3000 	ldrb.w	r3, [sl]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 80a1 	beq.w	8012b9e <_svfiprintf_r+0x1c6>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a62:	f10a 0a01 	add.w	sl, sl, #1
 8012a66:	9304      	str	r3, [sp, #16]
 8012a68:	9307      	str	r3, [sp, #28]
 8012a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8012a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a74:	4654      	mov	r4, sl
 8012a76:	2205      	movs	r2, #5
 8012a78:	4851      	ldr	r0, [pc, #324]	; (8012bc0 <_svfiprintf_r+0x1e8>)
 8012a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a7e:	f000 fceb 	bl	8013458 <memchr>
 8012a82:	9a04      	ldr	r2, [sp, #16]
 8012a84:	b9d8      	cbnz	r0, 8012abe <_svfiprintf_r+0xe6>
 8012a86:	06d0      	lsls	r0, r2, #27
 8012a88:	bf44      	itt	mi
 8012a8a:	2320      	movmi	r3, #32
 8012a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a90:	0711      	lsls	r1, r2, #28
 8012a92:	bf44      	itt	mi
 8012a94:	232b      	movmi	r3, #43	; 0x2b
 8012a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8012aa0:	d015      	beq.n	8012ace <_svfiprintf_r+0xf6>
 8012aa2:	9a07      	ldr	r2, [sp, #28]
 8012aa4:	4654      	mov	r4, sl
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	f04f 0c0a 	mov.w	ip, #10
 8012aac:	4621      	mov	r1, r4
 8012aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ab2:	3b30      	subs	r3, #48	; 0x30
 8012ab4:	2b09      	cmp	r3, #9
 8012ab6:	d94d      	bls.n	8012b54 <_svfiprintf_r+0x17c>
 8012ab8:	b1b0      	cbz	r0, 8012ae8 <_svfiprintf_r+0x110>
 8012aba:	9207      	str	r2, [sp, #28]
 8012abc:	e014      	b.n	8012ae8 <_svfiprintf_r+0x110>
 8012abe:	eba0 0308 	sub.w	r3, r0, r8
 8012ac2:	46a2      	mov	sl, r4
 8012ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	9304      	str	r3, [sp, #16]
 8012acc:	e7d2      	b.n	8012a74 <_svfiprintf_r+0x9c>
 8012ace:	9b03      	ldr	r3, [sp, #12]
 8012ad0:	1d19      	adds	r1, r3, #4
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	9103      	str	r1, [sp, #12]
 8012ad8:	bfbb      	ittet	lt
 8012ada:	425b      	neglt	r3, r3
 8012adc:	f042 0202 	orrlt.w	r2, r2, #2
 8012ae0:	9307      	strge	r3, [sp, #28]
 8012ae2:	9307      	strlt	r3, [sp, #28]
 8012ae4:	bfb8      	it	lt
 8012ae6:	9204      	strlt	r2, [sp, #16]
 8012ae8:	7823      	ldrb	r3, [r4, #0]
 8012aea:	2b2e      	cmp	r3, #46	; 0x2e
 8012aec:	d10c      	bne.n	8012b08 <_svfiprintf_r+0x130>
 8012aee:	7863      	ldrb	r3, [r4, #1]
 8012af0:	2b2a      	cmp	r3, #42	; 0x2a
 8012af2:	d134      	bne.n	8012b5e <_svfiprintf_r+0x186>
 8012af4:	9b03      	ldr	r3, [sp, #12]
 8012af6:	3402      	adds	r4, #2
 8012af8:	1d1a      	adds	r2, r3, #4
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	9203      	str	r2, [sp, #12]
 8012b00:	bfb8      	it	lt
 8012b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b06:	9305      	str	r3, [sp, #20]
 8012b08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012bd0 <_svfiprintf_r+0x1f8>
 8012b0c:	2203      	movs	r2, #3
 8012b0e:	7821      	ldrb	r1, [r4, #0]
 8012b10:	4650      	mov	r0, sl
 8012b12:	f000 fca1 	bl	8013458 <memchr>
 8012b16:	b138      	cbz	r0, 8012b28 <_svfiprintf_r+0x150>
 8012b18:	eba0 000a 	sub.w	r0, r0, sl
 8012b1c:	2240      	movs	r2, #64	; 0x40
 8012b1e:	9b04      	ldr	r3, [sp, #16]
 8012b20:	3401      	adds	r4, #1
 8012b22:	4082      	lsls	r2, r0
 8012b24:	4313      	orrs	r3, r2
 8012b26:	9304      	str	r3, [sp, #16]
 8012b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b2c:	2206      	movs	r2, #6
 8012b2e:	4825      	ldr	r0, [pc, #148]	; (8012bc4 <_svfiprintf_r+0x1ec>)
 8012b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b34:	f000 fc90 	bl	8013458 <memchr>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d038      	beq.n	8012bae <_svfiprintf_r+0x1d6>
 8012b3c:	4b22      	ldr	r3, [pc, #136]	; (8012bc8 <_svfiprintf_r+0x1f0>)
 8012b3e:	bb1b      	cbnz	r3, 8012b88 <_svfiprintf_r+0x1b0>
 8012b40:	9b03      	ldr	r3, [sp, #12]
 8012b42:	3307      	adds	r3, #7
 8012b44:	f023 0307 	bic.w	r3, r3, #7
 8012b48:	3308      	adds	r3, #8
 8012b4a:	9303      	str	r3, [sp, #12]
 8012b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b4e:	4433      	add	r3, r6
 8012b50:	9309      	str	r3, [sp, #36]	; 0x24
 8012b52:	e768      	b.n	8012a26 <_svfiprintf_r+0x4e>
 8012b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b58:	460c      	mov	r4, r1
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	e7a6      	b.n	8012aac <_svfiprintf_r+0xd4>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	3401      	adds	r4, #1
 8012b62:	f04f 0c0a 	mov.w	ip, #10
 8012b66:	4619      	mov	r1, r3
 8012b68:	9305      	str	r3, [sp, #20]
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b70:	3a30      	subs	r2, #48	; 0x30
 8012b72:	2a09      	cmp	r2, #9
 8012b74:	d903      	bls.n	8012b7e <_svfiprintf_r+0x1a6>
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d0c6      	beq.n	8012b08 <_svfiprintf_r+0x130>
 8012b7a:	9105      	str	r1, [sp, #20]
 8012b7c:	e7c4      	b.n	8012b08 <_svfiprintf_r+0x130>
 8012b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b82:	4604      	mov	r4, r0
 8012b84:	2301      	movs	r3, #1
 8012b86:	e7f0      	b.n	8012b6a <_svfiprintf_r+0x192>
 8012b88:	ab03      	add	r3, sp, #12
 8012b8a:	462a      	mov	r2, r5
 8012b8c:	a904      	add	r1, sp, #16
 8012b8e:	4638      	mov	r0, r7
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	4b0e      	ldr	r3, [pc, #56]	; (8012bcc <_svfiprintf_r+0x1f4>)
 8012b94:	f3af 8000 	nop.w
 8012b98:	1c42      	adds	r2, r0, #1
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	d1d6      	bne.n	8012b4c <_svfiprintf_r+0x174>
 8012b9e:	89ab      	ldrh	r3, [r5, #12]
 8012ba0:	065b      	lsls	r3, r3, #25
 8012ba2:	f53f af2d 	bmi.w	8012a00 <_svfiprintf_r+0x28>
 8012ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ba8:	b01d      	add	sp, #116	; 0x74
 8012baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bae:	ab03      	add	r3, sp, #12
 8012bb0:	462a      	mov	r2, r5
 8012bb2:	a904      	add	r1, sp, #16
 8012bb4:	4638      	mov	r0, r7
 8012bb6:	9300      	str	r3, [sp, #0]
 8012bb8:	4b04      	ldr	r3, [pc, #16]	; (8012bcc <_svfiprintf_r+0x1f4>)
 8012bba:	f000 f9c1 	bl	8012f40 <_printf_i>
 8012bbe:	e7eb      	b.n	8012b98 <_svfiprintf_r+0x1c0>
 8012bc0:	080147d4 	.word	0x080147d4
 8012bc4:	080147de 	.word	0x080147de
 8012bc8:	00000000 	.word	0x00000000
 8012bcc:	08012925 	.word	0x08012925
 8012bd0:	080147da 	.word	0x080147da

08012bd4 <__sfputc_r>:
 8012bd4:	6893      	ldr	r3, [r2, #8]
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	6093      	str	r3, [r2, #8]
 8012bdc:	b410      	push	{r4}
 8012bde:	da08      	bge.n	8012bf2 <__sfputc_r+0x1e>
 8012be0:	6994      	ldr	r4, [r2, #24]
 8012be2:	42a3      	cmp	r3, r4
 8012be4:	db01      	blt.n	8012bea <__sfputc_r+0x16>
 8012be6:	290a      	cmp	r1, #10
 8012be8:	d103      	bne.n	8012bf2 <__sfputc_r+0x1e>
 8012bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bee:	f000 bb73 	b.w	80132d8 <__swbuf_r>
 8012bf2:	6813      	ldr	r3, [r2, #0]
 8012bf4:	1c58      	adds	r0, r3, #1
 8012bf6:	6010      	str	r0, [r2, #0]
 8012bf8:	4608      	mov	r0, r1
 8012bfa:	7019      	strb	r1, [r3, #0]
 8012bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c00:	4770      	bx	lr

08012c02 <__sfputs_r>:
 8012c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	4614      	mov	r4, r2
 8012c0a:	18d5      	adds	r5, r2, r3
 8012c0c:	42ac      	cmp	r4, r5
 8012c0e:	d101      	bne.n	8012c14 <__sfputs_r+0x12>
 8012c10:	2000      	movs	r0, #0
 8012c12:	e007      	b.n	8012c24 <__sfputs_r+0x22>
 8012c14:	463a      	mov	r2, r7
 8012c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	f7ff ffda 	bl	8012bd4 <__sfputc_r>
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	d1f3      	bne.n	8012c0c <__sfputs_r+0xa>
 8012c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c28 <_vfiprintf_r>:
 8012c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	460d      	mov	r5, r1
 8012c2e:	b09d      	sub	sp, #116	; 0x74
 8012c30:	4614      	mov	r4, r2
 8012c32:	4698      	mov	r8, r3
 8012c34:	4606      	mov	r6, r0
 8012c36:	b118      	cbz	r0, 8012c40 <_vfiprintf_r+0x18>
 8012c38:	6a03      	ldr	r3, [r0, #32]
 8012c3a:	b90b      	cbnz	r3, 8012c40 <_vfiprintf_r+0x18>
 8012c3c:	f7ff fc3e 	bl	80124bc <__sinit>
 8012c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c42:	07d9      	lsls	r1, r3, #31
 8012c44:	d405      	bmi.n	8012c52 <_vfiprintf_r+0x2a>
 8012c46:	89ab      	ldrh	r3, [r5, #12]
 8012c48:	059a      	lsls	r2, r3, #22
 8012c4a:	d402      	bmi.n	8012c52 <_vfiprintf_r+0x2a>
 8012c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c4e:	f7ff fd6e 	bl	801272e <__retarget_lock_acquire_recursive>
 8012c52:	89ab      	ldrh	r3, [r5, #12]
 8012c54:	071b      	lsls	r3, r3, #28
 8012c56:	d501      	bpl.n	8012c5c <_vfiprintf_r+0x34>
 8012c58:	692b      	ldr	r3, [r5, #16]
 8012c5a:	b99b      	cbnz	r3, 8012c84 <_vfiprintf_r+0x5c>
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f000 fb78 	bl	8013354 <__swsetup_r>
 8012c64:	b170      	cbz	r0, 8012c84 <_vfiprintf_r+0x5c>
 8012c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c68:	07dc      	lsls	r4, r3, #31
 8012c6a:	d504      	bpl.n	8012c76 <_vfiprintf_r+0x4e>
 8012c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c70:	b01d      	add	sp, #116	; 0x74
 8012c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	0598      	lsls	r0, r3, #22
 8012c7a:	d4f7      	bmi.n	8012c6c <_vfiprintf_r+0x44>
 8012c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c7e:	f7ff fd57 	bl	8012730 <__retarget_lock_release_recursive>
 8012c82:	e7f3      	b.n	8012c6c <_vfiprintf_r+0x44>
 8012c84:	2300      	movs	r3, #0
 8012c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c8a:	f04f 0901 	mov.w	r9, #1
 8012c8e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8012e48 <_vfiprintf_r+0x220>
 8012c92:	9309      	str	r3, [sp, #36]	; 0x24
 8012c94:	2320      	movs	r3, #32
 8012c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c9a:	2330      	movs	r3, #48	; 0x30
 8012c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ca0:	4623      	mov	r3, r4
 8012ca2:	469a      	mov	sl, r3
 8012ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ca8:	b10a      	cbz	r2, 8012cae <_vfiprintf_r+0x86>
 8012caa:	2a25      	cmp	r2, #37	; 0x25
 8012cac:	d1f9      	bne.n	8012ca2 <_vfiprintf_r+0x7a>
 8012cae:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb2:	d00b      	beq.n	8012ccc <_vfiprintf_r+0xa4>
 8012cb4:	465b      	mov	r3, fp
 8012cb6:	4622      	mov	r2, r4
 8012cb8:	4629      	mov	r1, r5
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f7ff ffa1 	bl	8012c02 <__sfputs_r>
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	f000 80a9 	beq.w	8012e18 <_vfiprintf_r+0x1f0>
 8012cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cc8:	445a      	add	r2, fp
 8012cca:	9209      	str	r2, [sp, #36]	; 0x24
 8012ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f000 80a1 	beq.w	8012e18 <_vfiprintf_r+0x1f0>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cdc:	f10a 0a01 	add.w	sl, sl, #1
 8012ce0:	9304      	str	r3, [sp, #16]
 8012ce2:	9307      	str	r3, [sp, #28]
 8012ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8012cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cee:	4654      	mov	r4, sl
 8012cf0:	2205      	movs	r2, #5
 8012cf2:	4855      	ldr	r0, [pc, #340]	; (8012e48 <_vfiprintf_r+0x220>)
 8012cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf8:	f000 fbae 	bl	8013458 <memchr>
 8012cfc:	9a04      	ldr	r2, [sp, #16]
 8012cfe:	b9d8      	cbnz	r0, 8012d38 <_vfiprintf_r+0x110>
 8012d00:	06d1      	lsls	r1, r2, #27
 8012d02:	bf44      	itt	mi
 8012d04:	2320      	movmi	r3, #32
 8012d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d0a:	0713      	lsls	r3, r2, #28
 8012d0c:	bf44      	itt	mi
 8012d0e:	232b      	movmi	r3, #43	; 0x2b
 8012d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d14:	f89a 3000 	ldrb.w	r3, [sl]
 8012d18:	2b2a      	cmp	r3, #42	; 0x2a
 8012d1a:	d015      	beq.n	8012d48 <_vfiprintf_r+0x120>
 8012d1c:	9a07      	ldr	r2, [sp, #28]
 8012d1e:	4654      	mov	r4, sl
 8012d20:	2000      	movs	r0, #0
 8012d22:	f04f 0c0a 	mov.w	ip, #10
 8012d26:	4621      	mov	r1, r4
 8012d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d2c:	3b30      	subs	r3, #48	; 0x30
 8012d2e:	2b09      	cmp	r3, #9
 8012d30:	d94d      	bls.n	8012dce <_vfiprintf_r+0x1a6>
 8012d32:	b1b0      	cbz	r0, 8012d62 <_vfiprintf_r+0x13a>
 8012d34:	9207      	str	r2, [sp, #28]
 8012d36:	e014      	b.n	8012d62 <_vfiprintf_r+0x13a>
 8012d38:	eba0 0308 	sub.w	r3, r0, r8
 8012d3c:	46a2      	mov	sl, r4
 8012d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8012d42:	4313      	orrs	r3, r2
 8012d44:	9304      	str	r3, [sp, #16]
 8012d46:	e7d2      	b.n	8012cee <_vfiprintf_r+0xc6>
 8012d48:	9b03      	ldr	r3, [sp, #12]
 8012d4a:	1d19      	adds	r1, r3, #4
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	9103      	str	r1, [sp, #12]
 8012d52:	bfbb      	ittet	lt
 8012d54:	425b      	neglt	r3, r3
 8012d56:	f042 0202 	orrlt.w	r2, r2, #2
 8012d5a:	9307      	strge	r3, [sp, #28]
 8012d5c:	9307      	strlt	r3, [sp, #28]
 8012d5e:	bfb8      	it	lt
 8012d60:	9204      	strlt	r2, [sp, #16]
 8012d62:	7823      	ldrb	r3, [r4, #0]
 8012d64:	2b2e      	cmp	r3, #46	; 0x2e
 8012d66:	d10c      	bne.n	8012d82 <_vfiprintf_r+0x15a>
 8012d68:	7863      	ldrb	r3, [r4, #1]
 8012d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d6c:	d134      	bne.n	8012dd8 <_vfiprintf_r+0x1b0>
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	3402      	adds	r4, #2
 8012d72:	1d1a      	adds	r2, r3, #4
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	9203      	str	r2, [sp, #12]
 8012d7a:	bfb8      	it	lt
 8012d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d80:	9305      	str	r3, [sp, #20]
 8012d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012e58 <_vfiprintf_r+0x230>
 8012d86:	2203      	movs	r2, #3
 8012d88:	7821      	ldrb	r1, [r4, #0]
 8012d8a:	4650      	mov	r0, sl
 8012d8c:	f000 fb64 	bl	8013458 <memchr>
 8012d90:	b138      	cbz	r0, 8012da2 <_vfiprintf_r+0x17a>
 8012d92:	eba0 000a 	sub.w	r0, r0, sl
 8012d96:	2240      	movs	r2, #64	; 0x40
 8012d98:	9b04      	ldr	r3, [sp, #16]
 8012d9a:	3401      	adds	r4, #1
 8012d9c:	4082      	lsls	r2, r0
 8012d9e:	4313      	orrs	r3, r2
 8012da0:	9304      	str	r3, [sp, #16]
 8012da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da6:	2206      	movs	r2, #6
 8012da8:	4828      	ldr	r0, [pc, #160]	; (8012e4c <_vfiprintf_r+0x224>)
 8012daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dae:	f000 fb53 	bl	8013458 <memchr>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d03f      	beq.n	8012e36 <_vfiprintf_r+0x20e>
 8012db6:	4b26      	ldr	r3, [pc, #152]	; (8012e50 <_vfiprintf_r+0x228>)
 8012db8:	bb1b      	cbnz	r3, 8012e02 <_vfiprintf_r+0x1da>
 8012dba:	9b03      	ldr	r3, [sp, #12]
 8012dbc:	3307      	adds	r3, #7
 8012dbe:	f023 0307 	bic.w	r3, r3, #7
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	9303      	str	r3, [sp, #12]
 8012dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc8:	443b      	add	r3, r7
 8012dca:	9309      	str	r3, [sp, #36]	; 0x24
 8012dcc:	e768      	b.n	8012ca0 <_vfiprintf_r+0x78>
 8012dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	e7a6      	b.n	8012d26 <_vfiprintf_r+0xfe>
 8012dd8:	2300      	movs	r3, #0
 8012dda:	3401      	adds	r4, #1
 8012ddc:	f04f 0c0a 	mov.w	ip, #10
 8012de0:	4619      	mov	r1, r3
 8012de2:	9305      	str	r3, [sp, #20]
 8012de4:	4620      	mov	r0, r4
 8012de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dea:	3a30      	subs	r2, #48	; 0x30
 8012dec:	2a09      	cmp	r2, #9
 8012dee:	d903      	bls.n	8012df8 <_vfiprintf_r+0x1d0>
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d0c6      	beq.n	8012d82 <_vfiprintf_r+0x15a>
 8012df4:	9105      	str	r1, [sp, #20]
 8012df6:	e7c4      	b.n	8012d82 <_vfiprintf_r+0x15a>
 8012df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e7f0      	b.n	8012de4 <_vfiprintf_r+0x1bc>
 8012e02:	ab03      	add	r3, sp, #12
 8012e04:	462a      	mov	r2, r5
 8012e06:	a904      	add	r1, sp, #16
 8012e08:	4630      	mov	r0, r6
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	4b11      	ldr	r3, [pc, #68]	; (8012e54 <_vfiprintf_r+0x22c>)
 8012e0e:	f3af 8000 	nop.w
 8012e12:	4607      	mov	r7, r0
 8012e14:	1c78      	adds	r0, r7, #1
 8012e16:	d1d6      	bne.n	8012dc6 <_vfiprintf_r+0x19e>
 8012e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e1a:	07d9      	lsls	r1, r3, #31
 8012e1c:	d405      	bmi.n	8012e2a <_vfiprintf_r+0x202>
 8012e1e:	89ab      	ldrh	r3, [r5, #12]
 8012e20:	059a      	lsls	r2, r3, #22
 8012e22:	d402      	bmi.n	8012e2a <_vfiprintf_r+0x202>
 8012e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e26:	f7ff fc83 	bl	8012730 <__retarget_lock_release_recursive>
 8012e2a:	89ab      	ldrh	r3, [r5, #12]
 8012e2c:	065b      	lsls	r3, r3, #25
 8012e2e:	f53f af1d 	bmi.w	8012c6c <_vfiprintf_r+0x44>
 8012e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e34:	e71c      	b.n	8012c70 <_vfiprintf_r+0x48>
 8012e36:	ab03      	add	r3, sp, #12
 8012e38:	462a      	mov	r2, r5
 8012e3a:	a904      	add	r1, sp, #16
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	4b04      	ldr	r3, [pc, #16]	; (8012e54 <_vfiprintf_r+0x22c>)
 8012e42:	f000 f87d 	bl	8012f40 <_printf_i>
 8012e46:	e7e4      	b.n	8012e12 <_vfiprintf_r+0x1ea>
 8012e48:	080147d4 	.word	0x080147d4
 8012e4c:	080147de 	.word	0x080147de
 8012e50:	00000000 	.word	0x00000000
 8012e54:	08012c03 	.word	0x08012c03
 8012e58:	080147da 	.word	0x080147da

08012e5c <_printf_common>:
 8012e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	4616      	mov	r6, r2
 8012e62:	4699      	mov	r9, r3
 8012e64:	688a      	ldr	r2, [r1, #8]
 8012e66:	4607      	mov	r7, r0
 8012e68:	690b      	ldr	r3, [r1, #16]
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e70:	4293      	cmp	r3, r2
 8012e72:	bfb8      	it	lt
 8012e74:	4613      	movlt	r3, r2
 8012e76:	6033      	str	r3, [r6, #0]
 8012e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e7c:	b10a      	cbz	r2, 8012e82 <_printf_common+0x26>
 8012e7e:	3301      	adds	r3, #1
 8012e80:	6033      	str	r3, [r6, #0]
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	0699      	lsls	r1, r3, #26
 8012e86:	bf42      	ittt	mi
 8012e88:	6833      	ldrmi	r3, [r6, #0]
 8012e8a:	3302      	addmi	r3, #2
 8012e8c:	6033      	strmi	r3, [r6, #0]
 8012e8e:	6825      	ldr	r5, [r4, #0]
 8012e90:	f015 0506 	ands.w	r5, r5, #6
 8012e94:	d106      	bne.n	8012ea4 <_printf_common+0x48>
 8012e96:	f104 0a19 	add.w	sl, r4, #25
 8012e9a:	68e3      	ldr	r3, [r4, #12]
 8012e9c:	6832      	ldr	r2, [r6, #0]
 8012e9e:	1a9b      	subs	r3, r3, r2
 8012ea0:	42ab      	cmp	r3, r5
 8012ea2:	dc2b      	bgt.n	8012efc <_printf_common+0xa0>
 8012ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ea8:	1e13      	subs	r3, r2, #0
 8012eaa:	6822      	ldr	r2, [r4, #0]
 8012eac:	bf18      	it	ne
 8012eae:	2301      	movne	r3, #1
 8012eb0:	0692      	lsls	r2, r2, #26
 8012eb2:	d430      	bmi.n	8012f16 <_printf_common+0xba>
 8012eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012eb8:	4649      	mov	r1, r9
 8012eba:	4638      	mov	r0, r7
 8012ebc:	47c0      	blx	r8
 8012ebe:	3001      	adds	r0, #1
 8012ec0:	d023      	beq.n	8012f0a <_printf_common+0xae>
 8012ec2:	6823      	ldr	r3, [r4, #0]
 8012ec4:	341a      	adds	r4, #26
 8012ec6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012eca:	f003 0306 	and.w	r3, r3, #6
 8012ece:	2b04      	cmp	r3, #4
 8012ed0:	bf0a      	itet	eq
 8012ed2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012ed6:	2500      	movne	r5, #0
 8012ed8:	6833      	ldreq	r3, [r6, #0]
 8012eda:	f04f 0600 	mov.w	r6, #0
 8012ede:	bf08      	it	eq
 8012ee0:	1aed      	subeq	r5, r5, r3
 8012ee2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012ee6:	bf08      	it	eq
 8012ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012eec:	4293      	cmp	r3, r2
 8012eee:	bfc4      	itt	gt
 8012ef0:	1a9b      	subgt	r3, r3, r2
 8012ef2:	18ed      	addgt	r5, r5, r3
 8012ef4:	42b5      	cmp	r5, r6
 8012ef6:	d11a      	bne.n	8012f2e <_printf_common+0xd2>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	e008      	b.n	8012f0e <_printf_common+0xb2>
 8012efc:	2301      	movs	r3, #1
 8012efe:	4652      	mov	r2, sl
 8012f00:	4649      	mov	r1, r9
 8012f02:	4638      	mov	r0, r7
 8012f04:	47c0      	blx	r8
 8012f06:	3001      	adds	r0, #1
 8012f08:	d103      	bne.n	8012f12 <_printf_common+0xb6>
 8012f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f12:	3501      	adds	r5, #1
 8012f14:	e7c1      	b.n	8012e9a <_printf_common+0x3e>
 8012f16:	18e1      	adds	r1, r4, r3
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	2030      	movs	r0, #48	; 0x30
 8012f1c:	3302      	adds	r3, #2
 8012f1e:	4422      	add	r2, r4
 8012f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f2c:	e7c2      	b.n	8012eb4 <_printf_common+0x58>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	4622      	mov	r2, r4
 8012f32:	4649      	mov	r1, r9
 8012f34:	4638      	mov	r0, r7
 8012f36:	47c0      	blx	r8
 8012f38:	3001      	adds	r0, #1
 8012f3a:	d0e6      	beq.n	8012f0a <_printf_common+0xae>
 8012f3c:	3601      	adds	r6, #1
 8012f3e:	e7d9      	b.n	8012ef4 <_printf_common+0x98>

08012f40 <_printf_i>:
 8012f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f44:	7e0f      	ldrb	r7, [r1, #24]
 8012f46:	4691      	mov	r9, r2
 8012f48:	4680      	mov	r8, r0
 8012f4a:	460c      	mov	r4, r1
 8012f4c:	2f78      	cmp	r7, #120	; 0x78
 8012f4e:	469a      	mov	sl, r3
 8012f50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f56:	d807      	bhi.n	8012f68 <_printf_i+0x28>
 8012f58:	2f62      	cmp	r7, #98	; 0x62
 8012f5a:	d80a      	bhi.n	8012f72 <_printf_i+0x32>
 8012f5c:	2f00      	cmp	r7, #0
 8012f5e:	f000 80d3 	beq.w	8013108 <_printf_i+0x1c8>
 8012f62:	2f58      	cmp	r7, #88	; 0x58
 8012f64:	f000 80bf 	beq.w	80130e6 <_printf_i+0x1a6>
 8012f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f70:	e03a      	b.n	8012fe8 <_printf_i+0xa8>
 8012f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f76:	2b15      	cmp	r3, #21
 8012f78:	d8f6      	bhi.n	8012f68 <_printf_i+0x28>
 8012f7a:	a101      	add	r1, pc, #4	; (adr r1, 8012f80 <_printf_i+0x40>)
 8012f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f80:	08012fd9 	.word	0x08012fd9
 8012f84:	08012fed 	.word	0x08012fed
 8012f88:	08012f69 	.word	0x08012f69
 8012f8c:	08012f69 	.word	0x08012f69
 8012f90:	08012f69 	.word	0x08012f69
 8012f94:	08012f69 	.word	0x08012f69
 8012f98:	08012fed 	.word	0x08012fed
 8012f9c:	08012f69 	.word	0x08012f69
 8012fa0:	08012f69 	.word	0x08012f69
 8012fa4:	08012f69 	.word	0x08012f69
 8012fa8:	08012f69 	.word	0x08012f69
 8012fac:	080130ef 	.word	0x080130ef
 8012fb0:	08013019 	.word	0x08013019
 8012fb4:	080130ab 	.word	0x080130ab
 8012fb8:	08012f69 	.word	0x08012f69
 8012fbc:	08012f69 	.word	0x08012f69
 8012fc0:	08013111 	.word	0x08013111
 8012fc4:	08012f69 	.word	0x08012f69
 8012fc8:	08013019 	.word	0x08013019
 8012fcc:	08012f69 	.word	0x08012f69
 8012fd0:	08012f69 	.word	0x08012f69
 8012fd4:	080130b3 	.word	0x080130b3
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	1d1a      	adds	r2, r3, #4
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	602a      	str	r2, [r5, #0]
 8012fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e09e      	b.n	801312a <_printf_i+0x1ea>
 8012fec:	6820      	ldr	r0, [r4, #0]
 8012fee:	682b      	ldr	r3, [r5, #0]
 8012ff0:	0607      	lsls	r7, r0, #24
 8012ff2:	f103 0104 	add.w	r1, r3, #4
 8012ff6:	6029      	str	r1, [r5, #0]
 8012ff8:	d501      	bpl.n	8012ffe <_printf_i+0xbe>
 8012ffa:	681e      	ldr	r6, [r3, #0]
 8012ffc:	e003      	b.n	8013006 <_printf_i+0xc6>
 8012ffe:	0646      	lsls	r6, r0, #25
 8013000:	d5fb      	bpl.n	8012ffa <_printf_i+0xba>
 8013002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013006:	2e00      	cmp	r6, #0
 8013008:	da03      	bge.n	8013012 <_printf_i+0xd2>
 801300a:	232d      	movs	r3, #45	; 0x2d
 801300c:	4276      	negs	r6, r6
 801300e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013012:	4859      	ldr	r0, [pc, #356]	; (8013178 <_printf_i+0x238>)
 8013014:	230a      	movs	r3, #10
 8013016:	e012      	b.n	801303e <_printf_i+0xfe>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	6820      	ldr	r0, [r4, #0]
 801301c:	1d19      	adds	r1, r3, #4
 801301e:	6029      	str	r1, [r5, #0]
 8013020:	0605      	lsls	r5, r0, #24
 8013022:	d501      	bpl.n	8013028 <_printf_i+0xe8>
 8013024:	681e      	ldr	r6, [r3, #0]
 8013026:	e002      	b.n	801302e <_printf_i+0xee>
 8013028:	0641      	lsls	r1, r0, #25
 801302a:	d5fb      	bpl.n	8013024 <_printf_i+0xe4>
 801302c:	881e      	ldrh	r6, [r3, #0]
 801302e:	2f6f      	cmp	r7, #111	; 0x6f
 8013030:	4851      	ldr	r0, [pc, #324]	; (8013178 <_printf_i+0x238>)
 8013032:	bf0c      	ite	eq
 8013034:	2308      	moveq	r3, #8
 8013036:	230a      	movne	r3, #10
 8013038:	2100      	movs	r1, #0
 801303a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801303e:	6865      	ldr	r5, [r4, #4]
 8013040:	2d00      	cmp	r5, #0
 8013042:	60a5      	str	r5, [r4, #8]
 8013044:	bfa2      	ittt	ge
 8013046:	6821      	ldrge	r1, [r4, #0]
 8013048:	f021 0104 	bicge.w	r1, r1, #4
 801304c:	6021      	strge	r1, [r4, #0]
 801304e:	b90e      	cbnz	r6, 8013054 <_printf_i+0x114>
 8013050:	2d00      	cmp	r5, #0
 8013052:	d04a      	beq.n	80130ea <_printf_i+0x1aa>
 8013054:	4615      	mov	r5, r2
 8013056:	fbb6 f1f3 	udiv	r1, r6, r3
 801305a:	fb03 6711 	mls	r7, r3, r1, r6
 801305e:	5dc7      	ldrb	r7, [r0, r7]
 8013060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013064:	4637      	mov	r7, r6
 8013066:	460e      	mov	r6, r1
 8013068:	42bb      	cmp	r3, r7
 801306a:	d9f4      	bls.n	8013056 <_printf_i+0x116>
 801306c:	2b08      	cmp	r3, #8
 801306e:	d10b      	bne.n	8013088 <_printf_i+0x148>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	07de      	lsls	r6, r3, #31
 8013074:	d508      	bpl.n	8013088 <_printf_i+0x148>
 8013076:	6923      	ldr	r3, [r4, #16]
 8013078:	6861      	ldr	r1, [r4, #4]
 801307a:	4299      	cmp	r1, r3
 801307c:	bfde      	ittt	le
 801307e:	2330      	movle	r3, #48	; 0x30
 8013080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013088:	1b52      	subs	r2, r2, r5
 801308a:	6122      	str	r2, [r4, #16]
 801308c:	464b      	mov	r3, r9
 801308e:	aa03      	add	r2, sp, #12
 8013090:	4621      	mov	r1, r4
 8013092:	4640      	mov	r0, r8
 8013094:	f8cd a000 	str.w	sl, [sp]
 8013098:	f7ff fee0 	bl	8012e5c <_printf_common>
 801309c:	3001      	adds	r0, #1
 801309e:	d149      	bne.n	8013134 <_printf_i+0x1f4>
 80130a0:	f04f 30ff 	mov.w	r0, #4294967295
 80130a4:	b004      	add	sp, #16
 80130a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	f043 0320 	orr.w	r3, r3, #32
 80130b0:	6023      	str	r3, [r4, #0]
 80130b2:	2778      	movs	r7, #120	; 0x78
 80130b4:	4831      	ldr	r0, [pc, #196]	; (801317c <_printf_i+0x23c>)
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80130bc:	061f      	lsls	r7, r3, #24
 80130be:	6829      	ldr	r1, [r5, #0]
 80130c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80130c4:	d402      	bmi.n	80130cc <_printf_i+0x18c>
 80130c6:	065f      	lsls	r7, r3, #25
 80130c8:	bf48      	it	mi
 80130ca:	b2b6      	uxthmi	r6, r6
 80130cc:	07df      	lsls	r7, r3, #31
 80130ce:	6029      	str	r1, [r5, #0]
 80130d0:	bf44      	itt	mi
 80130d2:	f043 0320 	orrmi.w	r3, r3, #32
 80130d6:	6023      	strmi	r3, [r4, #0]
 80130d8:	b91e      	cbnz	r6, 80130e2 <_printf_i+0x1a2>
 80130da:	6823      	ldr	r3, [r4, #0]
 80130dc:	f023 0320 	bic.w	r3, r3, #32
 80130e0:	6023      	str	r3, [r4, #0]
 80130e2:	2310      	movs	r3, #16
 80130e4:	e7a8      	b.n	8013038 <_printf_i+0xf8>
 80130e6:	4824      	ldr	r0, [pc, #144]	; (8013178 <_printf_i+0x238>)
 80130e8:	e7e5      	b.n	80130b6 <_printf_i+0x176>
 80130ea:	4615      	mov	r5, r2
 80130ec:	e7be      	b.n	801306c <_printf_i+0x12c>
 80130ee:	682b      	ldr	r3, [r5, #0]
 80130f0:	6826      	ldr	r6, [r4, #0]
 80130f2:	1d18      	adds	r0, r3, #4
 80130f4:	6961      	ldr	r1, [r4, #20]
 80130f6:	6028      	str	r0, [r5, #0]
 80130f8:	0635      	lsls	r5, r6, #24
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	d501      	bpl.n	8013102 <_printf_i+0x1c2>
 80130fe:	6019      	str	r1, [r3, #0]
 8013100:	e002      	b.n	8013108 <_printf_i+0x1c8>
 8013102:	0670      	lsls	r0, r6, #25
 8013104:	d5fb      	bpl.n	80130fe <_printf_i+0x1be>
 8013106:	8019      	strh	r1, [r3, #0]
 8013108:	2300      	movs	r3, #0
 801310a:	4615      	mov	r5, r2
 801310c:	6123      	str	r3, [r4, #16]
 801310e:	e7bd      	b.n	801308c <_printf_i+0x14c>
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	2100      	movs	r1, #0
 8013114:	1d1a      	adds	r2, r3, #4
 8013116:	602a      	str	r2, [r5, #0]
 8013118:	681d      	ldr	r5, [r3, #0]
 801311a:	6862      	ldr	r2, [r4, #4]
 801311c:	4628      	mov	r0, r5
 801311e:	f000 f99b 	bl	8013458 <memchr>
 8013122:	b108      	cbz	r0, 8013128 <_printf_i+0x1e8>
 8013124:	1b40      	subs	r0, r0, r5
 8013126:	6060      	str	r0, [r4, #4]
 8013128:	6863      	ldr	r3, [r4, #4]
 801312a:	6123      	str	r3, [r4, #16]
 801312c:	2300      	movs	r3, #0
 801312e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013132:	e7ab      	b.n	801308c <_printf_i+0x14c>
 8013134:	6923      	ldr	r3, [r4, #16]
 8013136:	462a      	mov	r2, r5
 8013138:	4649      	mov	r1, r9
 801313a:	4640      	mov	r0, r8
 801313c:	47d0      	blx	sl
 801313e:	3001      	adds	r0, #1
 8013140:	d0ae      	beq.n	80130a0 <_printf_i+0x160>
 8013142:	6823      	ldr	r3, [r4, #0]
 8013144:	079b      	lsls	r3, r3, #30
 8013146:	d413      	bmi.n	8013170 <_printf_i+0x230>
 8013148:	68e0      	ldr	r0, [r4, #12]
 801314a:	9b03      	ldr	r3, [sp, #12]
 801314c:	4298      	cmp	r0, r3
 801314e:	bfb8      	it	lt
 8013150:	4618      	movlt	r0, r3
 8013152:	e7a7      	b.n	80130a4 <_printf_i+0x164>
 8013154:	2301      	movs	r3, #1
 8013156:	4632      	mov	r2, r6
 8013158:	4649      	mov	r1, r9
 801315a:	4640      	mov	r0, r8
 801315c:	47d0      	blx	sl
 801315e:	3001      	adds	r0, #1
 8013160:	d09e      	beq.n	80130a0 <_printf_i+0x160>
 8013162:	3501      	adds	r5, #1
 8013164:	68e3      	ldr	r3, [r4, #12]
 8013166:	9903      	ldr	r1, [sp, #12]
 8013168:	1a5b      	subs	r3, r3, r1
 801316a:	42ab      	cmp	r3, r5
 801316c:	dcf2      	bgt.n	8013154 <_printf_i+0x214>
 801316e:	e7eb      	b.n	8013148 <_printf_i+0x208>
 8013170:	2500      	movs	r5, #0
 8013172:	f104 0619 	add.w	r6, r4, #25
 8013176:	e7f5      	b.n	8013164 <_printf_i+0x224>
 8013178:	080147e5 	.word	0x080147e5
 801317c:	080147f6 	.word	0x080147f6

08013180 <__sflush_r>:
 8013180:	898a      	ldrh	r2, [r1, #12]
 8013182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013186:	4605      	mov	r5, r0
 8013188:	0710      	lsls	r0, r2, #28
 801318a:	460c      	mov	r4, r1
 801318c:	d458      	bmi.n	8013240 <__sflush_r+0xc0>
 801318e:	684b      	ldr	r3, [r1, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	dc05      	bgt.n	80131a0 <__sflush_r+0x20>
 8013194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013196:	2b00      	cmp	r3, #0
 8013198:	dc02      	bgt.n	80131a0 <__sflush_r+0x20>
 801319a:	2000      	movs	r0, #0
 801319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131a2:	2e00      	cmp	r6, #0
 80131a4:	d0f9      	beq.n	801319a <__sflush_r+0x1a>
 80131a6:	2300      	movs	r3, #0
 80131a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80131ac:	682f      	ldr	r7, [r5, #0]
 80131ae:	6a21      	ldr	r1, [r4, #32]
 80131b0:	602b      	str	r3, [r5, #0]
 80131b2:	d032      	beq.n	801321a <__sflush_r+0x9a>
 80131b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	075a      	lsls	r2, r3, #29
 80131ba:	d505      	bpl.n	80131c8 <__sflush_r+0x48>
 80131bc:	6863      	ldr	r3, [r4, #4]
 80131be:	1ac0      	subs	r0, r0, r3
 80131c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131c2:	b10b      	cbz	r3, 80131c8 <__sflush_r+0x48>
 80131c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131c6:	1ac0      	subs	r0, r0, r3
 80131c8:	2300      	movs	r3, #0
 80131ca:	4602      	mov	r2, r0
 80131cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131ce:	4628      	mov	r0, r5
 80131d0:	6a21      	ldr	r1, [r4, #32]
 80131d2:	47b0      	blx	r6
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	d106      	bne.n	80131e8 <__sflush_r+0x68>
 80131da:	6829      	ldr	r1, [r5, #0]
 80131dc:	291d      	cmp	r1, #29
 80131de:	d82b      	bhi.n	8013238 <__sflush_r+0xb8>
 80131e0:	4a28      	ldr	r2, [pc, #160]	; (8013284 <__sflush_r+0x104>)
 80131e2:	410a      	asrs	r2, r1
 80131e4:	07d6      	lsls	r6, r2, #31
 80131e6:	d427      	bmi.n	8013238 <__sflush_r+0xb8>
 80131e8:	2200      	movs	r2, #0
 80131ea:	04d9      	lsls	r1, r3, #19
 80131ec:	6062      	str	r2, [r4, #4]
 80131ee:	6922      	ldr	r2, [r4, #16]
 80131f0:	6022      	str	r2, [r4, #0]
 80131f2:	d504      	bpl.n	80131fe <__sflush_r+0x7e>
 80131f4:	1c42      	adds	r2, r0, #1
 80131f6:	d101      	bne.n	80131fc <__sflush_r+0x7c>
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	b903      	cbnz	r3, 80131fe <__sflush_r+0x7e>
 80131fc:	6560      	str	r0, [r4, #84]	; 0x54
 80131fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013200:	602f      	str	r7, [r5, #0]
 8013202:	2900      	cmp	r1, #0
 8013204:	d0c9      	beq.n	801319a <__sflush_r+0x1a>
 8013206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801320a:	4299      	cmp	r1, r3
 801320c:	d002      	beq.n	8013214 <__sflush_r+0x94>
 801320e:	4628      	mov	r0, r5
 8013210:	f7ff fa90 	bl	8012734 <_free_r>
 8013214:	2000      	movs	r0, #0
 8013216:	6360      	str	r0, [r4, #52]	; 0x34
 8013218:	e7c0      	b.n	801319c <__sflush_r+0x1c>
 801321a:	2301      	movs	r3, #1
 801321c:	4628      	mov	r0, r5
 801321e:	47b0      	blx	r6
 8013220:	1c41      	adds	r1, r0, #1
 8013222:	d1c8      	bne.n	80131b6 <__sflush_r+0x36>
 8013224:	682b      	ldr	r3, [r5, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d0c5      	beq.n	80131b6 <__sflush_r+0x36>
 801322a:	2b1d      	cmp	r3, #29
 801322c:	d001      	beq.n	8013232 <__sflush_r+0xb2>
 801322e:	2b16      	cmp	r3, #22
 8013230:	d101      	bne.n	8013236 <__sflush_r+0xb6>
 8013232:	602f      	str	r7, [r5, #0]
 8013234:	e7b1      	b.n	801319a <__sflush_r+0x1a>
 8013236:	89a3      	ldrh	r3, [r4, #12]
 8013238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801323c:	81a3      	strh	r3, [r4, #12]
 801323e:	e7ad      	b.n	801319c <__sflush_r+0x1c>
 8013240:	690f      	ldr	r7, [r1, #16]
 8013242:	2f00      	cmp	r7, #0
 8013244:	d0a9      	beq.n	801319a <__sflush_r+0x1a>
 8013246:	0793      	lsls	r3, r2, #30
 8013248:	680e      	ldr	r6, [r1, #0]
 801324a:	600f      	str	r7, [r1, #0]
 801324c:	bf0c      	ite	eq
 801324e:	694b      	ldreq	r3, [r1, #20]
 8013250:	2300      	movne	r3, #0
 8013252:	eba6 0807 	sub.w	r8, r6, r7
 8013256:	608b      	str	r3, [r1, #8]
 8013258:	f1b8 0f00 	cmp.w	r8, #0
 801325c:	dd9d      	ble.n	801319a <__sflush_r+0x1a>
 801325e:	4643      	mov	r3, r8
 8013260:	463a      	mov	r2, r7
 8013262:	6a21      	ldr	r1, [r4, #32]
 8013264:	4628      	mov	r0, r5
 8013266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013268:	47b0      	blx	r6
 801326a:	2800      	cmp	r0, #0
 801326c:	dc06      	bgt.n	801327c <__sflush_r+0xfc>
 801326e:	89a3      	ldrh	r3, [r4, #12]
 8013270:	f04f 30ff 	mov.w	r0, #4294967295
 8013274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013278:	81a3      	strh	r3, [r4, #12]
 801327a:	e78f      	b.n	801319c <__sflush_r+0x1c>
 801327c:	4407      	add	r7, r0
 801327e:	eba8 0800 	sub.w	r8, r8, r0
 8013282:	e7e9      	b.n	8013258 <__sflush_r+0xd8>
 8013284:	dfbffffe 	.word	0xdfbffffe

08013288 <_fflush_r>:
 8013288:	b538      	push	{r3, r4, r5, lr}
 801328a:	690b      	ldr	r3, [r1, #16]
 801328c:	4605      	mov	r5, r0
 801328e:	460c      	mov	r4, r1
 8013290:	b913      	cbnz	r3, 8013298 <_fflush_r+0x10>
 8013292:	2500      	movs	r5, #0
 8013294:	4628      	mov	r0, r5
 8013296:	bd38      	pop	{r3, r4, r5, pc}
 8013298:	b118      	cbz	r0, 80132a2 <_fflush_r+0x1a>
 801329a:	6a03      	ldr	r3, [r0, #32]
 801329c:	b90b      	cbnz	r3, 80132a2 <_fflush_r+0x1a>
 801329e:	f7ff f90d 	bl	80124bc <__sinit>
 80132a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d0f3      	beq.n	8013292 <_fflush_r+0xa>
 80132aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80132ac:	07d0      	lsls	r0, r2, #31
 80132ae:	d404      	bmi.n	80132ba <_fflush_r+0x32>
 80132b0:	0599      	lsls	r1, r3, #22
 80132b2:	d402      	bmi.n	80132ba <_fflush_r+0x32>
 80132b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132b6:	f7ff fa3a 	bl	801272e <__retarget_lock_acquire_recursive>
 80132ba:	4628      	mov	r0, r5
 80132bc:	4621      	mov	r1, r4
 80132be:	f7ff ff5f 	bl	8013180 <__sflush_r>
 80132c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132c4:	4605      	mov	r5, r0
 80132c6:	07da      	lsls	r2, r3, #31
 80132c8:	d4e4      	bmi.n	8013294 <_fflush_r+0xc>
 80132ca:	89a3      	ldrh	r3, [r4, #12]
 80132cc:	059b      	lsls	r3, r3, #22
 80132ce:	d4e1      	bmi.n	8013294 <_fflush_r+0xc>
 80132d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132d2:	f7ff fa2d 	bl	8012730 <__retarget_lock_release_recursive>
 80132d6:	e7dd      	b.n	8013294 <_fflush_r+0xc>

080132d8 <__swbuf_r>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	460e      	mov	r6, r1
 80132dc:	4614      	mov	r4, r2
 80132de:	4605      	mov	r5, r0
 80132e0:	b118      	cbz	r0, 80132ea <__swbuf_r+0x12>
 80132e2:	6a03      	ldr	r3, [r0, #32]
 80132e4:	b90b      	cbnz	r3, 80132ea <__swbuf_r+0x12>
 80132e6:	f7ff f8e9 	bl	80124bc <__sinit>
 80132ea:	69a3      	ldr	r3, [r4, #24]
 80132ec:	60a3      	str	r3, [r4, #8]
 80132ee:	89a3      	ldrh	r3, [r4, #12]
 80132f0:	071a      	lsls	r2, r3, #28
 80132f2:	d525      	bpl.n	8013340 <__swbuf_r+0x68>
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	b31b      	cbz	r3, 8013340 <__swbuf_r+0x68>
 80132f8:	6823      	ldr	r3, [r4, #0]
 80132fa:	b2f6      	uxtb	r6, r6
 80132fc:	6922      	ldr	r2, [r4, #16]
 80132fe:	4637      	mov	r7, r6
 8013300:	1a98      	subs	r0, r3, r2
 8013302:	6963      	ldr	r3, [r4, #20]
 8013304:	4283      	cmp	r3, r0
 8013306:	dc04      	bgt.n	8013312 <__swbuf_r+0x3a>
 8013308:	4621      	mov	r1, r4
 801330a:	4628      	mov	r0, r5
 801330c:	f7ff ffbc 	bl	8013288 <_fflush_r>
 8013310:	b9e0      	cbnz	r0, 801334c <__swbuf_r+0x74>
 8013312:	68a3      	ldr	r3, [r4, #8]
 8013314:	3b01      	subs	r3, #1
 8013316:	60a3      	str	r3, [r4, #8]
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	6022      	str	r2, [r4, #0]
 801331e:	701e      	strb	r6, [r3, #0]
 8013320:	1c43      	adds	r3, r0, #1
 8013322:	6962      	ldr	r2, [r4, #20]
 8013324:	429a      	cmp	r2, r3
 8013326:	d004      	beq.n	8013332 <__swbuf_r+0x5a>
 8013328:	89a3      	ldrh	r3, [r4, #12]
 801332a:	07db      	lsls	r3, r3, #31
 801332c:	d506      	bpl.n	801333c <__swbuf_r+0x64>
 801332e:	2e0a      	cmp	r6, #10
 8013330:	d104      	bne.n	801333c <__swbuf_r+0x64>
 8013332:	4621      	mov	r1, r4
 8013334:	4628      	mov	r0, r5
 8013336:	f7ff ffa7 	bl	8013288 <_fflush_r>
 801333a:	b938      	cbnz	r0, 801334c <__swbuf_r+0x74>
 801333c:	4638      	mov	r0, r7
 801333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013340:	4621      	mov	r1, r4
 8013342:	4628      	mov	r0, r5
 8013344:	f000 f806 	bl	8013354 <__swsetup_r>
 8013348:	2800      	cmp	r0, #0
 801334a:	d0d5      	beq.n	80132f8 <__swbuf_r+0x20>
 801334c:	f04f 37ff 	mov.w	r7, #4294967295
 8013350:	e7f4      	b.n	801333c <__swbuf_r+0x64>
	...

08013354 <__swsetup_r>:
 8013354:	b538      	push	{r3, r4, r5, lr}
 8013356:	4b2a      	ldr	r3, [pc, #168]	; (8013400 <__swsetup_r+0xac>)
 8013358:	4605      	mov	r5, r0
 801335a:	460c      	mov	r4, r1
 801335c:	6818      	ldr	r0, [r3, #0]
 801335e:	b118      	cbz	r0, 8013368 <__swsetup_r+0x14>
 8013360:	6a03      	ldr	r3, [r0, #32]
 8013362:	b90b      	cbnz	r3, 8013368 <__swsetup_r+0x14>
 8013364:	f7ff f8aa 	bl	80124bc <__sinit>
 8013368:	89a3      	ldrh	r3, [r4, #12]
 801336a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801336e:	0718      	lsls	r0, r3, #28
 8013370:	d422      	bmi.n	80133b8 <__swsetup_r+0x64>
 8013372:	06d9      	lsls	r1, r3, #27
 8013374:	d407      	bmi.n	8013386 <__swsetup_r+0x32>
 8013376:	2309      	movs	r3, #9
 8013378:	602b      	str	r3, [r5, #0]
 801337a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801337e:	f04f 30ff 	mov.w	r0, #4294967295
 8013382:	81a3      	strh	r3, [r4, #12]
 8013384:	e034      	b.n	80133f0 <__swsetup_r+0x9c>
 8013386:	0758      	lsls	r0, r3, #29
 8013388:	d512      	bpl.n	80133b0 <__swsetup_r+0x5c>
 801338a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801338c:	b141      	cbz	r1, 80133a0 <__swsetup_r+0x4c>
 801338e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013392:	4299      	cmp	r1, r3
 8013394:	d002      	beq.n	801339c <__swsetup_r+0x48>
 8013396:	4628      	mov	r0, r5
 8013398:	f7ff f9cc 	bl	8012734 <_free_r>
 801339c:	2300      	movs	r3, #0
 801339e:	6363      	str	r3, [r4, #52]	; 0x34
 80133a0:	89a3      	ldrh	r3, [r4, #12]
 80133a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133a6:	81a3      	strh	r3, [r4, #12]
 80133a8:	2300      	movs	r3, #0
 80133aa:	6063      	str	r3, [r4, #4]
 80133ac:	6923      	ldr	r3, [r4, #16]
 80133ae:	6023      	str	r3, [r4, #0]
 80133b0:	89a3      	ldrh	r3, [r4, #12]
 80133b2:	f043 0308 	orr.w	r3, r3, #8
 80133b6:	81a3      	strh	r3, [r4, #12]
 80133b8:	6923      	ldr	r3, [r4, #16]
 80133ba:	b94b      	cbnz	r3, 80133d0 <__swsetup_r+0x7c>
 80133bc:	89a3      	ldrh	r3, [r4, #12]
 80133be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133c6:	d003      	beq.n	80133d0 <__swsetup_r+0x7c>
 80133c8:	4621      	mov	r1, r4
 80133ca:	4628      	mov	r0, r5
 80133cc:	f000 f8b3 	bl	8013536 <__smakebuf_r>
 80133d0:	89a0      	ldrh	r0, [r4, #12]
 80133d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133d6:	f010 0301 	ands.w	r3, r0, #1
 80133da:	d00a      	beq.n	80133f2 <__swsetup_r+0x9e>
 80133dc:	2300      	movs	r3, #0
 80133de:	60a3      	str	r3, [r4, #8]
 80133e0:	6963      	ldr	r3, [r4, #20]
 80133e2:	425b      	negs	r3, r3
 80133e4:	61a3      	str	r3, [r4, #24]
 80133e6:	6923      	ldr	r3, [r4, #16]
 80133e8:	b943      	cbnz	r3, 80133fc <__swsetup_r+0xa8>
 80133ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133ee:	d1c4      	bne.n	801337a <__swsetup_r+0x26>
 80133f0:	bd38      	pop	{r3, r4, r5, pc}
 80133f2:	0781      	lsls	r1, r0, #30
 80133f4:	bf58      	it	pl
 80133f6:	6963      	ldrpl	r3, [r4, #20]
 80133f8:	60a3      	str	r3, [r4, #8]
 80133fa:	e7f4      	b.n	80133e6 <__swsetup_r+0x92>
 80133fc:	2000      	movs	r0, #0
 80133fe:	e7f7      	b.n	80133f0 <__swsetup_r+0x9c>
 8013400:	2000014c 	.word	0x2000014c

08013404 <memmove>:
 8013404:	4288      	cmp	r0, r1
 8013406:	b510      	push	{r4, lr}
 8013408:	eb01 0402 	add.w	r4, r1, r2
 801340c:	d902      	bls.n	8013414 <memmove+0x10>
 801340e:	4284      	cmp	r4, r0
 8013410:	4623      	mov	r3, r4
 8013412:	d807      	bhi.n	8013424 <memmove+0x20>
 8013414:	1e43      	subs	r3, r0, #1
 8013416:	42a1      	cmp	r1, r4
 8013418:	d008      	beq.n	801342c <memmove+0x28>
 801341a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801341e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013422:	e7f8      	b.n	8013416 <memmove+0x12>
 8013424:	4402      	add	r2, r0
 8013426:	4601      	mov	r1, r0
 8013428:	428a      	cmp	r2, r1
 801342a:	d100      	bne.n	801342e <memmove+0x2a>
 801342c:	bd10      	pop	{r4, pc}
 801342e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013436:	e7f7      	b.n	8013428 <memmove+0x24>

08013438 <_sbrk_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	2300      	movs	r3, #0
 801343c:	4d05      	ldr	r5, [pc, #20]	; (8013454 <_sbrk_r+0x1c>)
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	602b      	str	r3, [r5, #0]
 8013444:	f7ee fbc6 	bl	8001bd4 <_sbrk>
 8013448:	1c43      	adds	r3, r0, #1
 801344a:	d102      	bne.n	8013452 <_sbrk_r+0x1a>
 801344c:	682b      	ldr	r3, [r5, #0]
 801344e:	b103      	cbz	r3, 8013452 <_sbrk_r+0x1a>
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	bd38      	pop	{r3, r4, r5, pc}
 8013454:	200007b8 	.word	0x200007b8

08013458 <memchr>:
 8013458:	b2c9      	uxtb	r1, r1
 801345a:	4402      	add	r2, r0
 801345c:	b510      	push	{r4, lr}
 801345e:	4290      	cmp	r0, r2
 8013460:	4603      	mov	r3, r0
 8013462:	d101      	bne.n	8013468 <memchr+0x10>
 8013464:	2300      	movs	r3, #0
 8013466:	e003      	b.n	8013470 <memchr+0x18>
 8013468:	781c      	ldrb	r4, [r3, #0]
 801346a:	3001      	adds	r0, #1
 801346c:	428c      	cmp	r4, r1
 801346e:	d1f6      	bne.n	801345e <memchr+0x6>
 8013470:	4618      	mov	r0, r3
 8013472:	bd10      	pop	{r4, pc}

08013474 <memcpy>:
 8013474:	440a      	add	r2, r1
 8013476:	1e43      	subs	r3, r0, #1
 8013478:	4291      	cmp	r1, r2
 801347a:	d100      	bne.n	801347e <memcpy+0xa>
 801347c:	4770      	bx	lr
 801347e:	b510      	push	{r4, lr}
 8013480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013484:	4291      	cmp	r1, r2
 8013486:	f803 4f01 	strb.w	r4, [r3, #1]!
 801348a:	d1f9      	bne.n	8013480 <memcpy+0xc>
 801348c:	bd10      	pop	{r4, pc}

0801348e <_realloc_r>:
 801348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013492:	4680      	mov	r8, r0
 8013494:	4614      	mov	r4, r2
 8013496:	460e      	mov	r6, r1
 8013498:	b921      	cbnz	r1, 80134a4 <_realloc_r+0x16>
 801349a:	4611      	mov	r1, r2
 801349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	f7ff b9b4 	b.w	801280c <_malloc_r>
 80134a4:	b92a      	cbnz	r2, 80134b2 <_realloc_r+0x24>
 80134a6:	4625      	mov	r5, r4
 80134a8:	f7ff f944 	bl	8012734 <_free_r>
 80134ac:	4628      	mov	r0, r5
 80134ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b2:	f000 f89f 	bl	80135f4 <_malloc_usable_size_r>
 80134b6:	4284      	cmp	r4, r0
 80134b8:	4607      	mov	r7, r0
 80134ba:	d802      	bhi.n	80134c2 <_realloc_r+0x34>
 80134bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80134c0:	d812      	bhi.n	80134e8 <_realloc_r+0x5a>
 80134c2:	4621      	mov	r1, r4
 80134c4:	4640      	mov	r0, r8
 80134c6:	f7ff f9a1 	bl	801280c <_malloc_r>
 80134ca:	4605      	mov	r5, r0
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d0ed      	beq.n	80134ac <_realloc_r+0x1e>
 80134d0:	42bc      	cmp	r4, r7
 80134d2:	4622      	mov	r2, r4
 80134d4:	4631      	mov	r1, r6
 80134d6:	bf28      	it	cs
 80134d8:	463a      	movcs	r2, r7
 80134da:	f7ff ffcb 	bl	8013474 <memcpy>
 80134de:	4631      	mov	r1, r6
 80134e0:	4640      	mov	r0, r8
 80134e2:	f7ff f927 	bl	8012734 <_free_r>
 80134e6:	e7e1      	b.n	80134ac <_realloc_r+0x1e>
 80134e8:	4635      	mov	r5, r6
 80134ea:	e7df      	b.n	80134ac <_realloc_r+0x1e>

080134ec <__swhatbuf_r>:
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	460c      	mov	r4, r1
 80134f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f4:	b096      	sub	sp, #88	; 0x58
 80134f6:	4615      	mov	r5, r2
 80134f8:	2900      	cmp	r1, #0
 80134fa:	461e      	mov	r6, r3
 80134fc:	da0c      	bge.n	8013518 <__swhatbuf_r+0x2c>
 80134fe:	89a3      	ldrh	r3, [r4, #12]
 8013500:	2100      	movs	r1, #0
 8013502:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013506:	bf0c      	ite	eq
 8013508:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801350c:	2340      	movne	r3, #64	; 0x40
 801350e:	2000      	movs	r0, #0
 8013510:	6031      	str	r1, [r6, #0]
 8013512:	602b      	str	r3, [r5, #0]
 8013514:	b016      	add	sp, #88	; 0x58
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	466a      	mov	r2, sp
 801351a:	f000 f849 	bl	80135b0 <_fstat_r>
 801351e:	2800      	cmp	r0, #0
 8013520:	dbed      	blt.n	80134fe <__swhatbuf_r+0x12>
 8013522:	9901      	ldr	r1, [sp, #4]
 8013524:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013528:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801352c:	4259      	negs	r1, r3
 801352e:	4159      	adcs	r1, r3
 8013530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013534:	e7eb      	b.n	801350e <__swhatbuf_r+0x22>

08013536 <__smakebuf_r>:
 8013536:	898b      	ldrh	r3, [r1, #12]
 8013538:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801353a:	079d      	lsls	r5, r3, #30
 801353c:	4606      	mov	r6, r0
 801353e:	460c      	mov	r4, r1
 8013540:	d507      	bpl.n	8013552 <__smakebuf_r+0x1c>
 8013542:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013546:	6023      	str	r3, [r4, #0]
 8013548:	6123      	str	r3, [r4, #16]
 801354a:	2301      	movs	r3, #1
 801354c:	6163      	str	r3, [r4, #20]
 801354e:	b002      	add	sp, #8
 8013550:	bd70      	pop	{r4, r5, r6, pc}
 8013552:	ab01      	add	r3, sp, #4
 8013554:	466a      	mov	r2, sp
 8013556:	f7ff ffc9 	bl	80134ec <__swhatbuf_r>
 801355a:	9900      	ldr	r1, [sp, #0]
 801355c:	4605      	mov	r5, r0
 801355e:	4630      	mov	r0, r6
 8013560:	f7ff f954 	bl	801280c <_malloc_r>
 8013564:	b948      	cbnz	r0, 801357a <__smakebuf_r+0x44>
 8013566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801356a:	059a      	lsls	r2, r3, #22
 801356c:	d4ef      	bmi.n	801354e <__smakebuf_r+0x18>
 801356e:	f023 0303 	bic.w	r3, r3, #3
 8013572:	f043 0302 	orr.w	r3, r3, #2
 8013576:	81a3      	strh	r3, [r4, #12]
 8013578:	e7e3      	b.n	8013542 <__smakebuf_r+0xc>
 801357a:	89a3      	ldrh	r3, [r4, #12]
 801357c:	6020      	str	r0, [r4, #0]
 801357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013582:	6120      	str	r0, [r4, #16]
 8013584:	81a3      	strh	r3, [r4, #12]
 8013586:	9b00      	ldr	r3, [sp, #0]
 8013588:	6163      	str	r3, [r4, #20]
 801358a:	9b01      	ldr	r3, [sp, #4]
 801358c:	b15b      	cbz	r3, 80135a6 <__smakebuf_r+0x70>
 801358e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013592:	4630      	mov	r0, r6
 8013594:	f000 f81e 	bl	80135d4 <_isatty_r>
 8013598:	b128      	cbz	r0, 80135a6 <__smakebuf_r+0x70>
 801359a:	89a3      	ldrh	r3, [r4, #12]
 801359c:	f023 0303 	bic.w	r3, r3, #3
 80135a0:	f043 0301 	orr.w	r3, r3, #1
 80135a4:	81a3      	strh	r3, [r4, #12]
 80135a6:	89a3      	ldrh	r3, [r4, #12]
 80135a8:	431d      	orrs	r5, r3
 80135aa:	81a5      	strh	r5, [r4, #12]
 80135ac:	e7cf      	b.n	801354e <__smakebuf_r+0x18>
	...

080135b0 <_fstat_r>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	2300      	movs	r3, #0
 80135b4:	4d06      	ldr	r5, [pc, #24]	; (80135d0 <_fstat_r+0x20>)
 80135b6:	4604      	mov	r4, r0
 80135b8:	4608      	mov	r0, r1
 80135ba:	4611      	mov	r1, r2
 80135bc:	602b      	str	r3, [r5, #0]
 80135be:	f7ee fae0 	bl	8001b82 <_fstat>
 80135c2:	1c43      	adds	r3, r0, #1
 80135c4:	d102      	bne.n	80135cc <_fstat_r+0x1c>
 80135c6:	682b      	ldr	r3, [r5, #0]
 80135c8:	b103      	cbz	r3, 80135cc <_fstat_r+0x1c>
 80135ca:	6023      	str	r3, [r4, #0]
 80135cc:	bd38      	pop	{r3, r4, r5, pc}
 80135ce:	bf00      	nop
 80135d0:	200007b8 	.word	0x200007b8

080135d4 <_isatty_r>:
 80135d4:	b538      	push	{r3, r4, r5, lr}
 80135d6:	2300      	movs	r3, #0
 80135d8:	4d05      	ldr	r5, [pc, #20]	; (80135f0 <_isatty_r+0x1c>)
 80135da:	4604      	mov	r4, r0
 80135dc:	4608      	mov	r0, r1
 80135de:	602b      	str	r3, [r5, #0]
 80135e0:	f7ee fadf 	bl	8001ba2 <_isatty>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_isatty_r+0x1a>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_isatty_r+0x1a>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	200007b8 	.word	0x200007b8

080135f4 <_malloc_usable_size_r>:
 80135f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135f8:	1f18      	subs	r0, r3, #4
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	bfbc      	itt	lt
 80135fe:	580b      	ldrlt	r3, [r1, r0]
 8013600:	18c0      	addlt	r0, r0, r3
 8013602:	4770      	bx	lr

08013604 <pow>:
 8013604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013606:	ec55 4b11 	vmov	r4, r5, d1
 801360a:	ed2d 8b02 	vpush	{d8}
 801360e:	eeb0 8a40 	vmov.f32	s16, s0
 8013612:	eef0 8a60 	vmov.f32	s17, s1
 8013616:	f000 f8ab 	bl	8013770 <__ieee754_pow>
 801361a:	4622      	mov	r2, r4
 801361c:	462b      	mov	r3, r5
 801361e:	4620      	mov	r0, r4
 8013620:	4629      	mov	r1, r5
 8013622:	ec57 6b10 	vmov	r6, r7, d0
 8013626:	f7ed fa89 	bl	8000b3c <__aeabi_dcmpun>
 801362a:	2800      	cmp	r0, #0
 801362c:	d13b      	bne.n	80136a6 <pow+0xa2>
 801362e:	2200      	movs	r2, #0
 8013630:	2300      	movs	r3, #0
 8013632:	ec51 0b18 	vmov	r0, r1, d8
 8013636:	f7ed fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 801363a:	b1b8      	cbz	r0, 801366c <pow+0x68>
 801363c:	2200      	movs	r2, #0
 801363e:	2300      	movs	r3, #0
 8013640:	4620      	mov	r0, r4
 8013642:	4629      	mov	r1, r5
 8013644:	f7ed fa48 	bl	8000ad8 <__aeabi_dcmpeq>
 8013648:	2800      	cmp	r0, #0
 801364a:	d146      	bne.n	80136da <pow+0xd6>
 801364c:	ec45 4b10 	vmov	d0, r4, r5
 8013650:	f000 f848 	bl	80136e4 <finite>
 8013654:	b338      	cbz	r0, 80136a6 <pow+0xa2>
 8013656:	2200      	movs	r2, #0
 8013658:	2300      	movs	r3, #0
 801365a:	4620      	mov	r0, r4
 801365c:	4629      	mov	r1, r5
 801365e:	f7ed fa45 	bl	8000aec <__aeabi_dcmplt>
 8013662:	b300      	cbz	r0, 80136a6 <pow+0xa2>
 8013664:	f7ff f838 	bl	80126d8 <__errno>
 8013668:	2322      	movs	r3, #34	; 0x22
 801366a:	e01b      	b.n	80136a4 <pow+0xa0>
 801366c:	ec47 6b10 	vmov	d0, r6, r7
 8013670:	f000 f838 	bl	80136e4 <finite>
 8013674:	b9e0      	cbnz	r0, 80136b0 <pow+0xac>
 8013676:	eeb0 0a48 	vmov.f32	s0, s16
 801367a:	eef0 0a68 	vmov.f32	s1, s17
 801367e:	f000 f831 	bl	80136e4 <finite>
 8013682:	b1a8      	cbz	r0, 80136b0 <pow+0xac>
 8013684:	ec45 4b10 	vmov	d0, r4, r5
 8013688:	f000 f82c 	bl	80136e4 <finite>
 801368c:	b180      	cbz	r0, 80136b0 <pow+0xac>
 801368e:	4632      	mov	r2, r6
 8013690:	463b      	mov	r3, r7
 8013692:	4630      	mov	r0, r6
 8013694:	4639      	mov	r1, r7
 8013696:	f7ed fa51 	bl	8000b3c <__aeabi_dcmpun>
 801369a:	2800      	cmp	r0, #0
 801369c:	d0e2      	beq.n	8013664 <pow+0x60>
 801369e:	f7ff f81b 	bl	80126d8 <__errno>
 80136a2:	2321      	movs	r3, #33	; 0x21
 80136a4:	6003      	str	r3, [r0, #0]
 80136a6:	ecbd 8b02 	vpop	{d8}
 80136aa:	ec47 6b10 	vmov	d0, r6, r7
 80136ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136b0:	2200      	movs	r2, #0
 80136b2:	2300      	movs	r3, #0
 80136b4:	4630      	mov	r0, r6
 80136b6:	4639      	mov	r1, r7
 80136b8:	f7ed fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d0f2      	beq.n	80136a6 <pow+0xa2>
 80136c0:	eeb0 0a48 	vmov.f32	s0, s16
 80136c4:	eef0 0a68 	vmov.f32	s1, s17
 80136c8:	f000 f80c 	bl	80136e4 <finite>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d0ea      	beq.n	80136a6 <pow+0xa2>
 80136d0:	ec45 4b10 	vmov	d0, r4, r5
 80136d4:	f000 f806 	bl	80136e4 <finite>
 80136d8:	e7c3      	b.n	8013662 <pow+0x5e>
 80136da:	2600      	movs	r6, #0
 80136dc:	4f00      	ldr	r7, [pc, #0]	; (80136e0 <pow+0xdc>)
 80136de:	e7e2      	b.n	80136a6 <pow+0xa2>
 80136e0:	3ff00000 	.word	0x3ff00000

080136e4 <finite>:
 80136e4:	b082      	sub	sp, #8
 80136e6:	ed8d 0b00 	vstr	d0, [sp]
 80136ea:	9801      	ldr	r0, [sp, #4]
 80136ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80136f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80136f4:	0fc0      	lsrs	r0, r0, #31
 80136f6:	b002      	add	sp, #8
 80136f8:	4770      	bx	lr
	...

080136fc <trunc>:
 80136fc:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013700:	ec5c bb10 	vmov	fp, ip, d0
 8013704:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013708:	4664      	mov	r4, ip
 801370a:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 801370e:	2913      	cmp	r1, #19
 8013710:	dc12      	bgt.n	8013738 <trunc+0x3c>
 8013712:	2900      	cmp	r1, #0
 8013714:	bfad      	iteet	ge
 8013716:	4b15      	ldrge	r3, [pc, #84]	; (801376c <trunc+0x70>)
 8013718:	2200      	movlt	r2, #0
 801371a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 801371e:	2200      	movge	r2, #0
 8013720:	bfa8      	it	ge
 8013722:	fa43 f101 	asrge.w	r1, r3, r1
 8013726:	4693      	mov	fp, r2
 8013728:	bfa8      	it	ge
 801372a:	ea01 030c 	andge.w	r3, r1, ip
 801372e:	469c      	mov	ip, r3
 8013730:	ec4c bb10 	vmov	d0, fp, ip
 8013734:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013738:	2933      	cmp	r1, #51	; 0x33
 801373a:	dd0d      	ble.n	8013758 <trunc+0x5c>
 801373c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013740:	d1f6      	bne.n	8013730 <trunc+0x34>
 8013742:	4663      	mov	r3, ip
 8013744:	ee10 2a10 	vmov	r2, s0
 8013748:	ee10 0a10 	vmov	r0, s0
 801374c:	4621      	mov	r1, r4
 801374e:	f7ec fda5 	bl	800029c <__adddf3>
 8013752:	4683      	mov	fp, r0
 8013754:	468c      	mov	ip, r1
 8013756:	e7eb      	b.n	8013730 <trunc+0x34>
 8013758:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 801375c:	f04f 33ff 	mov.w	r3, #4294967295
 8013760:	46a4      	mov	ip, r4
 8013762:	40c3      	lsrs	r3, r0
 8013764:	ea2b 0603 	bic.w	r6, fp, r3
 8013768:	46b3      	mov	fp, r6
 801376a:	e7e1      	b.n	8013730 <trunc+0x34>
 801376c:	fff00000 	.word	0xfff00000

08013770 <__ieee754_pow>:
 8013770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	ed2d 8b06 	vpush	{d8-d10}
 8013778:	b089      	sub	sp, #36	; 0x24
 801377a:	ed8d 1b00 	vstr	d1, [sp]
 801377e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013782:	ec57 6b10 	vmov	r6, r7, d0
 8013786:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801378a:	ea58 0102 	orrs.w	r1, r8, r2
 801378e:	d115      	bne.n	80137bc <__ieee754_pow+0x4c>
 8013790:	19b3      	adds	r3, r6, r6
 8013792:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013796:	4152      	adcs	r2, r2
 8013798:	4299      	cmp	r1, r3
 801379a:	4b89      	ldr	r3, [pc, #548]	; (80139c0 <__ieee754_pow+0x250>)
 801379c:	4193      	sbcs	r3, r2
 801379e:	f080 84d2 	bcs.w	8014146 <__ieee754_pow+0x9d6>
 80137a2:	4630      	mov	r0, r6
 80137a4:	4639      	mov	r1, r7
 80137a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137aa:	f7ec fd77 	bl	800029c <__adddf3>
 80137ae:	ec41 0b10 	vmov	d0, r0, r1
 80137b2:	b009      	add	sp, #36	; 0x24
 80137b4:	ecbd 8b06 	vpop	{d8-d10}
 80137b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137bc:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80137c0:	4b80      	ldr	r3, [pc, #512]	; (80139c4 <__ieee754_pow+0x254>)
 80137c2:	463d      	mov	r5, r7
 80137c4:	ee10 aa10 	vmov	sl, s0
 80137c8:	429c      	cmp	r4, r3
 80137ca:	dc06      	bgt.n	80137da <__ieee754_pow+0x6a>
 80137cc:	d101      	bne.n	80137d2 <__ieee754_pow+0x62>
 80137ce:	2e00      	cmp	r6, #0
 80137d0:	d1e7      	bne.n	80137a2 <__ieee754_pow+0x32>
 80137d2:	4598      	cmp	r8, r3
 80137d4:	dc01      	bgt.n	80137da <__ieee754_pow+0x6a>
 80137d6:	d10f      	bne.n	80137f8 <__ieee754_pow+0x88>
 80137d8:	b172      	cbz	r2, 80137f8 <__ieee754_pow+0x88>
 80137da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80137de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80137e2:	ea55 050a 	orrs.w	r5, r5, sl
 80137e6:	d1dc      	bne.n	80137a2 <__ieee754_pow+0x32>
 80137e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80137ec:	18db      	adds	r3, r3, r3
 80137ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80137f2:	4152      	adcs	r2, r2
 80137f4:	429d      	cmp	r5, r3
 80137f6:	e7d0      	b.n	801379a <__ieee754_pow+0x2a>
 80137f8:	2d00      	cmp	r5, #0
 80137fa:	da3b      	bge.n	8013874 <__ieee754_pow+0x104>
 80137fc:	4b72      	ldr	r3, [pc, #456]	; (80139c8 <__ieee754_pow+0x258>)
 80137fe:	4598      	cmp	r8, r3
 8013800:	dc51      	bgt.n	80138a6 <__ieee754_pow+0x136>
 8013802:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013806:	4598      	cmp	r8, r3
 8013808:	f340 84ac 	ble.w	8014164 <__ieee754_pow+0x9f4>
 801380c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013810:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013814:	2b14      	cmp	r3, #20
 8013816:	dd0f      	ble.n	8013838 <__ieee754_pow+0xc8>
 8013818:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801381c:	fa22 f103 	lsr.w	r1, r2, r3
 8013820:	fa01 f303 	lsl.w	r3, r1, r3
 8013824:	4293      	cmp	r3, r2
 8013826:	f040 849d 	bne.w	8014164 <__ieee754_pow+0x9f4>
 801382a:	f001 0101 	and.w	r1, r1, #1
 801382e:	f1c1 0302 	rsb	r3, r1, #2
 8013832:	9304      	str	r3, [sp, #16]
 8013834:	b182      	cbz	r2, 8013858 <__ieee754_pow+0xe8>
 8013836:	e05f      	b.n	80138f8 <__ieee754_pow+0x188>
 8013838:	2a00      	cmp	r2, #0
 801383a:	d15b      	bne.n	80138f4 <__ieee754_pow+0x184>
 801383c:	f1c3 0314 	rsb	r3, r3, #20
 8013840:	fa48 f103 	asr.w	r1, r8, r3
 8013844:	fa01 f303 	lsl.w	r3, r1, r3
 8013848:	4543      	cmp	r3, r8
 801384a:	f040 8488 	bne.w	801415e <__ieee754_pow+0x9ee>
 801384e:	f001 0101 	and.w	r1, r1, #1
 8013852:	f1c1 0302 	rsb	r3, r1, #2
 8013856:	9304      	str	r3, [sp, #16]
 8013858:	4b5c      	ldr	r3, [pc, #368]	; (80139cc <__ieee754_pow+0x25c>)
 801385a:	4598      	cmp	r8, r3
 801385c:	d132      	bne.n	80138c4 <__ieee754_pow+0x154>
 801385e:	f1b9 0f00 	cmp.w	r9, #0
 8013862:	f280 8478 	bge.w	8014156 <__ieee754_pow+0x9e6>
 8013866:	4632      	mov	r2, r6
 8013868:	463b      	mov	r3, r7
 801386a:	2000      	movs	r0, #0
 801386c:	4957      	ldr	r1, [pc, #348]	; (80139cc <__ieee754_pow+0x25c>)
 801386e:	f7ec fff5 	bl	800085c <__aeabi_ddiv>
 8013872:	e79c      	b.n	80137ae <__ieee754_pow+0x3e>
 8013874:	2300      	movs	r3, #0
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	2a00      	cmp	r2, #0
 801387a:	d13d      	bne.n	80138f8 <__ieee754_pow+0x188>
 801387c:	4b51      	ldr	r3, [pc, #324]	; (80139c4 <__ieee754_pow+0x254>)
 801387e:	4598      	cmp	r8, r3
 8013880:	d1ea      	bne.n	8013858 <__ieee754_pow+0xe8>
 8013882:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013886:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801388a:	ea53 030a 	orrs.w	r3, r3, sl
 801388e:	f000 845a 	beq.w	8014146 <__ieee754_pow+0x9d6>
 8013892:	4b4f      	ldr	r3, [pc, #316]	; (80139d0 <__ieee754_pow+0x260>)
 8013894:	429c      	cmp	r4, r3
 8013896:	dd08      	ble.n	80138aa <__ieee754_pow+0x13a>
 8013898:	f1b9 0f00 	cmp.w	r9, #0
 801389c:	f2c0 8457 	blt.w	801414e <__ieee754_pow+0x9de>
 80138a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138a4:	e783      	b.n	80137ae <__ieee754_pow+0x3e>
 80138a6:	2302      	movs	r3, #2
 80138a8:	e7e5      	b.n	8013876 <__ieee754_pow+0x106>
 80138aa:	f1b9 0f00 	cmp.w	r9, #0
 80138ae:	f04f 0000 	mov.w	r0, #0
 80138b2:	f04f 0100 	mov.w	r1, #0
 80138b6:	f6bf af7a 	bge.w	80137ae <__ieee754_pow+0x3e>
 80138ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80138be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80138c2:	e774      	b.n	80137ae <__ieee754_pow+0x3e>
 80138c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80138c8:	d106      	bne.n	80138d8 <__ieee754_pow+0x168>
 80138ca:	4632      	mov	r2, r6
 80138cc:	463b      	mov	r3, r7
 80138ce:	4630      	mov	r0, r6
 80138d0:	4639      	mov	r1, r7
 80138d2:	f7ec fe99 	bl	8000608 <__aeabi_dmul>
 80138d6:	e76a      	b.n	80137ae <__ieee754_pow+0x3e>
 80138d8:	4b3e      	ldr	r3, [pc, #248]	; (80139d4 <__ieee754_pow+0x264>)
 80138da:	4599      	cmp	r9, r3
 80138dc:	d10c      	bne.n	80138f8 <__ieee754_pow+0x188>
 80138de:	2d00      	cmp	r5, #0
 80138e0:	db0a      	blt.n	80138f8 <__ieee754_pow+0x188>
 80138e2:	ec47 6b10 	vmov	d0, r6, r7
 80138e6:	b009      	add	sp, #36	; 0x24
 80138e8:	ecbd 8b06 	vpop	{d8-d10}
 80138ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f0:	f000 bd24 	b.w	801433c <__ieee754_sqrt>
 80138f4:	2300      	movs	r3, #0
 80138f6:	9304      	str	r3, [sp, #16]
 80138f8:	ec47 6b10 	vmov	d0, r6, r7
 80138fc:	f000 fc66 	bl	80141cc <fabs>
 8013900:	ec51 0b10 	vmov	r0, r1, d0
 8013904:	f1ba 0f00 	cmp.w	sl, #0
 8013908:	d129      	bne.n	801395e <__ieee754_pow+0x1ee>
 801390a:	b124      	cbz	r4, 8013916 <__ieee754_pow+0x1a6>
 801390c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013910:	4b2e      	ldr	r3, [pc, #184]	; (80139cc <__ieee754_pow+0x25c>)
 8013912:	429a      	cmp	r2, r3
 8013914:	d123      	bne.n	801395e <__ieee754_pow+0x1ee>
 8013916:	f1b9 0f00 	cmp.w	r9, #0
 801391a:	da05      	bge.n	8013928 <__ieee754_pow+0x1b8>
 801391c:	4602      	mov	r2, r0
 801391e:	460b      	mov	r3, r1
 8013920:	2000      	movs	r0, #0
 8013922:	492a      	ldr	r1, [pc, #168]	; (80139cc <__ieee754_pow+0x25c>)
 8013924:	f7ec ff9a 	bl	800085c <__aeabi_ddiv>
 8013928:	2d00      	cmp	r5, #0
 801392a:	f6bf af40 	bge.w	80137ae <__ieee754_pow+0x3e>
 801392e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013932:	9b04      	ldr	r3, [sp, #16]
 8013934:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013938:	431c      	orrs	r4, r3
 801393a:	d108      	bne.n	801394e <__ieee754_pow+0x1de>
 801393c:	4602      	mov	r2, r0
 801393e:	460b      	mov	r3, r1
 8013940:	4610      	mov	r0, r2
 8013942:	4619      	mov	r1, r3
 8013944:	f7ec fca8 	bl	8000298 <__aeabi_dsub>
 8013948:	4602      	mov	r2, r0
 801394a:	460b      	mov	r3, r1
 801394c:	e78f      	b.n	801386e <__ieee754_pow+0xfe>
 801394e:	9b04      	ldr	r3, [sp, #16]
 8013950:	2b01      	cmp	r3, #1
 8013952:	f47f af2c 	bne.w	80137ae <__ieee754_pow+0x3e>
 8013956:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801395a:	4619      	mov	r1, r3
 801395c:	e727      	b.n	80137ae <__ieee754_pow+0x3e>
 801395e:	0feb      	lsrs	r3, r5, #31
 8013960:	3b01      	subs	r3, #1
 8013962:	9306      	str	r3, [sp, #24]
 8013964:	9a06      	ldr	r2, [sp, #24]
 8013966:	9b04      	ldr	r3, [sp, #16]
 8013968:	4313      	orrs	r3, r2
 801396a:	d102      	bne.n	8013972 <__ieee754_pow+0x202>
 801396c:	4632      	mov	r2, r6
 801396e:	463b      	mov	r3, r7
 8013970:	e7e6      	b.n	8013940 <__ieee754_pow+0x1d0>
 8013972:	4b19      	ldr	r3, [pc, #100]	; (80139d8 <__ieee754_pow+0x268>)
 8013974:	4598      	cmp	r8, r3
 8013976:	f340 80fb 	ble.w	8013b70 <__ieee754_pow+0x400>
 801397a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801397e:	4598      	cmp	r8, r3
 8013980:	4b13      	ldr	r3, [pc, #76]	; (80139d0 <__ieee754_pow+0x260>)
 8013982:	dd0c      	ble.n	801399e <__ieee754_pow+0x22e>
 8013984:	429c      	cmp	r4, r3
 8013986:	dc0f      	bgt.n	80139a8 <__ieee754_pow+0x238>
 8013988:	f1b9 0f00 	cmp.w	r9, #0
 801398c:	da0f      	bge.n	80139ae <__ieee754_pow+0x23e>
 801398e:	2000      	movs	r0, #0
 8013990:	b009      	add	sp, #36	; 0x24
 8013992:	ecbd 8b06 	vpop	{d8-d10}
 8013996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399a:	f000 bcc6 	b.w	801432a <__math_oflow>
 801399e:	429c      	cmp	r4, r3
 80139a0:	dbf2      	blt.n	8013988 <__ieee754_pow+0x218>
 80139a2:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <__ieee754_pow+0x25c>)
 80139a4:	429c      	cmp	r4, r3
 80139a6:	dd19      	ble.n	80139dc <__ieee754_pow+0x26c>
 80139a8:	f1b9 0f00 	cmp.w	r9, #0
 80139ac:	dcef      	bgt.n	801398e <__ieee754_pow+0x21e>
 80139ae:	2000      	movs	r0, #0
 80139b0:	b009      	add	sp, #36	; 0x24
 80139b2:	ecbd 8b06 	vpop	{d8-d10}
 80139b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ba:	f000 bcad 	b.w	8014318 <__math_uflow>
 80139be:	bf00      	nop
 80139c0:	fff00000 	.word	0xfff00000
 80139c4:	7ff00000 	.word	0x7ff00000
 80139c8:	433fffff 	.word	0x433fffff
 80139cc:	3ff00000 	.word	0x3ff00000
 80139d0:	3fefffff 	.word	0x3fefffff
 80139d4:	3fe00000 	.word	0x3fe00000
 80139d8:	41e00000 	.word	0x41e00000
 80139dc:	2200      	movs	r2, #0
 80139de:	4b60      	ldr	r3, [pc, #384]	; (8013b60 <__ieee754_pow+0x3f0>)
 80139e0:	f7ec fc5a 	bl	8000298 <__aeabi_dsub>
 80139e4:	4604      	mov	r4, r0
 80139e6:	460d      	mov	r5, r1
 80139e8:	a353      	add	r3, pc, #332	; (adr r3, 8013b38 <__ieee754_pow+0x3c8>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fe0b 	bl	8000608 <__aeabi_dmul>
 80139f2:	4606      	mov	r6, r0
 80139f4:	460f      	mov	r7, r1
 80139f6:	4620      	mov	r0, r4
 80139f8:	4629      	mov	r1, r5
 80139fa:	a351      	add	r3, pc, #324	; (adr r3, 8013b40 <__ieee754_pow+0x3d0>)
 80139fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a00:	f7ec fe02 	bl	8000608 <__aeabi_dmul>
 8013a04:	2200      	movs	r2, #0
 8013a06:	4682      	mov	sl, r0
 8013a08:	468b      	mov	fp, r1
 8013a0a:	4b56      	ldr	r3, [pc, #344]	; (8013b64 <__ieee754_pow+0x3f4>)
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	4629      	mov	r1, r5
 8013a10:	f7ec fdfa 	bl	8000608 <__aeabi_dmul>
 8013a14:	4602      	mov	r2, r0
 8013a16:	460b      	mov	r3, r1
 8013a18:	a14b      	add	r1, pc, #300	; (adr r1, 8013b48 <__ieee754_pow+0x3d8>)
 8013a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a1e:	f7ec fc3b 	bl	8000298 <__aeabi_dsub>
 8013a22:	4622      	mov	r2, r4
 8013a24:	462b      	mov	r3, r5
 8013a26:	f7ec fdef 	bl	8000608 <__aeabi_dmul>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	460b      	mov	r3, r1
 8013a2e:	2000      	movs	r0, #0
 8013a30:	494d      	ldr	r1, [pc, #308]	; (8013b68 <__ieee754_pow+0x3f8>)
 8013a32:	f7ec fc31 	bl	8000298 <__aeabi_dsub>
 8013a36:	4680      	mov	r8, r0
 8013a38:	4689      	mov	r9, r1
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	462b      	mov	r3, r5
 8013a3e:	4620      	mov	r0, r4
 8013a40:	4629      	mov	r1, r5
 8013a42:	f7ec fde1 	bl	8000608 <__aeabi_dmul>
 8013a46:	4602      	mov	r2, r0
 8013a48:	460b      	mov	r3, r1
 8013a4a:	4640      	mov	r0, r8
 8013a4c:	4649      	mov	r1, r9
 8013a4e:	f7ec fddb 	bl	8000608 <__aeabi_dmul>
 8013a52:	a33f      	add	r3, pc, #252	; (adr r3, 8013b50 <__ieee754_pow+0x3e0>)
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	f7ec fdd6 	bl	8000608 <__aeabi_dmul>
 8013a5c:	4602      	mov	r2, r0
 8013a5e:	460b      	mov	r3, r1
 8013a60:	4650      	mov	r0, sl
 8013a62:	4659      	mov	r1, fp
 8013a64:	f7ec fc18 	bl	8000298 <__aeabi_dsub>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	4680      	mov	r8, r0
 8013a6e:	4689      	mov	r9, r1
 8013a70:	4630      	mov	r0, r6
 8013a72:	4639      	mov	r1, r7
 8013a74:	f7ec fc12 	bl	800029c <__adddf3>
 8013a78:	2000      	movs	r0, #0
 8013a7a:	4632      	mov	r2, r6
 8013a7c:	463b      	mov	r3, r7
 8013a7e:	4604      	mov	r4, r0
 8013a80:	460d      	mov	r5, r1
 8013a82:	f7ec fc09 	bl	8000298 <__aeabi_dsub>
 8013a86:	4602      	mov	r2, r0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	4640      	mov	r0, r8
 8013a8c:	4649      	mov	r1, r9
 8013a8e:	f7ec fc03 	bl	8000298 <__aeabi_dsub>
 8013a92:	9b04      	ldr	r3, [sp, #16]
 8013a94:	9a06      	ldr	r2, [sp, #24]
 8013a96:	4682      	mov	sl, r0
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	468b      	mov	fp, r1
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	f040 81e7 	bne.w	8013e70 <__ieee754_pow+0x700>
 8013aa2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013b58 <__ieee754_pow+0x3e8>
 8013aa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013aaa:	2600      	movs	r6, #0
 8013aac:	eeb0 8a47 	vmov.f32	s16, s14
 8013ab0:	eef0 8a67 	vmov.f32	s17, s15
 8013ab4:	463b      	mov	r3, r7
 8013ab6:	4632      	mov	r2, r6
 8013ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013abc:	f7ec fbec 	bl	8000298 <__aeabi_dsub>
 8013ac0:	4622      	mov	r2, r4
 8013ac2:	462b      	mov	r3, r5
 8013ac4:	f7ec fda0 	bl	8000608 <__aeabi_dmul>
 8013ac8:	4680      	mov	r8, r0
 8013aca:	4689      	mov	r9, r1
 8013acc:	4650      	mov	r0, sl
 8013ace:	4659      	mov	r1, fp
 8013ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ad4:	f7ec fd98 	bl	8000608 <__aeabi_dmul>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	4640      	mov	r0, r8
 8013ade:	4649      	mov	r1, r9
 8013ae0:	f7ec fbdc 	bl	800029c <__adddf3>
 8013ae4:	4680      	mov	r8, r0
 8013ae6:	4689      	mov	r9, r1
 8013ae8:	4632      	mov	r2, r6
 8013aea:	463b      	mov	r3, r7
 8013aec:	4620      	mov	r0, r4
 8013aee:	4629      	mov	r1, r5
 8013af0:	f7ec fd8a 	bl	8000608 <__aeabi_dmul>
 8013af4:	460b      	mov	r3, r1
 8013af6:	4604      	mov	r4, r0
 8013af8:	460d      	mov	r5, r1
 8013afa:	4602      	mov	r2, r0
 8013afc:	4649      	mov	r1, r9
 8013afe:	4640      	mov	r0, r8
 8013b00:	f7ec fbcc 	bl	800029c <__adddf3>
 8013b04:	4b19      	ldr	r3, [pc, #100]	; (8013b6c <__ieee754_pow+0x3fc>)
 8013b06:	4606      	mov	r6, r0
 8013b08:	460f      	mov	r7, r1
 8013b0a:	4299      	cmp	r1, r3
 8013b0c:	468b      	mov	fp, r1
 8013b0e:	ec45 4b19 	vmov	d9, r4, r5
 8013b12:	f340 82f1 	ble.w	80140f8 <__ieee754_pow+0x988>
 8013b16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013b1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013b1e:	4303      	orrs	r3, r0
 8013b20:	f000 81e4 	beq.w	8013eec <__ieee754_pow+0x77c>
 8013b24:	2200      	movs	r2, #0
 8013b26:	2300      	movs	r3, #0
 8013b28:	ec51 0b18 	vmov	r0, r1, d8
 8013b2c:	f7ec ffde 	bl	8000aec <__aeabi_dcmplt>
 8013b30:	3800      	subs	r0, #0
 8013b32:	bf18      	it	ne
 8013b34:	2001      	movne	r0, #1
 8013b36:	e72b      	b.n	8013990 <__ieee754_pow+0x220>
 8013b38:	60000000 	.word	0x60000000
 8013b3c:	3ff71547 	.word	0x3ff71547
 8013b40:	f85ddf44 	.word	0xf85ddf44
 8013b44:	3e54ae0b 	.word	0x3e54ae0b
 8013b48:	55555555 	.word	0x55555555
 8013b4c:	3fd55555 	.word	0x3fd55555
 8013b50:	652b82fe 	.word	0x652b82fe
 8013b54:	3ff71547 	.word	0x3ff71547
 8013b58:	00000000 	.word	0x00000000
 8013b5c:	bff00000 	.word	0xbff00000
 8013b60:	3ff00000 	.word	0x3ff00000
 8013b64:	3fd00000 	.word	0x3fd00000
 8013b68:	3fe00000 	.word	0x3fe00000
 8013b6c:	408fffff 	.word	0x408fffff
 8013b70:	4bd5      	ldr	r3, [pc, #852]	; (8013ec8 <__ieee754_pow+0x758>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	402b      	ands	r3, r5
 8013b76:	b92b      	cbnz	r3, 8013b84 <__ieee754_pow+0x414>
 8013b78:	4bd4      	ldr	r3, [pc, #848]	; (8013ecc <__ieee754_pow+0x75c>)
 8013b7a:	f7ec fd45 	bl	8000608 <__aeabi_dmul>
 8013b7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013b82:	460c      	mov	r4, r1
 8013b84:	1523      	asrs	r3, r4, #20
 8013b86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013b8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013b8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013b92:	4413      	add	r3, r2
 8013b94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013b98:	9305      	str	r3, [sp, #20]
 8013b9a:	4bcd      	ldr	r3, [pc, #820]	; (8013ed0 <__ieee754_pow+0x760>)
 8013b9c:	429c      	cmp	r4, r3
 8013b9e:	dd08      	ble.n	8013bb2 <__ieee754_pow+0x442>
 8013ba0:	4bcc      	ldr	r3, [pc, #816]	; (8013ed4 <__ieee754_pow+0x764>)
 8013ba2:	429c      	cmp	r4, r3
 8013ba4:	f340 8162 	ble.w	8013e6c <__ieee754_pow+0x6fc>
 8013ba8:	9b05      	ldr	r3, [sp, #20]
 8013baa:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013bae:	3301      	adds	r3, #1
 8013bb0:	9305      	str	r3, [sp, #20]
 8013bb2:	2400      	movs	r4, #0
 8013bb4:	00e3      	lsls	r3, r4, #3
 8013bb6:	4682      	mov	sl, r0
 8013bb8:	4629      	mov	r1, r5
 8013bba:	46ab      	mov	fp, r5
 8013bbc:	9307      	str	r3, [sp, #28]
 8013bbe:	4bc6      	ldr	r3, [pc, #792]	; (8013ed8 <__ieee754_pow+0x768>)
 8013bc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013bc4:	ed93 7b00 	vldr	d7, [r3]
 8013bc8:	eeb0 9a47 	vmov.f32	s18, s14
 8013bcc:	eef0 9a67 	vmov.f32	s19, s15
 8013bd0:	ec53 2b17 	vmov	r2, r3, d7
 8013bd4:	f7ec fb60 	bl	8000298 <__aeabi_dsub>
 8013bd8:	4652      	mov	r2, sl
 8013bda:	4606      	mov	r6, r0
 8013bdc:	460f      	mov	r7, r1
 8013bde:	462b      	mov	r3, r5
 8013be0:	106d      	asrs	r5, r5, #1
 8013be2:	ec51 0b19 	vmov	r0, r1, d9
 8013be6:	f7ec fb59 	bl	800029c <__adddf3>
 8013bea:	4602      	mov	r2, r0
 8013bec:	460b      	mov	r3, r1
 8013bee:	2000      	movs	r0, #0
 8013bf0:	49ba      	ldr	r1, [pc, #744]	; (8013edc <__ieee754_pow+0x76c>)
 8013bf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013bf6:	f7ec fe31 	bl	800085c <__aeabi_ddiv>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013c02:	ec41 0b1a 	vmov	d10, r0, r1
 8013c06:	4630      	mov	r0, r6
 8013c08:	4639      	mov	r1, r7
 8013c0a:	f7ec fcfd 	bl	8000608 <__aeabi_dmul>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	2200      	movs	r2, #0
 8013c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c16:	9302      	str	r3, [sp, #8]
 8013c18:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013c1c:	4614      	mov	r4, r2
 8013c1e:	461d      	mov	r5, r3
 8013c20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013c24:	ec41 0b18 	vmov	d8, r0, r1
 8013c28:	4640      	mov	r0, r8
 8013c2a:	4649      	mov	r1, r9
 8013c2c:	f7ec fcec 	bl	8000608 <__aeabi_dmul>
 8013c30:	4602      	mov	r2, r0
 8013c32:	460b      	mov	r3, r1
 8013c34:	4630      	mov	r0, r6
 8013c36:	4639      	mov	r1, r7
 8013c38:	f7ec fb2e 	bl	8000298 <__aeabi_dsub>
 8013c3c:	4606      	mov	r6, r0
 8013c3e:	460f      	mov	r7, r1
 8013c40:	4620      	mov	r0, r4
 8013c42:	4629      	mov	r1, r5
 8013c44:	ec53 2b19 	vmov	r2, r3, d9
 8013c48:	f7ec fb26 	bl	8000298 <__aeabi_dsub>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	460b      	mov	r3, r1
 8013c50:	4650      	mov	r0, sl
 8013c52:	4659      	mov	r1, fp
 8013c54:	f7ec fb20 	bl	8000298 <__aeabi_dsub>
 8013c58:	4642      	mov	r2, r8
 8013c5a:	464b      	mov	r3, r9
 8013c5c:	f7ec fcd4 	bl	8000608 <__aeabi_dmul>
 8013c60:	4602      	mov	r2, r0
 8013c62:	460b      	mov	r3, r1
 8013c64:	4630      	mov	r0, r6
 8013c66:	4639      	mov	r1, r7
 8013c68:	f7ec fb16 	bl	8000298 <__aeabi_dsub>
 8013c6c:	ec53 2b1a 	vmov	r2, r3, d10
 8013c70:	f7ec fcca 	bl	8000608 <__aeabi_dmul>
 8013c74:	ec53 2b18 	vmov	r2, r3, d8
 8013c78:	ec41 0b19 	vmov	d9, r0, r1
 8013c7c:	ec51 0b18 	vmov	r0, r1, d8
 8013c80:	f7ec fcc2 	bl	8000608 <__aeabi_dmul>
 8013c84:	4604      	mov	r4, r0
 8013c86:	460d      	mov	r5, r1
 8013c88:	a37b      	add	r3, pc, #492	; (adr r3, 8013e78 <__ieee754_pow+0x708>)
 8013c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8e:	f7ec fcbb 	bl	8000608 <__aeabi_dmul>
 8013c92:	a37b      	add	r3, pc, #492	; (adr r3, 8013e80 <__ieee754_pow+0x710>)
 8013c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c98:	f7ec fb00 	bl	800029c <__adddf3>
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	f7ec fcb2 	bl	8000608 <__aeabi_dmul>
 8013ca4:	a378      	add	r3, pc, #480	; (adr r3, 8013e88 <__ieee754_pow+0x718>)
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	f7ec faf7 	bl	800029c <__adddf3>
 8013cae:	4622      	mov	r2, r4
 8013cb0:	462b      	mov	r3, r5
 8013cb2:	f7ec fca9 	bl	8000608 <__aeabi_dmul>
 8013cb6:	a376      	add	r3, pc, #472	; (adr r3, 8013e90 <__ieee754_pow+0x720>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	f7ec faee 	bl	800029c <__adddf3>
 8013cc0:	4622      	mov	r2, r4
 8013cc2:	462b      	mov	r3, r5
 8013cc4:	f7ec fca0 	bl	8000608 <__aeabi_dmul>
 8013cc8:	a373      	add	r3, pc, #460	; (adr r3, 8013e98 <__ieee754_pow+0x728>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec fae5 	bl	800029c <__adddf3>
 8013cd2:	4622      	mov	r2, r4
 8013cd4:	462b      	mov	r3, r5
 8013cd6:	f7ec fc97 	bl	8000608 <__aeabi_dmul>
 8013cda:	a371      	add	r3, pc, #452	; (adr r3, 8013ea0 <__ieee754_pow+0x730>)
 8013cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce0:	f7ec fadc 	bl	800029c <__adddf3>
 8013ce4:	4606      	mov	r6, r0
 8013ce6:	460f      	mov	r7, r1
 8013ce8:	4622      	mov	r2, r4
 8013cea:	462b      	mov	r3, r5
 8013cec:	4620      	mov	r0, r4
 8013cee:	4629      	mov	r1, r5
 8013cf0:	f7ec fc8a 	bl	8000608 <__aeabi_dmul>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	4639      	mov	r1, r7
 8013cfc:	f7ec fc84 	bl	8000608 <__aeabi_dmul>
 8013d00:	4642      	mov	r2, r8
 8013d02:	4604      	mov	r4, r0
 8013d04:	460d      	mov	r5, r1
 8013d06:	464b      	mov	r3, r9
 8013d08:	ec51 0b18 	vmov	r0, r1, d8
 8013d0c:	f7ec fac6 	bl	800029c <__adddf3>
 8013d10:	ec53 2b19 	vmov	r2, r3, d9
 8013d14:	f7ec fc78 	bl	8000608 <__aeabi_dmul>
 8013d18:	4622      	mov	r2, r4
 8013d1a:	462b      	mov	r3, r5
 8013d1c:	f7ec fabe 	bl	800029c <__adddf3>
 8013d20:	4642      	mov	r2, r8
 8013d22:	4682      	mov	sl, r0
 8013d24:	468b      	mov	fp, r1
 8013d26:	464b      	mov	r3, r9
 8013d28:	4640      	mov	r0, r8
 8013d2a:	4649      	mov	r1, r9
 8013d2c:	f7ec fc6c 	bl	8000608 <__aeabi_dmul>
 8013d30:	2200      	movs	r2, #0
 8013d32:	4b6b      	ldr	r3, [pc, #428]	; (8013ee0 <__ieee754_pow+0x770>)
 8013d34:	4606      	mov	r6, r0
 8013d36:	460f      	mov	r7, r1
 8013d38:	f7ec fab0 	bl	800029c <__adddf3>
 8013d3c:	4652      	mov	r2, sl
 8013d3e:	465b      	mov	r3, fp
 8013d40:	f7ec faac 	bl	800029c <__adddf3>
 8013d44:	2000      	movs	r0, #0
 8013d46:	460d      	mov	r5, r1
 8013d48:	460b      	mov	r3, r1
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	4649      	mov	r1, r9
 8013d50:	4640      	mov	r0, r8
 8013d52:	f7ec fc59 	bl	8000608 <__aeabi_dmul>
 8013d56:	2200      	movs	r2, #0
 8013d58:	4680      	mov	r8, r0
 8013d5a:	4689      	mov	r9, r1
 8013d5c:	4b60      	ldr	r3, [pc, #384]	; (8013ee0 <__ieee754_pow+0x770>)
 8013d5e:	4620      	mov	r0, r4
 8013d60:	4629      	mov	r1, r5
 8013d62:	f7ec fa99 	bl	8000298 <__aeabi_dsub>
 8013d66:	4632      	mov	r2, r6
 8013d68:	463b      	mov	r3, r7
 8013d6a:	f7ec fa95 	bl	8000298 <__aeabi_dsub>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	460b      	mov	r3, r1
 8013d72:	4650      	mov	r0, sl
 8013d74:	4659      	mov	r1, fp
 8013d76:	f7ec fa8f 	bl	8000298 <__aeabi_dsub>
 8013d7a:	ec53 2b18 	vmov	r2, r3, d8
 8013d7e:	f7ec fc43 	bl	8000608 <__aeabi_dmul>
 8013d82:	4606      	mov	r6, r0
 8013d84:	460f      	mov	r7, r1
 8013d86:	4622      	mov	r2, r4
 8013d88:	462b      	mov	r3, r5
 8013d8a:	ec51 0b19 	vmov	r0, r1, d9
 8013d8e:	f7ec fc3b 	bl	8000608 <__aeabi_dmul>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec fa7f 	bl	800029c <__adddf3>
 8013d9e:	4606      	mov	r6, r0
 8013da0:	460f      	mov	r7, r1
 8013da2:	4602      	mov	r2, r0
 8013da4:	460b      	mov	r3, r1
 8013da6:	4640      	mov	r0, r8
 8013da8:	4649      	mov	r1, r9
 8013daa:	f7ec fa77 	bl	800029c <__adddf3>
 8013dae:	2000      	movs	r0, #0
 8013db0:	460d      	mov	r5, r1
 8013db2:	4604      	mov	r4, r0
 8013db4:	a33c      	add	r3, pc, #240	; (adr r3, 8013ea8 <__ieee754_pow+0x738>)
 8013db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dba:	f7ec fc25 	bl	8000608 <__aeabi_dmul>
 8013dbe:	4642      	mov	r2, r8
 8013dc0:	464b      	mov	r3, r9
 8013dc2:	ec41 0b18 	vmov	d8, r0, r1
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	4629      	mov	r1, r5
 8013dca:	f7ec fa65 	bl	8000298 <__aeabi_dsub>
 8013dce:	4602      	mov	r2, r0
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	4639      	mov	r1, r7
 8013dd6:	f7ec fa5f 	bl	8000298 <__aeabi_dsub>
 8013dda:	a335      	add	r3, pc, #212	; (adr r3, 8013eb0 <__ieee754_pow+0x740>)
 8013ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de0:	f7ec fc12 	bl	8000608 <__aeabi_dmul>
 8013de4:	4606      	mov	r6, r0
 8013de6:	460f      	mov	r7, r1
 8013de8:	4620      	mov	r0, r4
 8013dea:	4629      	mov	r1, r5
 8013dec:	a332      	add	r3, pc, #200	; (adr r3, 8013eb8 <__ieee754_pow+0x748>)
 8013dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df2:	f7ec fc09 	bl	8000608 <__aeabi_dmul>
 8013df6:	4602      	mov	r2, r0
 8013df8:	460b      	mov	r3, r1
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	4639      	mov	r1, r7
 8013dfe:	f7ec fa4d 	bl	800029c <__adddf3>
 8013e02:	9a07      	ldr	r2, [sp, #28]
 8013e04:	4b37      	ldr	r3, [pc, #220]	; (8013ee4 <__ieee754_pow+0x774>)
 8013e06:	4413      	add	r3, r2
 8013e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0c:	f7ec fa46 	bl	800029c <__adddf3>
 8013e10:	4682      	mov	sl, r0
 8013e12:	9805      	ldr	r0, [sp, #20]
 8013e14:	468b      	mov	fp, r1
 8013e16:	f7ec fb8d 	bl	8000534 <__aeabi_i2d>
 8013e1a:	9a07      	ldr	r2, [sp, #28]
 8013e1c:	4b32      	ldr	r3, [pc, #200]	; (8013ee8 <__ieee754_pow+0x778>)
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	4413      	add	r3, r2
 8013e24:	4652      	mov	r2, sl
 8013e26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e2a:	ec51 0b18 	vmov	r0, r1, d8
 8013e2e:	465b      	mov	r3, fp
 8013e30:	f7ec fa34 	bl	800029c <__adddf3>
 8013e34:	4642      	mov	r2, r8
 8013e36:	464b      	mov	r3, r9
 8013e38:	f7ec fa30 	bl	800029c <__adddf3>
 8013e3c:	4632      	mov	r2, r6
 8013e3e:	463b      	mov	r3, r7
 8013e40:	f7ec fa2c 	bl	800029c <__adddf3>
 8013e44:	2000      	movs	r0, #0
 8013e46:	4632      	mov	r2, r6
 8013e48:	463b      	mov	r3, r7
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	460d      	mov	r5, r1
 8013e4e:	f7ec fa23 	bl	8000298 <__aeabi_dsub>
 8013e52:	4642      	mov	r2, r8
 8013e54:	464b      	mov	r3, r9
 8013e56:	f7ec fa1f 	bl	8000298 <__aeabi_dsub>
 8013e5a:	ec53 2b18 	vmov	r2, r3, d8
 8013e5e:	f7ec fa1b 	bl	8000298 <__aeabi_dsub>
 8013e62:	4602      	mov	r2, r0
 8013e64:	460b      	mov	r3, r1
 8013e66:	4650      	mov	r0, sl
 8013e68:	4659      	mov	r1, fp
 8013e6a:	e610      	b.n	8013a8e <__ieee754_pow+0x31e>
 8013e6c:	2401      	movs	r4, #1
 8013e6e:	e6a1      	b.n	8013bb4 <__ieee754_pow+0x444>
 8013e70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013ec0 <__ieee754_pow+0x750>
 8013e74:	e617      	b.n	8013aa6 <__ieee754_pow+0x336>
 8013e76:	bf00      	nop
 8013e78:	4a454eef 	.word	0x4a454eef
 8013e7c:	3fca7e28 	.word	0x3fca7e28
 8013e80:	93c9db65 	.word	0x93c9db65
 8013e84:	3fcd864a 	.word	0x3fcd864a
 8013e88:	a91d4101 	.word	0xa91d4101
 8013e8c:	3fd17460 	.word	0x3fd17460
 8013e90:	518f264d 	.word	0x518f264d
 8013e94:	3fd55555 	.word	0x3fd55555
 8013e98:	db6fabff 	.word	0xdb6fabff
 8013e9c:	3fdb6db6 	.word	0x3fdb6db6
 8013ea0:	33333303 	.word	0x33333303
 8013ea4:	3fe33333 	.word	0x3fe33333
 8013ea8:	e0000000 	.word	0xe0000000
 8013eac:	3feec709 	.word	0x3feec709
 8013eb0:	dc3a03fd 	.word	0xdc3a03fd
 8013eb4:	3feec709 	.word	0x3feec709
 8013eb8:	145b01f5 	.word	0x145b01f5
 8013ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8013ec0:	00000000 	.word	0x00000000
 8013ec4:	3ff00000 	.word	0x3ff00000
 8013ec8:	7ff00000 	.word	0x7ff00000
 8013ecc:	43400000 	.word	0x43400000
 8013ed0:	0003988e 	.word	0x0003988e
 8013ed4:	000bb679 	.word	0x000bb679
 8013ed8:	08014808 	.word	0x08014808
 8013edc:	3ff00000 	.word	0x3ff00000
 8013ee0:	40080000 	.word	0x40080000
 8013ee4:	08014828 	.word	0x08014828
 8013ee8:	08014818 	.word	0x08014818
 8013eec:	a3b5      	add	r3, pc, #724	; (adr r3, 80141c4 <__ieee754_pow+0xa54>)
 8013eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef2:	4640      	mov	r0, r8
 8013ef4:	4649      	mov	r1, r9
 8013ef6:	f7ec f9d1 	bl	800029c <__adddf3>
 8013efa:	4622      	mov	r2, r4
 8013efc:	462b      	mov	r3, r5
 8013efe:	ec41 0b1a 	vmov	d10, r0, r1
 8013f02:	4630      	mov	r0, r6
 8013f04:	4639      	mov	r1, r7
 8013f06:	f7ec f9c7 	bl	8000298 <__aeabi_dsub>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	ec51 0b1a 	vmov	r0, r1, d10
 8013f12:	f7ec fe09 	bl	8000b28 <__aeabi_dcmpgt>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	f47f ae04 	bne.w	8013b24 <__ieee754_pow+0x3b4>
 8013f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f20:	4aa3      	ldr	r2, [pc, #652]	; (80141b0 <__ieee754_pow+0xa40>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	f340 8108 	ble.w	8014138 <__ieee754_pow+0x9c8>
 8013f28:	151b      	asrs	r3, r3, #20
 8013f2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013f2e:	48a1      	ldr	r0, [pc, #644]	; (80141b4 <__ieee754_pow+0xa44>)
 8013f30:	f1bb 0f00 	cmp.w	fp, #0
 8013f34:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013f38:	f04f 0200 	mov.w	r2, #0
 8013f3c:	fa4a fa03 	asr.w	sl, sl, r3
 8013f40:	44da      	add	sl, fp
 8013f42:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013f46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013f4a:	fa40 f001 	asr.w	r0, r0, r1
 8013f4e:	f1c1 0114 	rsb	r1, r1, #20
 8013f52:	ea00 030a 	and.w	r3, r0, sl
 8013f56:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013f60:	fa4a fa01 	asr.w	sl, sl, r1
 8013f64:	4629      	mov	r1, r5
 8013f66:	bfb8      	it	lt
 8013f68:	f1ca 0a00 	rsblt	sl, sl, #0
 8013f6c:	f7ec f994 	bl	8000298 <__aeabi_dsub>
 8013f70:	ec41 0b19 	vmov	d9, r0, r1
 8013f74:	4642      	mov	r2, r8
 8013f76:	464b      	mov	r3, r9
 8013f78:	ec51 0b19 	vmov	r0, r1, d9
 8013f7c:	f7ec f98e 	bl	800029c <__adddf3>
 8013f80:	2000      	movs	r0, #0
 8013f82:	460d      	mov	r5, r1
 8013f84:	4604      	mov	r4, r0
 8013f86:	a37a      	add	r3, pc, #488	; (adr r3, 8014170 <__ieee754_pow+0xa00>)
 8013f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8c:	f7ec fb3c 	bl	8000608 <__aeabi_dmul>
 8013f90:	4606      	mov	r6, r0
 8013f92:	460f      	mov	r7, r1
 8013f94:	4620      	mov	r0, r4
 8013f96:	4629      	mov	r1, r5
 8013f98:	ec53 2b19 	vmov	r2, r3, d9
 8013f9c:	f7ec f97c 	bl	8000298 <__aeabi_dsub>
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	4640      	mov	r0, r8
 8013fa6:	4649      	mov	r1, r9
 8013fa8:	f7ec f976 	bl	8000298 <__aeabi_dsub>
 8013fac:	a372      	add	r3, pc, #456	; (adr r3, 8014178 <__ieee754_pow+0xa08>)
 8013fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb2:	f7ec fb29 	bl	8000608 <__aeabi_dmul>
 8013fb6:	4680      	mov	r8, r0
 8013fb8:	4689      	mov	r9, r1
 8013fba:	4620      	mov	r0, r4
 8013fbc:	4629      	mov	r1, r5
 8013fbe:	a370      	add	r3, pc, #448	; (adr r3, 8014180 <__ieee754_pow+0xa10>)
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	f7ec fb20 	bl	8000608 <__aeabi_dmul>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	460b      	mov	r3, r1
 8013fcc:	4640      	mov	r0, r8
 8013fce:	4649      	mov	r1, r9
 8013fd0:	f7ec f964 	bl	800029c <__adddf3>
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	460d      	mov	r5, r1
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4630      	mov	r0, r6
 8013fde:	4639      	mov	r1, r7
 8013fe0:	f7ec f95c 	bl	800029c <__adddf3>
 8013fe4:	4632      	mov	r2, r6
 8013fe6:	4680      	mov	r8, r0
 8013fe8:	4689      	mov	r9, r1
 8013fea:	463b      	mov	r3, r7
 8013fec:	f7ec f954 	bl	8000298 <__aeabi_dsub>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	f7ec f94e 	bl	8000298 <__aeabi_dsub>
 8013ffc:	4642      	mov	r2, r8
 8013ffe:	4606      	mov	r6, r0
 8014000:	460f      	mov	r7, r1
 8014002:	464b      	mov	r3, r9
 8014004:	4640      	mov	r0, r8
 8014006:	4649      	mov	r1, r9
 8014008:	f7ec fafe 	bl	8000608 <__aeabi_dmul>
 801400c:	4604      	mov	r4, r0
 801400e:	460d      	mov	r5, r1
 8014010:	a35d      	add	r3, pc, #372	; (adr r3, 8014188 <__ieee754_pow+0xa18>)
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	f7ec faf7 	bl	8000608 <__aeabi_dmul>
 801401a:	a35d      	add	r3, pc, #372	; (adr r3, 8014190 <__ieee754_pow+0xa20>)
 801401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014020:	f7ec f93a 	bl	8000298 <__aeabi_dsub>
 8014024:	4622      	mov	r2, r4
 8014026:	462b      	mov	r3, r5
 8014028:	f7ec faee 	bl	8000608 <__aeabi_dmul>
 801402c:	a35a      	add	r3, pc, #360	; (adr r3, 8014198 <__ieee754_pow+0xa28>)
 801402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014032:	f7ec f933 	bl	800029c <__adddf3>
 8014036:	4622      	mov	r2, r4
 8014038:	462b      	mov	r3, r5
 801403a:	f7ec fae5 	bl	8000608 <__aeabi_dmul>
 801403e:	a358      	add	r3, pc, #352	; (adr r3, 80141a0 <__ieee754_pow+0xa30>)
 8014040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014044:	f7ec f928 	bl	8000298 <__aeabi_dsub>
 8014048:	4622      	mov	r2, r4
 801404a:	462b      	mov	r3, r5
 801404c:	f7ec fadc 	bl	8000608 <__aeabi_dmul>
 8014050:	a355      	add	r3, pc, #340	; (adr r3, 80141a8 <__ieee754_pow+0xa38>)
 8014052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014056:	f7ec f921 	bl	800029c <__adddf3>
 801405a:	4622      	mov	r2, r4
 801405c:	462b      	mov	r3, r5
 801405e:	f7ec fad3 	bl	8000608 <__aeabi_dmul>
 8014062:	4602      	mov	r2, r0
 8014064:	460b      	mov	r3, r1
 8014066:	4640      	mov	r0, r8
 8014068:	4649      	mov	r1, r9
 801406a:	f7ec f915 	bl	8000298 <__aeabi_dsub>
 801406e:	4604      	mov	r4, r0
 8014070:	460d      	mov	r5, r1
 8014072:	4602      	mov	r2, r0
 8014074:	460b      	mov	r3, r1
 8014076:	4640      	mov	r0, r8
 8014078:	4649      	mov	r1, r9
 801407a:	f7ec fac5 	bl	8000608 <__aeabi_dmul>
 801407e:	2200      	movs	r2, #0
 8014080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014084:	ec41 0b19 	vmov	d9, r0, r1
 8014088:	4620      	mov	r0, r4
 801408a:	4629      	mov	r1, r5
 801408c:	f7ec f904 	bl	8000298 <__aeabi_dsub>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	ec51 0b19 	vmov	r0, r1, d9
 8014098:	f7ec fbe0 	bl	800085c <__aeabi_ddiv>
 801409c:	4632      	mov	r2, r6
 801409e:	4604      	mov	r4, r0
 80140a0:	460d      	mov	r5, r1
 80140a2:	463b      	mov	r3, r7
 80140a4:	4640      	mov	r0, r8
 80140a6:	4649      	mov	r1, r9
 80140a8:	f7ec faae 	bl	8000608 <__aeabi_dmul>
 80140ac:	4632      	mov	r2, r6
 80140ae:	463b      	mov	r3, r7
 80140b0:	f7ec f8f4 	bl	800029c <__adddf3>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	4620      	mov	r0, r4
 80140ba:	4629      	mov	r1, r5
 80140bc:	f7ec f8ec 	bl	8000298 <__aeabi_dsub>
 80140c0:	4642      	mov	r2, r8
 80140c2:	464b      	mov	r3, r9
 80140c4:	f7ec f8e8 	bl	8000298 <__aeabi_dsub>
 80140c8:	460b      	mov	r3, r1
 80140ca:	4602      	mov	r2, r0
 80140cc:	493a      	ldr	r1, [pc, #232]	; (80141b8 <__ieee754_pow+0xa48>)
 80140ce:	2000      	movs	r0, #0
 80140d0:	f7ec f8e2 	bl	8000298 <__aeabi_dsub>
 80140d4:	ec41 0b10 	vmov	d0, r0, r1
 80140d8:	ee10 3a90 	vmov	r3, s1
 80140dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80140e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80140e4:	da2b      	bge.n	801413e <__ieee754_pow+0x9ce>
 80140e6:	4650      	mov	r0, sl
 80140e8:	f000 f87a 	bl	80141e0 <scalbn>
 80140ec:	ec51 0b10 	vmov	r0, r1, d0
 80140f0:	ec53 2b18 	vmov	r2, r3, d8
 80140f4:	f7ff bbed 	b.w	80138d2 <__ieee754_pow+0x162>
 80140f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80140fc:	4b2f      	ldr	r3, [pc, #188]	; (80141bc <__ieee754_pow+0xa4c>)
 80140fe:	429e      	cmp	r6, r3
 8014100:	f77f af0c 	ble.w	8013f1c <__ieee754_pow+0x7ac>
 8014104:	4b2e      	ldr	r3, [pc, #184]	; (80141c0 <__ieee754_pow+0xa50>)
 8014106:	440b      	add	r3, r1
 8014108:	4303      	orrs	r3, r0
 801410a:	d009      	beq.n	8014120 <__ieee754_pow+0x9b0>
 801410c:	2200      	movs	r2, #0
 801410e:	2300      	movs	r3, #0
 8014110:	ec51 0b18 	vmov	r0, r1, d8
 8014114:	f7ec fcea 	bl	8000aec <__aeabi_dcmplt>
 8014118:	3800      	subs	r0, #0
 801411a:	bf18      	it	ne
 801411c:	2001      	movne	r0, #1
 801411e:	e447      	b.n	80139b0 <__ieee754_pow+0x240>
 8014120:	4622      	mov	r2, r4
 8014122:	462b      	mov	r3, r5
 8014124:	f7ec f8b8 	bl	8000298 <__aeabi_dsub>
 8014128:	4642      	mov	r2, r8
 801412a:	464b      	mov	r3, r9
 801412c:	f7ec fcf2 	bl	8000b14 <__aeabi_dcmpge>
 8014130:	2800      	cmp	r0, #0
 8014132:	f43f aef3 	beq.w	8013f1c <__ieee754_pow+0x7ac>
 8014136:	e7e9      	b.n	801410c <__ieee754_pow+0x99c>
 8014138:	f04f 0a00 	mov.w	sl, #0
 801413c:	e71a      	b.n	8013f74 <__ieee754_pow+0x804>
 801413e:	ec51 0b10 	vmov	r0, r1, d0
 8014142:	4619      	mov	r1, r3
 8014144:	e7d4      	b.n	80140f0 <__ieee754_pow+0x980>
 8014146:	2000      	movs	r0, #0
 8014148:	491b      	ldr	r1, [pc, #108]	; (80141b8 <__ieee754_pow+0xa48>)
 801414a:	f7ff bb30 	b.w	80137ae <__ieee754_pow+0x3e>
 801414e:	2000      	movs	r0, #0
 8014150:	2100      	movs	r1, #0
 8014152:	f7ff bb2c 	b.w	80137ae <__ieee754_pow+0x3e>
 8014156:	4630      	mov	r0, r6
 8014158:	4639      	mov	r1, r7
 801415a:	f7ff bb28 	b.w	80137ae <__ieee754_pow+0x3e>
 801415e:	9204      	str	r2, [sp, #16]
 8014160:	f7ff bb7a 	b.w	8013858 <__ieee754_pow+0xe8>
 8014164:	2300      	movs	r3, #0
 8014166:	f7ff bb64 	b.w	8013832 <__ieee754_pow+0xc2>
 801416a:	bf00      	nop
 801416c:	f3af 8000 	nop.w
 8014170:	00000000 	.word	0x00000000
 8014174:	3fe62e43 	.word	0x3fe62e43
 8014178:	fefa39ef 	.word	0xfefa39ef
 801417c:	3fe62e42 	.word	0x3fe62e42
 8014180:	0ca86c39 	.word	0x0ca86c39
 8014184:	be205c61 	.word	0xbe205c61
 8014188:	72bea4d0 	.word	0x72bea4d0
 801418c:	3e663769 	.word	0x3e663769
 8014190:	c5d26bf1 	.word	0xc5d26bf1
 8014194:	3ebbbd41 	.word	0x3ebbbd41
 8014198:	af25de2c 	.word	0xaf25de2c
 801419c:	3f11566a 	.word	0x3f11566a
 80141a0:	16bebd93 	.word	0x16bebd93
 80141a4:	3f66c16c 	.word	0x3f66c16c
 80141a8:	5555553e 	.word	0x5555553e
 80141ac:	3fc55555 	.word	0x3fc55555
 80141b0:	3fe00000 	.word	0x3fe00000
 80141b4:	fff00000 	.word	0xfff00000
 80141b8:	3ff00000 	.word	0x3ff00000
 80141bc:	4090cbff 	.word	0x4090cbff
 80141c0:	3f6f3400 	.word	0x3f6f3400
 80141c4:	652b82fe 	.word	0x652b82fe
 80141c8:	3c971547 	.word	0x3c971547

080141cc <fabs>:
 80141cc:	ec51 0b10 	vmov	r0, r1, d0
 80141d0:	ee10 2a10 	vmov	r2, s0
 80141d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141d8:	ec43 2b10 	vmov	d0, r2, r3
 80141dc:	4770      	bx	lr
	...

080141e0 <scalbn>:
 80141e0:	b570      	push	{r4, r5, r6, lr}
 80141e2:	ec55 4b10 	vmov	r4, r5, d0
 80141e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80141ea:	4606      	mov	r6, r0
 80141ec:	462b      	mov	r3, r5
 80141ee:	b999      	cbnz	r1, 8014218 <scalbn+0x38>
 80141f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80141f4:	4323      	orrs	r3, r4
 80141f6:	d03f      	beq.n	8014278 <scalbn+0x98>
 80141f8:	4b35      	ldr	r3, [pc, #212]	; (80142d0 <scalbn+0xf0>)
 80141fa:	4629      	mov	r1, r5
 80141fc:	2200      	movs	r2, #0
 80141fe:	ee10 0a10 	vmov	r0, s0
 8014202:	f7ec fa01 	bl	8000608 <__aeabi_dmul>
 8014206:	4b33      	ldr	r3, [pc, #204]	; (80142d4 <scalbn+0xf4>)
 8014208:	4604      	mov	r4, r0
 801420a:	460d      	mov	r5, r1
 801420c:	429e      	cmp	r6, r3
 801420e:	da10      	bge.n	8014232 <scalbn+0x52>
 8014210:	a327      	add	r3, pc, #156	; (adr r3, 80142b0 <scalbn+0xd0>)
 8014212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014216:	e01f      	b.n	8014258 <scalbn+0x78>
 8014218:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801421c:	4291      	cmp	r1, r2
 801421e:	d10c      	bne.n	801423a <scalbn+0x5a>
 8014220:	ee10 2a10 	vmov	r2, s0
 8014224:	4620      	mov	r0, r4
 8014226:	4629      	mov	r1, r5
 8014228:	f7ec f838 	bl	800029c <__adddf3>
 801422c:	4604      	mov	r4, r0
 801422e:	460d      	mov	r5, r1
 8014230:	e022      	b.n	8014278 <scalbn+0x98>
 8014232:	460b      	mov	r3, r1
 8014234:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014238:	3936      	subs	r1, #54	; 0x36
 801423a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801423e:	4296      	cmp	r6, r2
 8014240:	dd0d      	ble.n	801425e <scalbn+0x7e>
 8014242:	2d00      	cmp	r5, #0
 8014244:	a11c      	add	r1, pc, #112	; (adr r1, 80142b8 <scalbn+0xd8>)
 8014246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801424a:	da02      	bge.n	8014252 <scalbn+0x72>
 801424c:	a11c      	add	r1, pc, #112	; (adr r1, 80142c0 <scalbn+0xe0>)
 801424e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014252:	a319      	add	r3, pc, #100	; (adr r3, 80142b8 <scalbn+0xd8>)
 8014254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014258:	f7ec f9d6 	bl	8000608 <__aeabi_dmul>
 801425c:	e7e6      	b.n	801422c <scalbn+0x4c>
 801425e:	1872      	adds	r2, r6, r1
 8014260:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014264:	428a      	cmp	r2, r1
 8014266:	dcec      	bgt.n	8014242 <scalbn+0x62>
 8014268:	2a00      	cmp	r2, #0
 801426a:	dd08      	ble.n	801427e <scalbn+0x9e>
 801426c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014270:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014274:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014278:	ec45 4b10 	vmov	d0, r4, r5
 801427c:	bd70      	pop	{r4, r5, r6, pc}
 801427e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014282:	da08      	bge.n	8014296 <scalbn+0xb6>
 8014284:	2d00      	cmp	r5, #0
 8014286:	a10a      	add	r1, pc, #40	; (adr r1, 80142b0 <scalbn+0xd0>)
 8014288:	e9d1 0100 	ldrd	r0, r1, [r1]
 801428c:	dac0      	bge.n	8014210 <scalbn+0x30>
 801428e:	a10e      	add	r1, pc, #56	; (adr r1, 80142c8 <scalbn+0xe8>)
 8014290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014294:	e7bc      	b.n	8014210 <scalbn+0x30>
 8014296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801429a:	3236      	adds	r2, #54	; 0x36
 801429c:	4620      	mov	r0, r4
 801429e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142a2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80142a6:	2200      	movs	r2, #0
 80142a8:	4b0b      	ldr	r3, [pc, #44]	; (80142d8 <scalbn+0xf8>)
 80142aa:	e7d5      	b.n	8014258 <scalbn+0x78>
 80142ac:	f3af 8000 	nop.w
 80142b0:	c2f8f359 	.word	0xc2f8f359
 80142b4:	01a56e1f 	.word	0x01a56e1f
 80142b8:	8800759c 	.word	0x8800759c
 80142bc:	7e37e43c 	.word	0x7e37e43c
 80142c0:	8800759c 	.word	0x8800759c
 80142c4:	fe37e43c 	.word	0xfe37e43c
 80142c8:	c2f8f359 	.word	0xc2f8f359
 80142cc:	81a56e1f 	.word	0x81a56e1f
 80142d0:	43500000 	.word	0x43500000
 80142d4:	ffff3cb0 	.word	0xffff3cb0
 80142d8:	3c900000 	.word	0x3c900000

080142dc <with_errno>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	4604      	mov	r4, r0
 80142e0:	460d      	mov	r5, r1
 80142e2:	4616      	mov	r6, r2
 80142e4:	f7fe f9f8 	bl	80126d8 <__errno>
 80142e8:	4629      	mov	r1, r5
 80142ea:	6006      	str	r6, [r0, #0]
 80142ec:	4620      	mov	r0, r4
 80142ee:	bd70      	pop	{r4, r5, r6, pc}

080142f0 <xflow>:
 80142f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142f2:	4614      	mov	r4, r2
 80142f4:	461d      	mov	r5, r3
 80142f6:	b108      	cbz	r0, 80142fc <xflow+0xc>
 80142f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80142fc:	4620      	mov	r0, r4
 80142fe:	4629      	mov	r1, r5
 8014300:	e9cd 2300 	strd	r2, r3, [sp]
 8014304:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014308:	f7ec f97e 	bl	8000608 <__aeabi_dmul>
 801430c:	2222      	movs	r2, #34	; 0x22
 801430e:	b003      	add	sp, #12
 8014310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014314:	f7ff bfe2 	b.w	80142dc <with_errno>

08014318 <__math_uflow>:
 8014318:	b508      	push	{r3, lr}
 801431a:	2200      	movs	r2, #0
 801431c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014320:	f7ff ffe6 	bl	80142f0 <xflow>
 8014324:	ec41 0b10 	vmov	d0, r0, r1
 8014328:	bd08      	pop	{r3, pc}

0801432a <__math_oflow>:
 801432a:	b508      	push	{r3, lr}
 801432c:	2200      	movs	r2, #0
 801432e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014332:	f7ff ffdd 	bl	80142f0 <xflow>
 8014336:	ec41 0b10 	vmov	d0, r0, r1
 801433a:	bd08      	pop	{r3, pc}

0801433c <__ieee754_sqrt>:
 801433c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014340:	4e6b      	ldr	r6, [pc, #428]	; (80144f0 <__ieee754_sqrt+0x1b4>)
 8014342:	ee10 0a10 	vmov	r0, s0
 8014346:	ee10 2a10 	vmov	r2, s0
 801434a:	ec55 4b10 	vmov	r4, r5, d0
 801434e:	43ae      	bics	r6, r5
 8014350:	4629      	mov	r1, r5
 8014352:	462b      	mov	r3, r5
 8014354:	d10d      	bne.n	8014372 <__ieee754_sqrt+0x36>
 8014356:	f7ec f957 	bl	8000608 <__aeabi_dmul>
 801435a:	4602      	mov	r2, r0
 801435c:	460b      	mov	r3, r1
 801435e:	4620      	mov	r0, r4
 8014360:	4629      	mov	r1, r5
 8014362:	f7eb ff9b 	bl	800029c <__adddf3>
 8014366:	4604      	mov	r4, r0
 8014368:	460d      	mov	r5, r1
 801436a:	ec45 4b10 	vmov	d0, r4, r5
 801436e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014372:	2d00      	cmp	r5, #0
 8014374:	dc0b      	bgt.n	801438e <__ieee754_sqrt+0x52>
 8014376:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801437a:	4326      	orrs	r6, r4
 801437c:	d0f5      	beq.n	801436a <__ieee754_sqrt+0x2e>
 801437e:	b135      	cbz	r5, 801438e <__ieee754_sqrt+0x52>
 8014380:	f7eb ff8a 	bl	8000298 <__aeabi_dsub>
 8014384:	4602      	mov	r2, r0
 8014386:	460b      	mov	r3, r1
 8014388:	f7ec fa68 	bl	800085c <__aeabi_ddiv>
 801438c:	e7eb      	b.n	8014366 <__ieee754_sqrt+0x2a>
 801438e:	1509      	asrs	r1, r1, #20
 8014390:	f000 8091 	beq.w	80144b6 <__ieee754_sqrt+0x17a>
 8014394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014398:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801439c:	07c9      	lsls	r1, r1, #31
 801439e:	f04f 0500 	mov.w	r5, #0
 80143a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143a6:	ea4f 0666 	mov.w	r6, r6, asr #1
 80143aa:	f04f 0e16 	mov.w	lr, #22
 80143ae:	46ac      	mov	ip, r5
 80143b0:	bf58      	it	pl
 80143b2:	005b      	lslpl	r3, r3, #1
 80143b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80143b8:	bf5c      	itt	pl
 80143ba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80143be:	0052      	lslpl	r2, r2, #1
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80143c6:	0052      	lsls	r2, r2, #1
 80143c8:	eb0c 0001 	add.w	r0, ip, r1
 80143cc:	4298      	cmp	r0, r3
 80143ce:	bfde      	ittt	le
 80143d0:	1a1b      	suble	r3, r3, r0
 80143d2:	eb00 0c01 	addle.w	ip, r0, r1
 80143d6:	186d      	addle	r5, r5, r1
 80143d8:	f1be 0e01 	subs.w	lr, lr, #1
 80143dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80143e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80143e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80143e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80143ec:	d1ec      	bne.n	80143c8 <__ieee754_sqrt+0x8c>
 80143ee:	4674      	mov	r4, lr
 80143f0:	2720      	movs	r7, #32
 80143f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80143f6:	4563      	cmp	r3, ip
 80143f8:	eb01 000e 	add.w	r0, r1, lr
 80143fc:	dc02      	bgt.n	8014404 <__ieee754_sqrt+0xc8>
 80143fe:	d114      	bne.n	801442a <__ieee754_sqrt+0xee>
 8014400:	4290      	cmp	r0, r2
 8014402:	d812      	bhi.n	801442a <__ieee754_sqrt+0xee>
 8014404:	2800      	cmp	r0, #0
 8014406:	eb00 0e01 	add.w	lr, r0, r1
 801440a:	da59      	bge.n	80144c0 <__ieee754_sqrt+0x184>
 801440c:	f1be 0f00 	cmp.w	lr, #0
 8014410:	db56      	blt.n	80144c0 <__ieee754_sqrt+0x184>
 8014412:	f10c 0801 	add.w	r8, ip, #1
 8014416:	eba3 030c 	sub.w	r3, r3, ip
 801441a:	4290      	cmp	r0, r2
 801441c:	440c      	add	r4, r1
 801441e:	eba2 0200 	sub.w	r2, r2, r0
 8014422:	bf88      	it	hi
 8014424:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014428:	46c4      	mov	ip, r8
 801442a:	005b      	lsls	r3, r3, #1
 801442c:	3f01      	subs	r7, #1
 801442e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014432:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014436:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801443a:	d1dc      	bne.n	80143f6 <__ieee754_sqrt+0xba>
 801443c:	4313      	orrs	r3, r2
 801443e:	d01b      	beq.n	8014478 <__ieee754_sqrt+0x13c>
 8014440:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80144f4 <__ieee754_sqrt+0x1b8>
 8014444:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80144f8 <__ieee754_sqrt+0x1bc>
 8014448:	e9da 0100 	ldrd	r0, r1, [sl]
 801444c:	e9db 2300 	ldrd	r2, r3, [fp]
 8014450:	e9da 8900 	ldrd	r8, r9, [sl]
 8014454:	f7eb ff20 	bl	8000298 <__aeabi_dsub>
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4640      	mov	r0, r8
 801445e:	4649      	mov	r1, r9
 8014460:	f7ec fb4e 	bl	8000b00 <__aeabi_dcmple>
 8014464:	b140      	cbz	r0, 8014478 <__ieee754_sqrt+0x13c>
 8014466:	f1b4 3fff 	cmp.w	r4, #4294967295
 801446a:	e9da 0100 	ldrd	r0, r1, [sl]
 801446e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014472:	d127      	bne.n	80144c4 <__ieee754_sqrt+0x188>
 8014474:	3501      	adds	r5, #1
 8014476:	463c      	mov	r4, r7
 8014478:	106a      	asrs	r2, r5, #1
 801447a:	07e9      	lsls	r1, r5, #31
 801447c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8014480:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014484:	bf48      	it	mi
 8014486:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801448a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801448e:	461c      	mov	r4, r3
 8014490:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014494:	e769      	b.n	801436a <__ieee754_sqrt+0x2e>
 8014496:	0ad3      	lsrs	r3, r2, #11
 8014498:	3815      	subs	r0, #21
 801449a:	0552      	lsls	r2, r2, #21
 801449c:	2b00      	cmp	r3, #0
 801449e:	d0fa      	beq.n	8014496 <__ieee754_sqrt+0x15a>
 80144a0:	02dc      	lsls	r4, r3, #11
 80144a2:	d50a      	bpl.n	80144ba <__ieee754_sqrt+0x17e>
 80144a4:	f1c1 0420 	rsb	r4, r1, #32
 80144a8:	1e4d      	subs	r5, r1, #1
 80144aa:	fa22 f404 	lsr.w	r4, r2, r4
 80144ae:	408a      	lsls	r2, r1
 80144b0:	1b41      	subs	r1, r0, r5
 80144b2:	4323      	orrs	r3, r4
 80144b4:	e76e      	b.n	8014394 <__ieee754_sqrt+0x58>
 80144b6:	4608      	mov	r0, r1
 80144b8:	e7f0      	b.n	801449c <__ieee754_sqrt+0x160>
 80144ba:	005b      	lsls	r3, r3, #1
 80144bc:	3101      	adds	r1, #1
 80144be:	e7ef      	b.n	80144a0 <__ieee754_sqrt+0x164>
 80144c0:	46e0      	mov	r8, ip
 80144c2:	e7a8      	b.n	8014416 <__ieee754_sqrt+0xda>
 80144c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80144c8:	f7eb fee8 	bl	800029c <__adddf3>
 80144cc:	4602      	mov	r2, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	4640      	mov	r0, r8
 80144d2:	4649      	mov	r1, r9
 80144d4:	f7ec fb0a 	bl	8000aec <__aeabi_dcmplt>
 80144d8:	b128      	cbz	r0, 80144e6 <__ieee754_sqrt+0x1aa>
 80144da:	1ca0      	adds	r0, r4, #2
 80144dc:	f104 0402 	add.w	r4, r4, #2
 80144e0:	bf08      	it	eq
 80144e2:	3501      	addeq	r5, #1
 80144e4:	e7c8      	b.n	8014478 <__ieee754_sqrt+0x13c>
 80144e6:	3401      	adds	r4, #1
 80144e8:	f024 0401 	bic.w	r4, r4, #1
 80144ec:	e7c4      	b.n	8014478 <__ieee754_sqrt+0x13c>
 80144ee:	bf00      	nop
 80144f0:	7ff00000 	.word	0x7ff00000
 80144f4:	20000150 	.word	0x20000150
 80144f8:	20000158 	.word	0x20000158

080144fc <_init>:
 80144fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144fe:	bf00      	nop
 8014500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014502:	bc08      	pop	{r3}
 8014504:	469e      	mov	lr, r3
 8014506:	4770      	bx	lr

08014508 <_fini>:
 8014508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450a:	bf00      	nop
 801450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801450e:	bc08      	pop	{r3}
 8014510:	469e      	mov	lr, r3
 8014512:	4770      	bx	lr
